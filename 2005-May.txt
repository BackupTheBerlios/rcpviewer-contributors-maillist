From mike.evans at incremental.eu.com  Sun May  1 10:02:24 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sun, 01 May 2005 09:02:24 +0100
Subject: [Rcpviewer-contributors] Java 5?
In-Reply-To: <BE992DE2.2F97%eoin@copse.org.uk>
References: <BE992DE2.2F97%eoin@copse.org.uk>
Message-ID: <42748D10.2070507@incremental.eu.com>

That answers the commercial aspect.
As for attracting a user-community, I'd say something like RcpViewer 
will only appeal to early adaptors, and, by the time we have anything 
really useful Java 5 will be old hat ...
Any other opinions?

Mike E.


Eoin Woods wrote:

> Using Java 5 is fine with me as part of my motivation for getting involved
> is to be able to use the new shiny things too.
> 
> Hopefully Java 5 will be available on the Mac in the next month or so.
> 
> Would using this version lock out any significant number of potential users?
> (I'd say probably not as major products, like WebLogic, are now requiring
> it)
> 
> E.
> 
> 
> 
>>From: Mike Evans <mike.evans at incremental.eu.com>
>>Date: Sat, 30 Apr 2005 12:24:21 +0100
>>To: <rcpviewer-contributors at lists.berlios.de>
>>Subject: [Rcpviewer-contributors] Java 5?
>>
>>Hi,
>>
>>Done no coding yet.
>>Down on client side all week trying, amongst other things, to get
>>Windows 98 clients to talk Java 5 over RMI (sigh...)
>>
>>Anyway next week I'll get going.  As I am in the mood for using the
>>newest shiniest of everything what is the consensus on going pure Java 5?
>>
>>Mike E.
>>
>>-- 
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> 
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Sun May  1 13:41:50 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 1 May 2005 12:41:50 +0100
Subject: [Rcpviewer-contributors] ISession/Session
In-Reply-To: <20050428100046.25109.44031.Mailman@bat.berlios.de>
Message-ID: <LGEELLOAEBMLCOGIKLMKIEGMDCAA.dan@haywood-associates.co.uk>

Ted queried whether ISession/Session is needed.  In addition to providing
the POJO wrapping within IDomainObjects, I can justify it on several other
accounts:
a) to hold the current footprint of objects that are instantiated
client-side.  When we move to supporting 3-tier designs there will need to
be some sort of broker that keeps synchronizes the client-side objects with
server-side.
b) some editors/views will need to know the footprint of objects.  See for
example the "object view"
(http://www.haywood-associates.co.uk/rcpviewer/space/design/views/object)
and my ideas for the accessibility tab of the default object editor
(http://www.haywood-associates.co.uk/rcpviewer/space/design/editor/form)
c) to provide similar functionality (and to abstract away from)
objectstore-specifics such as Hibernate's own session, eg interacting with
transaction management
d) Even if Eclipse's Platform adapter class could do support the
functionality that I envisage ISession/Session providing, it would mean
testing the functionality using PDEUnit rather than plain JUnit.  Since
PDEUnit is heavier weight that JUnit, we should only use it for stuff that
is intrinsic to testing of the UI.
e) Also, there will be contributors who are interested in rcpviewer not
because of the Eclipse UI stuff, but because of the back-end stuff.  We
shouldn't make such contributors have to learn Eclipse API specifics
unnecessarily.

What say you all?

Dan




From dan at haywood-associates.co.uk  Sun May  1 13:51:57 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 1 May 2005 12:51:57 +0100
Subject: [Rcpviewer-contributors] Java 5
In-Reply-To: <20050501100012.3839.13851.Mailman@bat.berlios.de>
Message-ID: <LGEELLOAEBMLCOGIKLMKAEGNDCAA.dan@haywood-associates.co.uk>

Absolutely we should use Java 5 throughout.  I can't see us having much
concrete before end of year, by which time Java 5 will be 18 months old.

You'll notice that the emf-builder project is using Java 5 features
extensively.  Having not had the chance to do any real Java 5 coding before,
I have to say that it's luvverly.

I've promoted this discussion up to
http://www.haywood-associates.co.uk/rcpviewer/space/project-standards/suppor
ting-platform.




From dan at haywood-associates.co.uk  Sun May  1 14:32:42 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 1 May 2005 13:32:42 +0100
Subject: [Rcpviewer-contributors] AspectJ
In-Reply-To: <20050501100012.3839.13851.Mailman@bat.berlios.de>
Message-ID: <LGEELLOAEBMLCOGIKLMKAEGODCAA.dan@haywood-associates.co.uk>

Picking up on Mike's posting regards Java 5, I just want to make sure we're
on the same page regarding AspectJ.

I don't think any of us are AOP novices, and you might have noticed that
I've been using AspectJ in the emf-builder project.  I have a number of
reasons why I want rcpviewer to use AspectJ:

* it will attract the early adopters/contributors.  There have been many
people in the past who have remarked that the NO idea is really just a
visualization aspect
* I believe that AOP is now mature enough to be used in anger (IBM are using
it in Websphere)
* as a consultant I want it on my CV :-)
* using AspectJ should considerably simplify the implementation (amount of
code) that we need to write

However, I also recognise that opinion within the IT community on AOP is
divided and over-using it could inhibit the adoption of the framework
(there's gonna be enough inhibitors already!)

So my position is that we should feel free to use AspectJ within the
implementation of components, but that it should not be exposed within
interfaces, other than through the requirement of some annotations
(specifically in the programming model).  So, if a contributor wishes to
develop a new view, or a new persistence mechanism, then they can implement
it using traditional OO and it should work, or they want then they can use
an OO/AO approach too.

I've posted the start of a position paper up on the wiki, see
http://www.haywood-associates.co.uk/rcpviewer/space/project-standards/use-of
-aspects.

But could we have some discussion via this mailing list? - I'll then
summarize.

Cheers
Dan





From emorning at yahoo.com  Sun May  1 15:02:59 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 01 May 2005 08:02:59 -0500
Subject: [Rcpviewer-contributors] Java 5?
In-Reply-To: <42748D10.2070507@incremental.eu.com>
References: <BE992DE2.2F97%eoin@copse.org.uk> <42748D10.2070507@incremental.eu.com>
Message-ID: <4274D383.1030806@yahoo.com>

Mike Evans wrote:

> As for attracting a user-community, I'd say something like RcpViewer 
> will only appeal to early adaptors, and, by the time we have anything 
> really useful Java 5 will be old hat ...

Agreed.


>>
>>> From: Mike Evans <mike.evans at incremental.eu.com>
>>>
>>> Anyway next week I'll get going.  As I am in the mood for using the
>>> newest shiniest of everything what is the consensus on going pure 
>>> Java 5?
>>>


I am also taking this opportunity to explore things that I've wanted to 
try for a while but can't do in the confines of normal work.
Spring is one of those things. 
We customize our application for each of our clients, I am hoping that 
Spring will help make that process easier by allowing a 'product' plugin 
to easily replace system rules by replacing the objects in the 'engine' 
plugin that implement the rules. 
Anybody have opinions about Spring (springframework.org)?


From eoin at copse.org.uk  Sun May  1 16:07:38 2005
From: eoin at copse.org.uk (Eoin Woods)
Date: Sun, 1 May 2005 15:07:38 +0100
Subject: [Rcpviewer-contributors] Java 5?
In-Reply-To: <4274D383.1030806@yahoo.com>
Message-ID: <E1DSF6i-0007QP-00@mrelayng.kundenserver.de>

> Anybody have opinions about Spring (springframework.org)?
I looked at it seriously a couple of months ago for possible use on a
customer project.

It's certainly a useful framework that embodies a number of good ideas.
However my experience was that:

(a) It's complex and inconsistent across the implementation.  It usually
isn't clear how to use it for anything other than plain IoC and working it
out can be difficult.

(b) The documentation is poor and the books that have been written about it
are quite limited too (I've tried to use "Pro Spring" and Rod Johnson's
"J2EE Without EJB").

Putting these two experiences together, my opinion is that if you just want
IoC, it's well worth considering Pico/NanoContainer, which is much simpler.
If you need a complete application framework, Spring can almost certainly do
the job, but expect to spend a lot of time working out how to use it.

Cheers,

Eoin. 
-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de] On Behalf Of ted stockwell
Sent: 01 May 2005 14:03
To: rcpviewer-contributors at lists.berlios.de
Subject: Re: [Rcpviewer-contributors] Java 5?

Mike Evans wrote:

> As for attracting a user-community, I'd say something like RcpViewer 
> will only appeal to early adaptors, and, by the time we have anything 
> really useful Java 5 will be old hat ...

Agreed.


>>
>>> From: Mike Evans <mike.evans at incremental.eu.com>
>>>
>>> Anyway next week I'll get going.  As I am in the mood for using the 
>>> newest shiniest of everything what is the consensus on going pure 
>>> Java 5?
>>>


I am also taking this opportunity to explore things that I've wanted to try
for a while but can't do in the confines of normal work.
Spring is one of those things. 
We customize our application for each of our clients, I am hoping that
Spring will help make that process easier by allowing a 'product' plugin to
easily replace system rules by replacing the objects in the 'engine' 
plugin that implement the rules. 
Anybody have opinions about Spring (springframework.org)?
_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors



From dan at haywood-associates.co.uk  Sun May  1 16:18:06 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 1 May 2005 15:18:06 +0100
Subject: [Rcpviewer-contributors] Dependency Injection
In-Reply-To: <E1DSF6i-0007QP-00@mrelayng.kundenserver.de>
Message-ID: <LGEELLOAEBMLCOGIKLMKCEGPDCAA.dan@haywood-associates.co.uk>

I've used Spring.net just for DI; also I prefer setter-based DI over
constructor-based (Spring favours the former, Pico the latter).

But it sounds like Eoin has made a rather more extensive review.

I'd be happy to go with Pico, too, if only because it gives me exposure to
another DI implementation, and so that we don't run the risk of our
application-framework stuff being confused with the app framework stuff that
Spring in all its glory offers.

Dan




-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Eoin Woods
Sent: 01 May 2005 15:08
To: rcpviewer-contributors at lists.berlios.de
Subject: RE: [Rcpviewer-contributors] Java 5?


> Anybody have opinions about Spring (springframework.org)?
I looked at it seriously a couple of months ago for possible use on a
customer project.

It's certainly a useful framework that embodies a number of good ideas.
However my experience was that:

(a) It's complex and inconsistent across the implementation.  It usually
isn't clear how to use it for anything other than plain IoC and working it
out can be difficult.

(b) The documentation is poor and the books that have been written about it
are quite limited too (I've tried to use "Pro Spring" and Rod Johnson's
"J2EE Without EJB").

Putting these two experiences together, my opinion is that if you just want
IoC, it's well worth considering Pico/NanoContainer, which is much simpler.
If you need a complete application framework, Spring can almost certainly do
the job, but expect to spend a lot of time working out how to use it.

Cheers,

Eoin.
-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de] On Behalf Of ted stockwell
Sent: 01 May 2005 14:03
To: rcpviewer-contributors at lists.berlios.de
Subject: Re: [Rcpviewer-contributors] Java 5?

Mike Evans wrote:

> As for attracting a user-community, I'd say something like RcpViewer
> will only appeal to early adaptors, and, by the time we have anything
> really useful Java 5 will be old hat ...

Agreed.


>>
>>> From: Mike Evans <mike.evans at incremental.eu.com>
>>>
>>> Anyway next week I'll get going.  As I am in the mood for using the
>>> newest shiniest of everything what is the consensus on going pure
>>> Java 5?
>>>


I am also taking this opportunity to explore things that I've wanted to try
for a while but can't do in the confines of normal work.
Spring is one of those things.
We customize our application for each of our clients, I am hoping that
Spring will help make that process easier by allowing a 'product' plugin to
easily replace system rules by replacing the objects in the 'engine'
plugin that implement the rules.
Anybody have opinions about Spring (springframework.org)?
_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors

_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From emorning at yahoo.com  Wed May  4 13:49:49 2005
From: emorning at yahoo.com (ted stockwell)
Date: Wed, 04 May 2005 06:49:49 -0500
Subject: [Rcpviewer-contributors] Acegi Security Was: Dependency Injection
In-Reply-To: <LGEELLOAEBMLCOGIKLMKCEGPDCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKCEGPDCAA.dan@haywood-associates.co.uk>
Message-ID: <4278B6DD.20900@yahoo.com>

>>Anybody have opinions about Spring (springframework.org)?
>>    
>>
>I looked at it seriously a couple of months ago for possible use on a
>customer project.
>
>It's certainly a useful framework that embodies a number of good ideas.
>However my experience was that:
>
>(a) It's complex and inconsistent across the implementation.  It usually
>isn't clear how to use it for anything other than plain IoC and working it
>out can be difficult.
>  
>
I bought 'Pro Spring'.  It's OK but it really needs a reference to the
XML configuration syntax.


>Putting these two experiences together, my opinion is that if you just want
>IoC, it's well worth considering Pico/NanoContainer, which is much simpler.
>If you need a complete application framework, Spring can almost certainly do
>the job, but expect to spend a lot of time working out how to use it.
>
>Cheers,
>
>Eoin.
>  
>

Well, what convinced me to go with Spring was the Acegi Security
framework, it looks very good to me.
Acegi is a *heck* of a lot easier to figure out than JAAS, and since it
already uses Spring I decided to give Spring a try.

I am planning on using the Acegi API in my spike.  Acegi provides an interface-based API for authentication and authorization.
Any opinions, pro or con, on using Acegi for the security aspect of the viewer?


From dan at haywood-associates.co.uk  Wed May  4 15:12:15 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 4 May 2005 13:12:15 GMT
Subject: [Rcpviewer-contributors] Re: Acegi Security
Message-ID: <Zen-1DTJfj-0004W6-L9@rutherford.zen.co.uk>

> Well, what convinced me to go with Spring was the Acegi Security
> framework, it looks very good to me.
> Acegi is a *heck* of a lot easier to figure out than JAAS, and since it
> already uses Spring I decided to give Spring a try.
> 
> I am planning on using the Acegi API in my spike.  Acegi provides an
> interface-based API for authentication and authorization.
> Any opinions, pro or con, on using Acegi for the security aspect of the
> viewer?


That sounds like a concrete enough reason to go with Spring, especially since that's now 3 of us who have used it.    I've also heard good things about Acegi.  Any other opinions?

I couldn't find an obvious reference to the license for Acegi - is it commercially friendly do you know? :-)






From emorning at yahoo.com  Wed May  4 16:17:34 2005
From: emorning at yahoo.com (ted stockwell)
Date: Wed, 04 May 2005 09:17:34 -0500
Subject: [Rcpviewer-contributors] Re: Acegi Security
In-Reply-To: <Zen-1DTJfj-0004W6-L9@rutherford.zen.co.uk>
References: <Zen-1DTJfj-0004W6-L9@rutherford.zen.co.uk>
Message-ID: <4278D97E.8060507@yahoo.com>

Dan Haywood wrote:

>>Well, what convinced me to go with Spring was the Acegi Security
>>framework, it looks very good to me.
>>Acegi is a *heck* of a lot easier to figure out than JAAS, and since it
>>already uses Spring I decided to give Spring a try.
>>
>>I am planning on using the Acegi API in my spike.  Acegi provides an
>>interface-based API for authentication and authorization.
>>Any opinions, pro or con, on using Acegi for the security aspect of the
>>viewer?
>>    
>>
>
>
>That sounds like a concrete enough reason to go with Spring, especially since that's now 3 of us who have used it.    I've also heard good things about Acegi.  Any other opinions?
>
>I couldn't find an obvious reference to the license for Acegi - is it commercially friendly do you know? :-)
>
>
>  
>

Geez, I really gotta start checking the license first :-).
Anyway, Acegi uses an Apache license.  That works for me.


From emorning at yahoo.com  Thu May  5 18:10:05 2005
From: emorning at yahoo.com (ted stockwell)
Date: Thu, 05 May 2005 11:10:05 -0500
Subject: [Rcpviewer-contributors] Starting to need some metadata
In-Reply-To: <4278D97E.8060507@yahoo.com>
References: <Zen-1DTJfj-0004W6-L9@rutherford.zen.co.uk> <4278D97E.8060507@yahoo.com>
Message-ID: <427A455D.6010109@yahoo.com>

Hi All,

Those of you that love really long e-mails are gonna love this one ;-)....

I'm at the point where I'm ready to write code that will open an EMF 
object in an Editor, specifically an RCPViewerEditor. 
An Eclipse editor must be supplied with an instance of IEditorInput when 
the editor is opened.
Among other things IEditorInput must implement these three methods...

    /**
     * Returns the image descriptor for this input.
     */
    public ImageDescriptor getImageDescriptor();

    /**
     * Returns the name of this editor input for display purposes.
     */
    public String getName();

    /**
     * Returns the tool tip text for this editor input. 
     */
    public String getToolTipText();


These three items are 'extra' properties, for the UI only, and are not 
normally part of a domain object model.
NO requires methods to be added to the domain model to supply this 
information.  Actually, that's one aspect of NO that I don't care for, I 
don't think that an object model should have to be polluted with this 
information.  I'm not sure how the POJO version of NO gets this information.
I've taken a look at the classes in the EMF-Builder project and I didn't 
see anything that would get me this information.

So, here is my proposal... I have introduced a new interface, 
IRcpViewerMetadata that provides the viewer with access to this information.
As is my usual modis operandi,  I use the Eclipse AdapterManager to get 
an IRcpViewerMetadata from any object.  So, when I need an object's 
metadata I do this...

    IRcpViewerMetadata metadata= (IRcpViewerMetadata)
        
Platform.getAdapterManager().getAdapter(IRcpViewerMetadata.class, 
anyEObject);

------------------------------

So, instead of modifying the domain model and adding classes that 
specify this information I have chosen to put this information into an 
XML file and register this file in an extension point, 
de.berlios.rcpviewer.metadata.
The metadata extension element points to a file with the XML metadata in it.
So, in the plugin that defines the PurchaseOrder class I have this 
extension element in the plugin.xml...

<extension point="de.berlios.rcpviewer.metadata">
    <metadata class="com.example.ppo.PurchaseOrder" 
xml="PurchaseOrder.rvm" />
</extension>

Then, when the de.berlios.rcpviewer starts up it rips through all the 
de.berlios.rcpviewer.metadata extensions and, for every metadata 
element  in an extension, registers an adapter factory that can supply 
an instance of IRcpViewerMetadata given an object that implements the 
interface named in the metadata's 'class' element.  The 
de.berlios.rcpviewer reads the denoted XML file to get the metadata.

Make sense so far?

------------------------------

Here is the best part...

I have modeled the IRcpViewerMetadata in EMF.  Right out of the box I 
have an editor for creating/editing metadata.  The default EMF.Edit 
editor lets me save the metadata as XML (Ecore  XML).  The EMF framework 
gives me tools to load the XML as a IRcpViewerMetadata object. 

Since IRcpViewerMetadata is an Ecore object then when the RCPViewer is 
completed it will be possible to edit RCPViewer metadata information 
using the RCPViewer itself.

But wait!  There's more! 
Have you seen the default EMF model editor?  EMF has a default model 
editor for creating and editing Ecore models.  This is possible because 
ECore itself is expressed as a model that the EMF.Edit framework can use 
to generate an editor.
So....the EMF.Edit framework can be used to a) create models (that is, 
model the application), and then b) used in the application itself to 
create/edit objects.

Following the same pattern as EMF.Edit, if we model the RCPViewer 
metadata as ECore objects then the RCPViewer will be able to a) model an 
application, and then b) run the application.
It would even be possible to open an application's metadata from within 
the application, change the metadata, and then restart to apply the changes!
Cool or what!

---------------------------








From emorning at yahoo.com  Thu May  5 18:28:37 2005
From: emorning at yahoo.com (ted stockwell)
Date: Thu, 05 May 2005 11:28:37 -0500
Subject: [Rcpviewer-contributors] Re: A preview...
In-Reply-To: <427A1C0C.10305@yahoo.com>
References: <Zen-1DTJfj-0004W6-L9@rutherford.zen.co.uk> <4278D97E.8060507@yahoo.com> <427A1C0C.10305@yahoo.com>
Message-ID: <427A49B5.2090908@yahoo.com>

I tried to post a message with an image attached and it got rejected so 
I have posted my comments on the wiki...

http://www.haywood-associates.co.uk/rcpviewer/space/ted/What+I+think+the+RCP+Viewer+could+look+like...


From mike.evans at incremental.eu.com  Fri May  6 18:08:08 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Fri, 06 May 2005 17:08:08 +0100
Subject: [Rcpviewer-contributors] emf-builder review
Message-ID: <427B9668.4080508@incremental.eu.com>

Dan,

Trying to look at your emf-builder, some issues with (perhaps old? or 
conversely not up to date ) classes.

* what has happened to DomainClassRegistry?

* either I have not set up my SVN properly and am importing deleted 
classes or we have have a conflict/ambiguity, eg:
     de.berlios.rcpviewer.metamodel.DomainObject
     de.berlios.rcpviewer.progmodel.standard.DomainObject


* can I suggets setting 'java / code style / number of imports needed 
for *' at 9999 - in this day and age of auto-folding editors, having 
long import lists is not a problem - and much more helpful for resolving 
class ambiguities such as the above (if you're happoy with this I'll add 
it to Project Standards)

* TestDomainClass testing non-existent methods.

* I have made some very minor typo corrections / clarifications to 
Index.wiki & committed (NO OTHER commits done)

Mike E.




-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Sat May  7 01:29:33 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sat, 7 May 2005 00:29:33 +0100
Subject: [Rcpviewer-contributors] emf-builder review
In-Reply-To: <427B9668.4080508@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKCEIKDCAA.dan@haywood-associates.co.uk>

Hi Mike,

You are right, there was definitely some junk in SVN as a result of me
refactoring and moving classes around.  It wasn't there on my local
workspace, and subclipse reported everything sync'ed up.  So either a bug in
subclipse, or (equally likely) me not using the plugin in the way its
designers intended.

So, I moved my local workspace off to one side, then did a complete refresh
with tortoisesvn.  Then did a compare of the two directories, and located
the junk.  Then zapped with tortoisesvn and commited.

Have loaded eclipse against this new workspace; all tests are now passing.

So, if you refresh to head (or revision 114 or thereabouts), then you should
be able to get a clean compile.

---
To answer your other points:
- DomainClassRegistry I've now renamed to MetaModel.  That's because it has
an additional responsibilities of looking after IMetaModelExtensions -
things that parse the POJO classes looking for additional semantics.
- happy with your suggestion on the programming style.  If you're feeling
proactive and want to do an export of your favourite settings, please upload
into somewhere sensible on SVN and document on t'wiki.

---
Also, I've moved the 3 empty folders that were languishing directly under
rcpviewer/ into rcpviewer/trunk/spikes/mikes-workspace.  I guess they got
created when you were messing around with SVN (I know it took me a little
experimentation to figure things out).

Cheers - and sorry you didn't get to play with emf-builder earlier on today.

Dan

-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
Sent: 06 May 2005 17:08
To: Dan Haywood; rcpviewer-contributors at lists.berlios.de
Subject: [Rcpviewer-contributors] emf-builder review


Dan,

Trying to look at your emf-builder, some issues with (perhaps old? or
conversely not up to date ) classes.

* what has happened to DomainClassRegistry?

* either I have not set up my SVN properly and am importing deleted
classes or we have have a conflict/ambiguity, eg:
     de.berlios.rcpviewer.metamodel.DomainObject
     de.berlios.rcpviewer.progmodel.standard.DomainObject


* can I suggets setting 'java / code style / number of imports needed
for *' at 9999 - in this day and age of auto-folding editors, having
long import lists is not a problem - and much more helpful for resolving
class ambiguities such as the above (if you're happoy with this I'll add
it to Project Standards)

* TestDomainClass testing non-existent methods.

* I have made some very minor typo corrections / clarifications to
Index.wiki & committed (NO OTHER commits done)

Mike E.




--
Mike Evans
Incremental Ltd.
www.incremental.eu.com

_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From dan at haywood-associates.co.uk  Sat May  7 08:44:44 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sat, 7 May 2005 07:44:44 +0100
Subject: [Rcpviewer-contributors] Starting to need some metadata
In-Reply-To: <427A455D.6010109@yahoo.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKKEILDCAA.dan@haywood-associates.co.uk>

Hi Ted,
glad to see you've been busy :-)

Couple of things to note, though - so here's my long email in return...

1. Metadata

You were talking about getName(), getToolTipText(), getImageDescriptor() and
saying (a) how they aren't in emf-builder, (b) that they shouldn't be, and
(c) you've put the info into plugin.xml.

In fact, the first two are supported - every IDomainClass, attribute,
operation and operation parameter has a name.  And the tooltiptext equates
to the description.  It's a responsibility of the UI components to interpret
the description as tooltiptext.  In the programming model, this information
is provided using @Named and @DescribedAs annotations.

The last one is also supported through the metamodel, but as an extension
object pattern (I've called it Adapter).  I've only just uploaded this, so
it wasn't there when you looked at the code, but it was my plan.

So how it works is thus: one registers an IMetaModelExtension (either
programmatically or more likely we define an extension point in
plugins.xml) - when a POJO is being analyzed and its IDomainClass is being
built, any extensions are asked to contribute their own semantics.  These
are then subsequently available using:

SomeExtension myExtension =
(SomeExtension)someDomainClass.getAdapter(SomeExtension.class);

Have a look at
tests/de.berlios.rcpviewer.progmodel.standard/TestExplicitNamesAndDescriptio
ns#testDomainClassThatIsExplicitlyNamed to see this in action.  The concrete
extension that's tested there is an RcpViewerExtension that is able to
furnish your aforesaid ImageDescriptors.  (You'll note that I use the URL
form of constructing this ImageDescriptor, and the IMetaModelExtension uses
an @ImageUrlAt to save away this URL as an EAnnotation within EMF.  However,
an alternative implementation of this extension - and one that would be
preferable I think - would be to use the Class, fileName:String form.  In
this case no annotation would need to be saved, because the first info is
known, and the second info could be searched for.  I've described this more
in the javadoc for @ImageUrlAt).

You chose to put this extra metadata in plugins.xml whereas I've used the
POJO itself.  You said: "Actually, that's one aspect of NO that I don't care
for, I don't think that an object model should have to be polluted with this
information", so your preference is outside the POJO model.  I take the
opposite view.  I want rcpviewer to be non technical so that most "domain
programmers" (guys using rcpviewer to write business applications) have a
minimum of things to wrap their heads around.  Now we can expect that they
understand Java and in the next 12 months using annotations will become
commonplace (eg the EJB3 spec).  But understanding the vagaries of
plugin.xml is not something I want these guys - our principle users - to
have to understand.  Also, imagine oneself in this role: in a workshop with
end-users and identifying a POJO and its attributes and operations.  I want
to be able to get this information down as quickly as possible, and the
quickest way is in a single (Java) editor.  Even if we had some rinky dink
wizard to populate this info into plugin.xml, you'd still have to find that
wizard, and run it, and then remember the name of the attribute you are
describing etc - by which time you're out of the flow.  Please remember: I'm
talking about this "domain programmer" role from the point of view of
actually having done it for the last 12 months in Ireland.

All that said, the design I've described doesn't preclude using plugin.xml.
The IMetaModelExtension actually can get its information from anywhere -
even from a database I guess, for example if it were providing help
information.  Another example: one of the things I'd like to build is to use
VEP to create an editor that would allow the application developer to
explicitly specify where fields go on an form - see
http://www.haywood-associates.co.uk/rcpviewer/space/tooling/domain-object-ui
-representation/explicit-form-editor for a little more explanation.  Now the
result of this editor might well be a bunch of XML that goes into plugin.xml
(or it could be a new class like a BeanInfo).  But here I'm quite happy that
this information is separate from the POJO, because developing such a
customized representation would typically be done after the main domain
programming, and might even be done by a specialist developer who
concentrates on building UIs.

I hope some of this makes sense - I have a very clear idea about how certain
aspects of rcpviewer are to work - and this happens to be one of them.


2. EMF

Sounds like you've been up to some clever stuff with EMF.  Although I'm
using EMF also to hold the data within emf-builder, I'm not using its
EMF.Edit or code generation features.  And here again I'm a little wary
about it, because it may raise the bar in terms of sophistication of domain
programmers.  Remember that EMF is really an implementation of MOF - a
meta-meta-meta-model.  Most domain programmers I envisage using rcpviewer
would get freaked out at one "meta".

But I don't want to sound too negative.  If we can use EMF's code gen stuff
to develop either some of our custom viewers for the runtime rcpviewer, or
indeed to provide tooling editors for development time, then fair enough.
Best thing would be to get your stuff uploaded into SVN, then we can review.

---
Right - it's a Saturday.  Enough already.
Dan


-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
stockwell
Sent: 05 May 2005 17:10
To: rcpviewer-contributors at lists.berlios.de
Subject: [Rcpviewer-contributors] Starting to need some metadata


Hi All,

Those of you that love really long e-mails are gonna love this one ;-)....

I'm at the point where I'm ready to write code that will open an EMF
object in an Editor, specifically an RCPViewerEditor.
An Eclipse editor must be supplied with an instance of IEditorInput when
the editor is opened.
Among other things IEditorInput must implement these three methods...

    /**
     * Returns the image descriptor for this input.
     */
    public ImageDescriptor getImageDescriptor();

    /**
     * Returns the name of this editor input for display purposes.
     */
    public String getName();

    /**
     * Returns the tool tip text for this editor input.
     */
    public String getToolTipText();


These three items are 'extra' properties, for the UI only, and are not
normally part of a domain object model.
NO requires methods to be added to the domain model to supply this
information.  Actually, that's one aspect of NO that I don't care for, I
don't think that an object model should have to be polluted with this
information.  I'm not sure how the POJO version of NO gets this information.
I've taken a look at the classes in the EMF-Builder project and I didn't
see anything that would get me this information.

So, here is my proposal... I have introduced a new interface,
IRcpViewerMetadata that provides the viewer with access to this information.
As is my usual modis operandi,  I use the Eclipse AdapterManager to get
an IRcpViewerMetadata from any object.  So, when I need an object's
metadata I do this...

    IRcpViewerMetadata metadata= (IRcpViewerMetadata)

Platform.getAdapterManager().getAdapter(IRcpViewerMetadata.class,
anyEObject);

------------------------------

So, instead of modifying the domain model and adding classes that
specify this information I have chosen to put this information into an
XML file and register this file in an extension point,
de.berlios.rcpviewer.metadata.
The metadata extension element points to a file with the XML metadata in it.
So, in the plugin that defines the PurchaseOrder class I have this
extension element in the plugin.xml...

<extension point="de.berlios.rcpviewer.metadata">
    <metadata class="com.example.ppo.PurchaseOrder"
xml="PurchaseOrder.rvm" />
</extension>

Then, when the de.berlios.rcpviewer starts up it rips through all the
de.berlios.rcpviewer.metadata extensions and, for every metadata
element  in an extension, registers an adapter factory that can supply
an instance of IRcpViewerMetadata given an object that implements the
interface named in the metadata's 'class' element.  The
de.berlios.rcpviewer reads the denoted XML file to get the metadata.

Make sense so far?

------------------------------

Here is the best part...

I have modeled the IRcpViewerMetadata in EMF.  Right out of the box I
have an editor for creating/editing metadata.  The default EMF.Edit
editor lets me save the metadata as XML (Ecore  XML).  The EMF framework
gives me tools to load the XML as a IRcpViewerMetadata object.

Since IRcpViewerMetadata is an Ecore object then when the RCPViewer is
completed it will be possible to edit RCPViewer metadata information
using the RCPViewer itself.

But wait!  There's more!
Have you seen the default EMF model editor?  EMF has a default model
editor for creating and editing Ecore models.  This is possible because
ECore itself is expressed as a model that the EMF.Edit framework can use
to generate an editor.
So....the EMF.Edit framework can be used to a) create models (that is,
model the application), and then b) used in the application itself to
create/edit objects.

Following the same pattern as EMF.Edit, if we model the RCPViewer
metadata as ECore objects then the RCPViewer will be able to a) model an
application, and then b) run the application.
It would even be possible to open an application's metadata from within
the application, change the metadata, and then restart to apply the changes!
Cool or what!

---------------------------






_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From mike.evans at incremental.eu.com  Sat May  7 10:59:27 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sat, 07 May 2005 09:59:27 +0100
Subject: [Rcpviewer-contributors] emf-builder review
In-Reply-To: <LGEELLOAEBMLCOGIKLMKCEIKDCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKCEIKDCAA.dan@haywood-associates.co.uk>
Message-ID: <427C836F.9060301@incremental.eu.com>

Damn, you caught my floundering around in SVN...
Was going to rectify the mess to day.  I think I'll have a look at 
TortoiseSVN.
Will start a wiki page off project standards for Eclipse settings.  I 
think your idea is a good one to have standard exported options.
However we should probably build these up collectively, and I'll first 
need a seperate Eclipse install so that you do not get all my Epic junk.
Busy day...

Mike E.


Dan Haywood wrote:
> Hi Mike,
> 
> You are right, there was definitely some junk in SVN as a result of me
> refactoring and moving classes around.  It wasn't there on my local
> workspace, and subclipse reported everything sync'ed up.  So either a bug in
> subclipse, or (equally likely) me not using the plugin in the way its
> designers intended.
> 
> So, I moved my local workspace off to one side, then did a complete refresh
> with tortoisesvn.  Then did a compare of the two directories, and located
> the junk.  Then zapped with tortoisesvn and commited.
> 
> Have loaded eclipse against this new workspace; all tests are now passing.
> 
> So, if you refresh to head (or revision 114 or thereabouts), then you should
> be able to get a clean compile.
> 
> ---
> To answer your other points:
> - DomainClassRegistry I've now renamed to MetaModel.  That's because it has
> an additional responsibilities of looking after IMetaModelExtensions -
> things that parse the POJO classes looking for additional semantics.
> - happy with your suggestion on the programming style.  If you're feeling
> proactive and want to do an export of your favourite settings, please upload
> into somewhere sensible on SVN and document on t'wiki.
> 
> ---
> Also, I've moved the 3 empty folders that were languishing directly under
> rcpviewer/ into rcpviewer/trunk/spikes/mikes-workspace.  I guess they got
> created when you were messing around with SVN (I know it took me a little
> experimentation to figure things out).
> 
> Cheers - and sorry you didn't get to play with emf-builder earlier on today.
> 
> Dan
> 
> -----Original Message-----
> From: rcpviewer-contributors-admin at berlios.de
> [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
> Sent: 06 May 2005 17:08
> To: Dan Haywood; rcpviewer-contributors at lists.berlios.de
> Subject: [Rcpviewer-contributors] emf-builder review
> 
> 
> Dan,
> 
> Trying to look at your emf-builder, some issues with (perhaps old? or
> conversely not up to date ) classes.
> 
> * what has happened to DomainClassRegistry?
> 
> * either I have not set up my SVN properly and am importing deleted
> classes or we have have a conflict/ambiguity, eg:
>      de.berlios.rcpviewer.metamodel.DomainObject
>      de.berlios.rcpviewer.progmodel.standard.DomainObject
> 
> 
> * can I suggets setting 'java / code style / number of imports needed
> for *' at 9999 - in this day and age of auto-folding editors, having
> long import lists is not a problem - and much more helpful for resolving
> class ambiguities such as the above (if you're happoy with this I'll add
> it to Project Standards)
> 
> * TestDomainClass testing non-existent methods.
> 
> * I have made some very minor typo corrections / clarifications to
> Index.wiki & committed (NO OTHER commits done)
> 
> Mike E.
> 
> 
> 
> 
> --
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Sat May  7 11:31:47 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sat, 07 May 2005 10:31:47 +0100
Subject: [Rcpviewer-contributors] Starting to need some metadata
In-Reply-To: <LGEELLOAEBMLCOGIKLMKKEILDCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKKEILDCAA.dan@haywood-associates.co.uk>
Message-ID: <427C8B03.8070605@incremental.eu.com>

My ha'pennies worth:

1. Metadata

Hey - I'm getting involved in the Metadata debate!

I'm actually with Dan here in terms of putting all domain-requisite data 
  within the POJO. And annotations is the seemly solution for this.

Additional, shall I say 'decorating', semantics could then be made 
available via extension points or any other mechanism.

POJO annotations alone must provide a fully functional, if basic, GUI. 
Extensions can then be used to override the default implementation - in 
Eclipse using the standard Platform.getAdapterManager().getAdapter( ...) 
pattern.

Hence to me the core question is what is requisite and what is 
'decorating' (sorry for the poor terminnology - you consultants out 
there must be shuddering).   In fact this is not so much a question as a 
function of time.  We'll (have to) start with the basics and then can 
wrap more and more annotation-based functionality in as we go.  For 
Ted's clever EMF-stuff we'll put some mechanism in to allow the 
development GUI to understand arbitary extensions to the annotations.

2. EMF
Sounds like we have a basic 'runtime' RcpViewer and a development 'pro' 
version:
Runtime:
  - standalone RCP app
  - packaged with domain model and preconfigured domain data
  - for Dan's 'domain programmers'
Development
  - superset of runtime's plugins but normally runs within Eclipse
  - allows manipulation of Ted's clever self-describing EMF models.
  - runs up the runtime version for testing
  - magic wizards for auto-deployment of runtime.

Note with time the boundaries would blur - in fact it might be better to 
think of the runtime to be no more than the development version with the 
'RCPDevelopment' capability disabled.

This would also give us a division of responsibilites - runtime GUI vs 
development and builder tools.

Mike E.



Dan Haywood wrote:

> Hi Ted,
> glad to see you've been busy :-)
> 
> Couple of things to note, though - so here's my long email in return...
> 
> 1. Metadata
> 
> You were talking about getName(), getToolTipText(), getImageDescriptor() and
> saying (a) how they aren't in emf-builder, (b) that they shouldn't be, and
> (c) you've put the info into plugin.xml.
> 
> In fact, the first two are supported - every IDomainClass, attribute,
> operation and operation parameter has a name.  And the tooltiptext equates
> to the description.  It's a responsibility of the UI components to interpret
> the description as tooltiptext.  In the programming model, this information
> is provided using @Named and @DescribedAs annotations.
> 
> The last one is also supported through the metamodel, but as an extension
> object pattern (I've called it Adapter).  I've only just uploaded this, so
> it wasn't there when you looked at the code, but it was my plan.
> 
> So how it works is thus: one registers an IMetaModelExtension (either
> programmatically or more likely we define an extension point in
> plugins.xml) - when a POJO is being analyzed and its IDomainClass is being
> built, any extensions are asked to contribute their own semantics.  These
> are then subsequently available using:
> 
> SomeExtension myExtension =
> (SomeExtension)someDomainClass.getAdapter(SomeExtension.class);
> 
> Have a look at
> tests/de.berlios.rcpviewer.progmodel.standard/TestExplicitNamesAndDescriptio
> ns#testDomainClassThatIsExplicitlyNamed to see this in action.  The concrete
> extension that's tested there is an RcpViewerExtension that is able to
> furnish your aforesaid ImageDescriptors.  (You'll note that I use the URL
> form of constructing this ImageDescriptor, and the IMetaModelExtension uses
> an @ImageUrlAt to save away this URL as an EAnnotation within EMF.  However,
> an alternative implementation of this extension - and one that would be
> preferable I think - would be to use the Class, fileName:String form.  In
> this case no annotation would need to be saved, because the first info is
> known, and the second info could be searched for.  I've described this more
> in the javadoc for @ImageUrlAt).
> 
> You chose to put this extra metadata in plugins.xml whereas I've used the
> POJO itself.  You said: "Actually, that's one aspect of NO that I don't care
> for, I don't think that an object model should have to be polluted with this
> information", so your preference is outside the POJO model.  I take the
> opposite view.  I want rcpviewer to be non technical so that most "domain
> programmers" (guys using rcpviewer to write business applications) have a
> minimum of things to wrap their heads around.  Now we can expect that they
> understand Java and in the next 12 months using annotations will become
> commonplace (eg the EJB3 spec).  But understanding the vagaries of
> plugin.xml is not something I want these guys - our principle users - to
> have to understand.  Also, imagine oneself in this role: in a workshop with
> end-users and identifying a POJO and its attributes and operations.  I want
> to be able to get this information down as quickly as possible, and the
> quickest way is in a single (Java) editor.  Even if we had some rinky dink
> wizard to populate this info into plugin.xml, you'd still have to find that
> wizard, and run it, and then remember the name of the attribute you are
> describing etc - by which time you're out of the flow.  Please remember: I'm
> talking about this "domain programmer" role from the point of view of
> actually having done it for the last 12 months in Ireland.
> 
> All that said, the design I've described doesn't preclude using plugin.xml.
> The IMetaModelExtension actually can get its information from anywhere -
> even from a database I guess, for example if it were providing help
> information.  Another example: one of the things I'd like to build is to use
> VEP to create an editor that would allow the application developer to
> explicitly specify where fields go on an form - see
> http://www.haywood-associates.co.uk/rcpviewer/space/tooling/domain-object-ui
> -representation/explicit-form-editor for a little more explanation.  Now the
> result of this editor might well be a bunch of XML that goes into plugin.xml
> (or it could be a new class like a BeanInfo).  But here I'm quite happy that
> this information is separate from the POJO, because developing such a
> customized representation would typically be done after the main domain
> programming, and might even be done by a specialist developer who
> concentrates on building UIs.
> 
> I hope some of this makes sense - I have a very clear idea about how certain
> aspects of rcpviewer are to work - and this happens to be one of them.
> 
> 
> 2. EMF
> 
> Sounds like you've been up to some clever stuff with EMF.  Although I'm
> using EMF also to hold the data within emf-builder, I'm not using its
> EMF.Edit or code generation features.  And here again I'm a little wary
> about it, because it may raise the bar in terms of sophistication of domain
> programmers.  Remember that EMF is really an implementation of MOF - a
> meta-meta-meta-model.  Most domain programmers I envisage using rcpviewer
> would get freaked out at one "meta".
> 
> But I don't want to sound too negative.  If we can use EMF's code gen stuff
> to develop either some of our custom viewers for the runtime rcpviewer, or
> indeed to provide tooling editors for development time, then fair enough.
> Best thing would be to get your stuff uploaded into SVN, then we can review.
> 
> ---
> Right - it's a Saturday.  Enough already.
> Dan
> 
> 
> -----Original Message-----
> From: rcpviewer-contributors-admin at berlios.de
> [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
> stockwell
> Sent: 05 May 2005 17:10
> To: rcpviewer-contributors at lists.berlios.de
> Subject: [Rcpviewer-contributors] Starting to need some metadata
> 
> 
> Hi All,
> 
> Those of you that love really long e-mails are gonna love this one ;-)....
> 
> I'm at the point where I'm ready to write code that will open an EMF
> object in an Editor, specifically an RCPViewerEditor.
> An Eclipse editor must be supplied with an instance of IEditorInput when
> the editor is opened.
> Among other things IEditorInput must implement these three methods...
> 
>     /**
>      * Returns the image descriptor for this input.
>      */
>     public ImageDescriptor getImageDescriptor();
> 
>     /**
>      * Returns the name of this editor input for display purposes.
>      */
>     public String getName();
> 
>     /**
>      * Returns the tool tip text for this editor input.
>      */
>     public String getToolTipText();
> 
> 
> These three items are 'extra' properties, for the UI only, and are not
> normally part of a domain object model.
> NO requires methods to be added to the domain model to supply this
> information.  Actually, that's one aspect of NO that I don't care for, I
> don't think that an object model should have to be polluted with this
> information.  I'm not sure how the POJO version of NO gets this information.
> I've taken a look at the classes in the EMF-Builder project and I didn't
> see anything that would get me this information.
> 
> So, here is my proposal... I have introduced a new interface,
> IRcpViewerMetadata that provides the viewer with access to this information.
> As is my usual modis operandi,  I use the Eclipse AdapterManager to get
> an IRcpViewerMetadata from any object.  So, when I need an object's
> metadata I do this...
> 
>     IRcpViewerMetadata metadata= (IRcpViewerMetadata)
> 
> Platform.getAdapterManager().getAdapter(IRcpViewerMetadata.class,
> anyEObject);
> 
> ------------------------------
> 
> So, instead of modifying the domain model and adding classes that
> specify this information I have chosen to put this information into an
> XML file and register this file in an extension point,
> de.berlios.rcpviewer.metadata.
> The metadata extension element points to a file with the XML metadata in it.
> So, in the plugin that defines the PurchaseOrder class I have this
> extension element in the plugin.xml...
> 
> <extension point="de.berlios.rcpviewer.metadata">
>     <metadata class="com.example.ppo.PurchaseOrder"
> xml="PurchaseOrder.rvm" />
> </extension>
> 
> Then, when the de.berlios.rcpviewer starts up it rips through all the
> de.berlios.rcpviewer.metadata extensions and, for every metadata
> element  in an extension, registers an adapter factory that can supply
> an instance of IRcpViewerMetadata given an object that implements the
> interface named in the metadata's 'class' element.  The
> de.berlios.rcpviewer reads the denoted XML file to get the metadata.
> 
> Make sense so far?
> 
> ------------------------------
> 
> Here is the best part...
> 
> I have modeled the IRcpViewerMetadata in EMF.  Right out of the box I
> have an editor for creating/editing metadata.  The default EMF.Edit
> editor lets me save the metadata as XML (Ecore  XML).  The EMF framework
> gives me tools to load the XML as a IRcpViewerMetadata object.
> 
> Since IRcpViewerMetadata is an Ecore object then when the RCPViewer is
> completed it will be possible to edit RCPViewer metadata information
> using the RCPViewer itself.
> 
> But wait!  There's more!
> Have you seen the default EMF model editor?  EMF has a default model
> editor for creating and editing Ecore models.  This is possible because
> ECore itself is expressed as a model that the EMF.Edit framework can use
> to generate an editor.
> So....the EMF.Edit framework can be used to a) create models (that is,
> model the application), and then b) used in the application itself to
> create/edit objects.
> 
> Following the same pattern as EMF.Edit, if we model the RCPViewer
> metadata as ECore objects then the RCPViewer will be able to a) model an
> application, and then b) run the application.
> It would even be possible to open an application's metadata from within
> the application, change the metadata, and then restart to apply the changes!
> Cool or what!
> 
> ---------------------------
> 
> 
> 
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Sat May  7 14:43:37 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sat, 7 May 2005 13:43:37 +0100
Subject: [Rcpviewer-contributors] metadata + EMF / platforms (was "Starting to need some metadata")
In-Reply-To: <427C8B03.8070605@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKEEINDCAA.dan@haywood-associates.co.uk>

Mike,
>> thanks for your comments, some additional notes within...
Dan
---
1. Metadata

Hey - I'm getting involved in the Metadata debate!

I'm actually with Dan here in terms of putting all domain-requisite data
  within the POJO. And annotations is the seemly solution for this.

Additional, shall I say 'decorating', semantics could then be made
available via extension points or any other mechanism.

>> I think "decorating" is actually an excellent term.  This is really what
my IMetaModelExtensions are.  I was also mulling over whether the first
initial analysis (in DomainClass' identifyOperations / identifyAttributes
etc) should also be implemented as a decorator - a bit of "eating our own
dog food".  This then would allow a different implementation that would
build a metamodel using Java AST/JDOM for development-time tooling, and yet
another implementation that takes the original NO framework's metamodel and
effectively just copies it across.

>> Going back to this term "decorator"... in fact, I've been in touch with
Chris Nelson whose the guy building the Trails webapp framework (I'll let
you look it up on google).  It was his solution to use a decorator for
building his metamodel, so I'm just adapting his idea.

---
POJO annotations alone must provide a fully functional, if basic, GUI.

>> In fact I think it should be possible to build a basic GUI without any
annotations.  After all, that's what the NO framework does.  POJO
annotations should be able to add rather more sophistication - though there
is a potential scalability problem, as Ted has noted elsewhere.

>> Where POJO annotations won't be enough is when one wishes to break the
strict 1:1 correspondence between domain object and its UI representation.
I've discussed this idea a little in
http://www.haywood-associates.co.uk/rcpviewer/space/concepts/virtual-domain-
objects.

---
Extensions can then be used to override the default implementation - in
Eclipse using the standard Platform.getAdapterManager().getAdapter( ...)
pattern.

>> I'd rather do this using MetaModel.getDomainClass(...).getAdapter(...)
rather than from Platform.  That's mostly so that it can be reused
independently from Eclipse itself.  That (a) makes it easier to test
(regular JUnit tests rather than PDEUnit tests), and (b) might even allow
the metamodel to be used in other NO-like products (getting ahead of myself
as usual, I admit I've suggested the idea to Chris Nelson, though no reply
thus far...).

---
2. EMF
Sounds like we have a basic 'runtime' RcpViewer and a development 'pro'
version:
Runtime:
  - standalone RCP app
  - packaged with domain model and preconfigured domain data
  - for Dan's 'domain programmers'
Development
  - superset of runtime's plugins but normally runs within Eclipse
  - allows manipulation of Ted's clever self-describing EMF models.
  - runs up the runtime version for testing
  - magic wizards for auto-deployment of runtime.

>> Indeed; a runtime platform and a development platform.  The design page
on the wiki discusses ideas for the former, the tooling page discusses ideas
for the latter (http://www.haywood-associates.co.uk/rcpviewer/space/design
and http://www.haywood-associates.co.uk/rcpviewer/space/tooling).

>> Where you've slightly misunderstood though is that the runtime RCP app is
not for "domain programmers", it is for end users.  The domain programmers
are developers, so they use the development platform.  But, the basic Java
editor + annotations should be enough for a domain programmer to get a basic
RCP app up and running.  There can then be more specialist developers who
will use other editors that we provide in the development platform to make
the GUI more customised.  The ones on the tooling page describe such editors
that most domain programmers should be able to operate.  But a GUI
programmer might also want to develop a brand new view, eg a Map or an
Outlook-style journal or calendar.  And so these guys would definitely need
to be Eclipse-savvy and we might provide wizards to help them do it.

---
Note with time the boundaries would blur - in fact it might be better to
think of the runtime to be no more than the development version with the
'RCPDevelopment' capability disabled.

>> To an extent.  However, the tooling plugins run within a single VM,
whereas the runtime would be launching another VM.

>> That said, a chap (Bastian Bergerhoff) got in touch from Germany with Rob
Matthews - he has embedded the current NO framework as a plugin to Eclipse.
It's very odd to see as a screenshot!  What he's working on then is hot-swap
deployment, so that one can change the code and the running application
changes in real-time.  Any of you done Smalltalk?  I haven't, but old-timers
are always banging on about how good Smalltalk was because it can support
this idea.
>> So, if he gets this working, then perhaps the two sets of plugins will
merge to some extent.  But I still see the development time platform as
being used by developers, whereas the runtime RCP platform is for use by
users.

---
This would also give us a division of responsibilites - runtime GUI vs
development and builder tools.

>> Absolutely.  The two should have a common extensible metamodel capable of
supporting both sets of requirements.  The runtime metamodel is immutable
and is built by reflection, the development-time metamodel is mutable and is
built by Eclipse's Java AST/Java DOM APIs.

>> It makes sense to me that Mike and Ted initially focus on the runtime RCP
(picking up on your experience there), and I'll focus on the common
meta-model and the development time tooling (picking up on my TogetherJ
experience).  I'm hoping I can get Bastian in on the development-time side
too (when the meta-model is stable) since he's interested in this area and
has written some Eclipse plugins.  And hopefully I'd like Eoin to work on
the back-end for the runtime (distribution, persistence etc) - Eoin? are you
there?!






From dan at haywood-associates.co.uk  Sat May  7 15:10:41 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sat, 7 May 2005 14:10:41 +0100
Subject: [Rcpviewer-contributors] Ted's screenshot - comment posted.
Message-ID: <LGEELLOAEBMLCOGIKLMKCEIODCAA.dan@haywood-associates.co.uk>

Ted,
posted a comment up on your screenshot on the wiki:
http://www.haywood-associates.co.uk/rcpviewer/comments/ted/What+I+think+the+
RCP+Viewer+could+look+like...#comment-ted/What%20I%20think%20the%20RCP%20Vie
wer%20could%20look%20like...-1

But to save you a click, and to cultivate discussion, let me also
copy-and-paste it here:

[comment]
I think there's some excellent ideas here - and some things that I like
somewhat less.  (But you were after feedback, weren't you?)

I think the Navigator view looks very nice.  Nice and clean.  Perhaps "List"
should be "Search" - in practical terms one wouldn't want to have a list of
every Customer.

Not nearly so sure about the main view.  While I think that it would be fine
to have individual views that hold either then left hand side tree or the
right-hand side properties, it doesn't (I'm afraid) cut it to me as having
anywhere near the level of sophistication for typical end-users.  I did some
street testing on the wife and in-laws - they agree I'm afraid.

What I am aiming for is something with the sophistication of Mike's RCP app
(eg http://www.incremental.pwp.blueyonder.co.uk/screenshots/marketing.png)
or Schoolclipse
(https://schoolclipse.dev.java.net/files/documents/2161/10318/Clip2.gif) or
Xinity (http://www.xinity.org/?About/Xinity%20BASE).  Ultimately I'd like
UIs with the sophistication of MS Outlook or equivalent.

So I'm sorry that the above sounds a little negative.  But let me finish on
a high note, which is the Actions tab.  I've been wondering where an
object's actions might live, but I think that the Actions tab is just
wonderful.  It also reminds me of the left-hand side bar in Windows'
Explorer, eg the Search bar or the Write CD bar.  One could have the
parameters for each such action be exposed  as one clicks on the action.
This also has the benefit that the actions are not modal, a definite plus
point.  So thanks - I'm really pleased with that idea.
[/comment]

Mike/Eoin - any thoughts?

Dan




From mike.evans at incremental.eu.com  Sat May  7 16:06:23 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sat, 07 May 2005 15:06:23 +0100
Subject: [Rcpviewer-contributors] Ted's screenshot - comment posted.
In-Reply-To: <LGEELLOAEBMLCOGIKLMKCEIODCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKCEIODCAA.dan@haywood-associates.co.uk>
Message-ID: <427CCB5F.1000605@incremental.eu.com>

Let's crawl before we can walk, let alone run.
Ted's screenshot is a very desirable interim target.
In fact my thoughts were that such a GUI would be the default based on 
annotations without any decorations added.  Methinks Dan is after much 
richer base GUI semantics than either Ted or I had in mind.

To be a little more concrete let's take for a simple example, ordering 
String fields in an editor.  Let's assume the metamodel provide the GUI 
with an 2D array of field names and values (I know, I know - it will be 
cleverer than that, but this is illustrative).

So options that occur to me are:
a) the sort order is built into the metamodel which sort the array from 
annotation values on the domain POJO's.
b) GUI checks for an ISortAdapter which if found first re-sorts the 
array as per its ( xml-based..?) configuration
c) the GUI is user-configurable presenting the user with a default list 
and then allowing items to be moved up and down - it then remembers this 
order for all future instances (this is sort of like the old Lotus Notes 
interface)
d) the GUI applies it own hard-coded rules

Lets look at grouping (either literally with an SWT Group or in an 
Expandable Composite), options are:
a) grouping is built into the domain model and it represents this by say 
passing a third array column with the name of the group to put the 
string into
b) the GUI looks for an xml-based IGroupAdapter which return the fields 
in smaller, named arrays, one for each group
c) The GUI is user-configurable as before
d) The GUI starts being clever - if the domain model presents Strings it 
just display them; if it presents a struct or javabean, it automatically 
groups them.

Of course all of these are variations on the same processing, I am just 
talking about where responsibility lies.  My problem is that I see the 
repsonsibility ending up in several places - a generally bad outcome. 
On the one hand some data is core to the domain model so should be there 
- the name of the field presented to the user for one.  However other 
stuff makes more sense in the GUI configuration - is a date field 
represented by a text box with validation or a calender widget?


Mike E.

PS : I am in full agreement with Dan regarding the Ted's 'Actions' tab - 
excellent idea.




Dan Haywood wrote:
> Ted,
> posted a comment up on your screenshot on the wiki:
> http://www.haywood-associates.co.uk/rcpviewer/comments/ted/What+I+think+the+
> RCP+Viewer+could+look+like...#comment-ted/What%20I%20think%20the%20RCP%20Vie
> wer%20could%20look%20like...-1
> 
> But to save you a click, and to cultivate discussion, let me also
> copy-and-paste it here:
> 
> [comment]
> I think there's some excellent ideas here - and some things that I like
> somewhat less.  (But you were after feedback, weren't you?)
> 
> I think the Navigator view looks very nice.  Nice and clean.  Perhaps "List"
> should be "Search" - in practical terms one wouldn't want to have a list of
> every Customer.
> 
> Not nearly so sure about the main view.  While I think that it would be fine
> to have individual views that hold either then left hand side tree or the
> right-hand side properties, it doesn't (I'm afraid) cut it to me as having
> anywhere near the level of sophistication for typical end-users.  I did some
> street testing on the wife and in-laws - they agree I'm afraid.
> 
> What I am aiming for is something with the sophistication of Mike's RCP app
> (eg http://www.incremental.pwp.blueyonder.co.uk/screenshots/marketing.png)
> or Schoolclipse
> (https://schoolclipse.dev.java.net/files/documents/2161/10318/Clip2.gif) or
> Xinity (http://www.xinity.org/?About/Xinity%20BASE).  Ultimately I'd like
> UIs with the sophistication of MS Outlook or equivalent.
> 
> So I'm sorry that the above sounds a little negative.  But let me finish on
> a high note, which is the Actions tab.  I've been wondering where an
> object's actions might live, but I think that the Actions tab is just
> wonderful.  It also reminds me of the left-hand side bar in Windows'
> Explorer, eg the Search bar or the Write CD bar.  One could have the
> parameters for each such action be exposed  as one clicks on the action.
> This also has the benefit that the actions are not modal, a definite plus
> point.  So thanks - I'm really pleased with that idea.
> [/comment]
> 
> Mike/Eoin - any thoughts?
> 
> Dan
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Sun May  8 08:55:01 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 8 May 2005 07:55:01 +0100
Subject: [Rcpviewer-contributors] Ted's screenshot - comment posted.
In-Reply-To: <427CCB5F.1000605@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKGEJADCAA.dan@haywood-associates.co.uk>

Hi Mike,
>> comments within.
Dan

-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
Sent: 07 May 2005 15:06
To: rcpviewer-contributors at lists.berlios.de
Subject: Re: [Rcpviewer-contributors] Ted's screenshot - comment posted.



Let's crawl before we can walk, let alone run.
Ted's screenshot is a very desirable interim target.

In fact my thoughts were that such a GUI would be the default based on
annotations without any decorations added.  Methinks Dan is after much
richer base GUI semantics than either Ted or I had in mind.

>> I'm very happy to start off with Ted's screenshot, and I'm not setting
any dates for when we might get to my vision :-)  But it's as well that you
guys know what I'm aspiring to.


---
To be a little more concrete let's take for a simple example, ordering
String fields in an editor ... the options that occur to me are:
a) the sort order is built into the metamodel which sort the array from
annotation values on the domain POJO's.
b) GUI checks for an ISortAdapter which if found first re-sorts the
array as per its ( xml-based..?) configuration
c) the GUI is user-configurable presenting the user with a default list
and then allowing items to be moved up and down - it then remembers this
order for all future instances (this is sort of like the old Lotus Notes
interface)
d) the GUI applies it own hard-coded rules

>> a good set of options.  The NO framework uses a fieldOrder() method that
returns a comma-separated list of field names.  I've never liked this much,
since it isn't type-safe.  But it is useful to have the information in the
POJO because the information is right there in the class that your editing.
In practice it is the domain programmer who deals with such relatively minor
GUI issues.

>> My preference is for (a) initially, with eventually (c) so that a user
can override (a) with their own preferences.  (b) really doesn't appeal for
the reasons I described in the previous post - it spreads out the
information and makes the domain programmer have to worry about XML-y
things.


---
Lets look at grouping (either literally with an SWT Group or in an
Expandable Composite), options are:
a) grouping is built into the domain model and it represents this by say
passing a third array column with the name of the group to put the
string into
b) the GUI looks for an xml-based IGroupAdapter which return the fields
in smaller, named arrays, one for each group
c) The GUI is user-configurable as before
d) The GUI starts being clever - if the domain model presents Strings it
just display them; if it presents a struct or javabean, it automatically
groups them.

>> This is a more interesting one.  In fact, it's wrong to think of grouping
as a GUI concern.  Q: what sort of things would get grouped?  A: things that
go together.  For example, the UI for a Customer object might have a "Name"
group might consist of (title/firstname/lastname/suffix).

>> But here's the point: apply Eric Evans' Ubiquitous Language principle.
If there's such a thing as a "Name", then it should be in the domain model.
So we should say that the Customer class has an immutable composition
("aggregation by value") 1:1 relationship with Name.  This domain
information is all that the UI component needs.  We can then have a
collapsible group in the Customer's form that when collapsed shows the
Name's toString ("Mr. John Daniels") and when opened up shows the
constituent fields and allows them to be edited.  The same use of
relationships for a 1:M relationship should allow Order/Order-Details to be
shown on a single form.

>> These are some of the lessons we've learnt from the Irish DSFA gig.
Because the NO framework's viewer isn't really all that sophisticated, we've
had to work harder at finding a way to express the information within the
domain model.  The Name class I quoted is one that from the DSFA.  Another
example is DateOfBirth (the date, a date verified flag, and a date
verification source lookup).  Finding ways to represent this info within the
domain object means that one can also start to put "know-how-to"
responsibilities into these objects (eg Name#change, or
DateOfBirth#verifyUsingSource).  It also - I would argue - makes the domain
model better than it otherwise would have been: UI grouping really is the
sign that analysis has been mislocated at the UI layer rather than the
domain layer.


---
Of course all of these are variations on the same processing, I am just
talking about where responsibility lies.  My problem is that I see the
repsonsibility ending up in several places - a generally bad outcome.
On the one hand some data is core to the domain model so should be there
- the name of the field presented to the user for one.  However other
stuff makes more sense in the GUI configuration - is a date field
represented by a text box with validation or a calender widget?

>> I would say that every date field should be rendered the same way.  If
there's a reason why a date in one class should be rendered one way, and a
date in another class should be rendered another, then there is probably
some difference in domain semantics.  Find a way to capture that information
in the domain model.

>> To make this concrete, suppose a regular Date is rendered as a text box
and we choose this as our default rendering.  However, an Appointment's date
(which the users conceptually think as occuring on a Calendar) should be
rendered using a drop-down calendar widget.  In this case, I would suggest
creating a value object subclass of Date called something like CalendarDate,
and have my Appointment use this.  (This is probably so common that
rcpviewer should ship a library of these values with defined semantics for
domain programmers to choose from).

>> As ever, hope some of the above makes sense....





From dan at haywood-associates.co.uk  Sun May  8 12:27:30 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 8 May 2005 11:27:30 +0100
Subject: [Rcpviewer-contributors] Field ordering (was Ted's screenshot - comment posted.)
In-Reply-To: <427CCB5F.1000605@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKOEJBDCAA.dan@haywood-associates.co.uk>

Just spend a couple of hours implementing field ordering using annotations
(see Mike's option (a) below).

Up in SVN, or you can see the test case here:
http://svn.berlios.de/viewcvs/rcpviewer/trunk/workspace/emf-builder/test/de/
berlios/rcpviewer/progmodel/extended/TestPositionedAt.java?view=markup.

I think it's elegant - but then, I wrote it...  thoughts please!

Dan



-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
Sent: 07 May 2005 15:06
To: rcpviewer-contributors at lists.berlios.de
Subject: Re: [Rcpviewer-contributors] Ted's screenshot - comment posted.


Let's crawl before we can walk, let alone run.
Ted's screenshot is a very desirable interim target.
In fact my thoughts were that such a GUI would be the default based on
annotations without any decorations added.  Methinks Dan is after much
richer base GUI semantics than either Ted or I had in mind.

To be a little more concrete let's take for a simple example, ordering
String fields in an editor.  Let's assume the metamodel provide the GUI
with an 2D array of field names and values (I know, I know - it will be
cleverer than that, but this is illustrative).

So options that occur to me are:
a) the sort order is built into the metamodel which sort the array from
annotation values on the domain POJO's.
b) GUI checks for an ISortAdapter which if found first re-sorts the
array as per its ( xml-based..?) configuration
c) the GUI is user-configurable presenting the user with a default list
and then allowing items to be moved up and down - it then remembers this
order for all future instances (this is sort of like the old Lotus Notes
interface)
d) the GUI applies it own hard-coded rules

Lets look at grouping (either literally with an SWT Group or in an
Expandable Composite), options are:
a) grouping is built into the domain model and it represents this by say
passing a third array column with the name of the group to put the
string into
b) the GUI looks for an xml-based IGroupAdapter which return the fields
in smaller, named arrays, one for each group
c) The GUI is user-configurable as before
d) The GUI starts being clever - if the domain model presents Strings it
just display them; if it presents a struct or javabean, it automatically
groups them.

Of course all of these are variations on the same processing, I am just
talking about where responsibility lies.  My problem is that I see the
repsonsibility ending up in several places - a generally bad outcome.
On the one hand some data is core to the domain model so should be there
- the name of the field presented to the user for one.  However other
stuff makes more sense in the GUI configuration - is a date field
represented by a text box with validation or a calender widget?


Mike E.

PS : I am in full agreement with Dan regarding the Ted's 'Actions' tab -
excellent idea.




Dan Haywood wrote:
> Ted,
> posted a comment up on your screenshot on the wiki:
>
http://www.haywood-associates.co.uk/rcpviewer/comments/ted/What+I+think+the+
>
RCP+Viewer+could+look+like...#comment-ted/What%20I%20think%20the%20RCP%20Vie
> wer%20could%20look%20like...-1
>
> But to save you a click, and to cultivate discussion, let me also
> copy-and-paste it here:
>
> [comment]
> I think there's some excellent ideas here - and some things that I like
> somewhat less.  (But you were after feedback, weren't you?)
>
> I think the Navigator view looks very nice.  Nice and clean.  Perhaps
"List"
> should be "Search" - in practical terms one wouldn't want to have a list
of
> every Customer.
>
> Not nearly so sure about the main view.  While I think that it would be
fine
> to have individual views that hold either then left hand side tree or the
> right-hand side properties, it doesn't (I'm afraid) cut it to me as having
> anywhere near the level of sophistication for typical end-users.  I did
some
> street testing on the wife and in-laws - they agree I'm afraid.
>
> What I am aiming for is something with the sophistication of Mike's RCP
app
> (eg http://www.incremental.pwp.blueyonder.co.uk/screenshots/marketing.png)
> or Schoolclipse
> (https://schoolclipse.dev.java.net/files/documents/2161/10318/Clip2.gif)
or
> Xinity (http://www.xinity.org/?About/Xinity%20BASE).  Ultimately I'd like
> UIs with the sophistication of MS Outlook or equivalent.
>
> So I'm sorry that the above sounds a little negative.  But let me finish
on
> a high note, which is the Actions tab.  I've been wondering where an
> object's actions might live, but I think that the Actions tab is just
> wonderful.  It also reminds me of the left-hand side bar in Windows'
> Explorer, eg the Search bar or the Write CD bar.  One could have the
> parameters for each such action be exposed  as one clicks on the action.
> This also has the benefit that the actions are not modal, a definite plus
> point.  So thanks - I'm really pleased with that idea.
> [/comment]
>
> Mike/Eoin - any thoughts?
>
> Dan
>
>
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>
>

--
Mike Evans
Incremental Ltd.
www.incremental.eu.com

_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From dan at haywood-associates.co.uk  Sun May  8 14:13:51 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 8 May 2005 13:13:51 +0100
Subject: [Rcpviewer-contributors] Introducing Chris Nelson & Bastian Bergerhoff...
Message-ID: <LGEELLOAEBMLCOGIKLMKIEJDDCAA.dan@haywood-associates.co.uk>

Chaps,

I'd like to introduce you to Chris and Bastian.


1. Chris Nelson

Chris Nelson is the project lead for Trails, a Java/Tapestry web application
framework inspired by both Naked Objects and Ruby on Rails.  I noticed
Trails from a posting up on theserverside, so dug around the web and located
Chris' email.

I've been raising with Chris the idea of possibly collaborating or
integrating the projects at some level, and Chris is in agreement that this
might well be worth doing.  The caveat is that we both want to develop our
respective code bases further, but a tie-up at some later stage could well
be worthwhile, allowing a single application to be deployed either via RCP
or via the web.  There are three possible levels of collaboration that I've
identified:

* use a common core programming model (progmodel/standard and
progmodel/extended), or
* use common core programming model + have rcpviewer provide common
development-time tooling, or
* use common core programming model + common tooling + a common
implementation of our respective meta-models and perhaps more.

Do check out Trails' website and Chris's rather cool demo of his software in
action.  It's at http://trails.dev.java.net.


2. Bastian Bergerhoff

Bastian Bergerhoff got in touch with Rob Matthews of Naked Objects Group,
letting him know about a rather neat plugin he'd developed allowing Naked
Objects runtime to be run within Eclipse.  And Rob forwarded him onto me.

Bastians's plugin already supports some level hot swap coding, so you can
make changes to your POJO and the application updates in real-time.  His
vision is to extend this significantly to be able to emulate what Smalltalk
can do in this area.  He is also interested in working on other
development-time tooling (wizards etc) - very much the same space as the
development/tooling side of rcpviewer.


Both Chris and Bastian are now on the wiki (you can see a screenshot of
Bastian's work up there) and subscribe to this mailing list.  I haven't for
now added Chris and Bastian to Subversion.  Chris after all is busy working
on Trails, and Bastian has told me he's happy just to monitor what we're up
to for now but look towards helping on the development tooling side when the
metamodel matures somewhat.  Chris/Bastian: let me know if/when you'd like
deeper involvement.

----
Chris, Bastian: let me briefly introduce you to the other contributors.

Mike Evans is one of our two RCP experts.  I contacted Mike after seeing his
work in an RCP presentation, and asked him if he'd be interested in helping
out.  Mike hadn't heard of NO but liked the idea - I was obviously
persuasive enough since here he is!

Ted Stockwell is the other of our two RCP experts.  This time, Ted contacted
me after rather fortuitously doing some googling and discovering my wiki.
(If he'd googled three days earlier he would have found nothing).

Eoin Woods is one of the best software guys I know, having worked with him
at Sybase.  Although he's now a consultant like me, he has also done plenty
of system engineering; for example he was project lead for implementing
Sybase's clustering on NT server.  He'll tell you (a) how hairy and (b) how
many lines of code that was.  Eoin hasn't been able to contribute yet
because he's been finishing up his book on Software Architecture (just
published last week), but says he's looking forward to working on
persistence/distribution and AOP.

Oh, and there's me.  I think I can justifiably say I have the deepest
knowledge of Naked Objects having been working on it for the last few years
and intensively the last 12 months.  I'm also ok at coding.  So, I'm the
chap with the vision who's hoping he can keep you guys on board to help me
pull it off...

++++
One last thing: there's a risk of having too large a team too early - it's a
risk I'm well aware of.  I'm hoping that as we start to get some
contributions in then the project will divide up into reasonably well
defined areas and everyone can contribute in the area that's most of
interest to them.  Until then, though, here's how I see it:
* Mike and Ted are the RCP runtime experts
* Eoin is the runtime architecture expert
* I'm most interested in owning the metamodel + the development-time
tooling.
* Should Bastian join us, I'd like him to work with me on the tooling.
* And if Chris and I decide to align Trails and RcpViewer, then my ownership
of the metamodel should help see that through.

But let me know if I'm saying things you're unhappy with - as I say I want
to keep everyone on board to make this happen.




From emorning at yahoo.com  Sun May  8 14:47:12 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 08 May 2005 07:47:12 -0500
Subject: [Rcpviewer-contributors] Ted's screenshot - comment posted.
In-Reply-To: <LGEELLOAEBMLCOGIKLMKCEIODCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKCEIODCAA.dan@haywood-associates.co.uk>
Message-ID: <427E0A50.9060805@yahoo.com>

Dan Haywood wrote:

>I think there's some excellent ideas here - and some things that I like
>somewhat less.  (But you were after feedback, weren't you?)
>  
>

Yes I was. 
It occurred to me that it wasn't a good idea to do all this coding 
before we had any discussion about where things were going.
I also posted a message in the EMF newsgroup asking for comments about 
the usability of the EMF UI but got no responses.
I get the definite impression that nobody is using EMF for end-user apps 
or has even thought about it.  In this regard NO seems at the very 
leading edge of UI development. 

>I think the Navigator view looks very nice.  Nice and clean.  Perhaps "List"
>should be "Search" - in practical terms one wouldn't want to have a list of
>every Customer.
>  
>
FYI - the contents of the Navigator and Actions views were cut and 
pasted from QuickBooks Simple Start Edition.
There are several UI ideas in this application that I like a lot.

I agree with you about the 'List' vs 'Search' thing.  Although with 
SWT's 'Virtual' table and a peristence layer that can do lazy loading 
it's practical to display a list of all customers.


>Not nearly so sure about the main view.  While I think that it would be fine
>to have individual views that hold either then left hand side tree or the
>right-hand side properties, it doesn't (I'm afraid) cut it to me as having
>anywhere near the level of sophistication for typical end-users.  I did some
>street testing on the wife and in-laws - they agree I'm afraid.
>
>What I am aiming for is something with the sophistication of Mike's RCP app
>(eg http://www.incremental.pwp.blueyonder.co.uk/screenshots/marketing.png)
>or Schoolclipse
>(https://schoolclipse.dev.java.net/files/documents/2161/10318/Clip2.gif) or
>Xinity (http://www.xinity.org/?About/Xinity%20BASE).  Ultimately I'd like
>UIs with the sophistication of MS Outlook or equivalent.
>  
>
I like Mike's screenshot of the Customer view a lot.
Ultimately I would like the Properties pane in my application to look 
like that.

However, a single view like Mike's customer view would not work for many 
of the objects our application displays (my guess is that the Customer 
view doesn't work well for all of the objects that Epic displays either).
Here's why...consider an order that has hundred's or thousands of line 
items on it.  In terms of Mike's Customer view, consider how that view 
would work if the Customer has a thousand Contacts. 
When first displayed you could either...

 a) have the contacts list expanded, in which case the uses won't be see 
the below the contacts list.  Not good, because users are like newborn 
babies, if they can't see then it doesn't exist!, or

b) have the contacts list collapsed, in which case the properties below 
the list disappear.  Again not good, because of my rule that users are 
like newborn babies, if they can't see then it doesn't exist. 
In any case, a really long list of items will make it hard to navigate 
through the view.

So, to solve these problems I think an outline pane is neccessary.  The 
outline  view affords  the user with 'context' about their current 
location within a large object tree and it also provides for easier 
navigation within the object.
The outline pane could be optional.

-----------------

Also, the Eclipse IDE put the outline in a view that is separate from 
the editors.  I chose to put the outline inside the editor in a separate 
pane inside the editor.  I did this because I figure that not all 
editors that would be displayed in an RCPViewer application would be 
instances of an RCPViewer.  A typical application will have other 
editors that display HTML pages,  or screenshot of incoming Faxs, etc, 
that is, objects that do not have an outline or for which for an outline 
view cannot be constructed.
I didn't want to waste the screen real estate an an outline view that 
wouldn't be used all the time.

Also, I thought it might make it clearer to the user that the outline 
pane is displaying an outlien of the object that they're looking at if 
the outline was contained within the same editor as the properties view.


>So I'm sorry that the above sounds a little negative.  
>

Not a problem.  I've been a developer since 1988.  I have developed an 
incredibly thick skin.
I'm sure we've all had to sit in meeting's where someone spends a hour 
questioning the usability of your application because the color scheme 
is all wrong ;-).



ted


From emorning at yahoo.com  Sun May  8 15:05:59 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 08 May 2005 08:05:59 -0500
Subject: [Rcpviewer-contributors] Ted's screenshot - comment posted.
In-Reply-To: <427CCB5F.1000605@incremental.eu.com>
References: <LGEELLOAEBMLCOGIKLMKCEIODCAA.dan@haywood-associates.co.uk> <427CCB5F.1000605@incremental.eu.com>
Message-ID: <427E0EB7.3070909@yahoo.com>

Mike Evans wrote:

> In fact my thoughts were that such a GUI would be the default based on 
> annotations without any decorations added.  Methinks Dan is after much 
> richer base GUI semantics than either Ted or I had in mind.

That's correct, I'm trying to produce an example application without 
adding ANY, or a little as possible, extra metadata or decorations since 
I know that there will be MANY discussions to come about that stuff.
So, consider this screenshot to be what an RCPViewer application would 
be like if a developer displayed a domain object with only the bare 
minimum amount of required metadata.

>
> To be a little more concrete let's take for a simple example, ordering 
> String fields in an editor.  Let's assume the metamodel provide the 
> GUI with an 2D array of field names and values (I know, I know - it 
> will be cleverer than that, but this is illustrative).
>
> So options that occur to me are:
> a) the sort order is built into the metamodel which sort the array 
> from annotation values on the domain POJO's.
> b) GUI checks for an ISortAdapter which if found first re-sorts the 
> array as per its ( xml-based..?) configuration
> c) the GUI is user-configurable presenting the user with a default 
> list and then allowing items to be moved up and down - it then 
> remembers this order for all future instances (this is sort of like 
> the old Lotus Notes interface)
> d) the GUI applies it own hard-coded rules
>
> Lets look at grouping (either literally with an SWT Group or in an 
> Expandable Composite), options are:
> a) grouping is built into the domain model and it represents this by 
> say passing a third array column with the name of the group to put the 
> string into
> b) the GUI looks for an xml-based IGroupAdapter which return the 
> fields in smaller, named arrays, one for each group
> c) The GUI is user-configurable as before
> d) The GUI starts being clever - if the domain model presents Strings 
> it just display them; if it presents a struct or javabean, it 
> automatically groups them.
>
> Of course all of these are variations on the same processing, I am 
> just talking about where responsibility lies.  My problem is that I 
> see the repsonsibility ending up in several places - a generally bad 
> outcome. On the one hand some data is core to the domain model so 
> should be there - the name of the field presented to the user for 
> one.  However other stuff makes more sense in the GUI configuration - 
> is a date field represented by a text box with validation or a 
> calender widget?
>

Actually, I would lean towards putting most all extra data item required 
to construct the GUI in the GUI metadata layer. 
Consider for instance your single example of data that is core to the 
domain model, the name of the field presented to the user.  I would use 
the name of the field from the domain model as a default value that 
could be overwritten in the metadata layer since the label might need to 
be internationalized (or even customized per client, for instance, we 
have some clients that refer to customer orders as 'Orders' while other 
clients prefer to refer to them as 'Projects').

Actually, I consider the ECore API to provide a definition of what is 
'core' to the domain model.  If it's available via the ECore API then 
it's in the domain model otherwise everything else is in the GUI metamodel.



ted


From mike.evans at incremental.eu.com  Sun May  8 15:26:50 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sun, 08 May 2005 14:26:50 +0100
Subject: [Rcpviewer-contributors] SVN - further mess
Message-ID: <427E139A.3080609@incremental.eu.com>

Dan,

Tried to check into SVN but cannot seem to put stuff into 
sub-directories - keep getting errors from Subclipse.
Further mess in the root ('Test prokect' 'mikespikeXXX').
I'll install Tortoise SVN tomorroe and try to sort it all out.

Mike E.

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From emorning at yahoo.com  Sun May  8 15:59:43 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 08 May 2005 08:59:43 -0500
Subject: [Rcpviewer-contributors] Ted's screenshot - comment posted.
In-Reply-To: <LGEELLOAEBMLCOGIKLMKGEJADCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKGEJADCAA.dan@haywood-associates.co.uk>
Message-ID: <427E1B4F.8070004@yahoo.com>

Dan Haywood wrote:


>---
>Lets look at grouping (either literally with an SWT Group or in an
>Expandable Composite), options are:
>a) grouping is built into the domain model and it represents this by say
>passing a third array column with the name of the group to put the
>string into
>b) the GUI looks for an xml-based IGroupAdapter which return the fields
>in smaller, named arrays, one for each group
>c) The GUI is user-configurable as before
>d) The GUI starts being clever - if the domain model presents Strings it
>just display them; if it presents a struct or javabean, it automatically
>groups them.
>
>  
>
>>>This is a more interesting one.  In fact, it's wrong to think of grouping
>>>      
>>>
>as a GUI concern.  Q: what sort of things would get grouped?  A: things that
>go together.  For example, the UI for a Customer object might have a "Name"
>group might consist of (title/firstname/lastname/suffix).
>
>  
>
>>>But here's the point: apply Eric Evans' Ubiquitous Language principle.
>>>      
>>>
>If there's such a thing as a "Name", then it should be in the domain model.
>So we should say that the Customer class has an immutable composition
>("aggregation by value") 1:1 relationship with Name.  This domain
>information is all that the UI component needs.  We can then have a
>collapsible group in the Customer's form that when collapsed shows the
>Name's toString ("Mr. John Daniels") and when opened up shows the
>constituent fields and allows them to be edited.  The same use of
>relationships for a 1:M relationship should allow Order/Order-Details to be
>shown on a single form.
>
>  
>
>>>These are some of the lessons we've learnt from the Irish DSFA gig.
>>>      
>>>
>Because the NO framework's viewer isn't really all that sophisticated, we've
>had to work harder at finding a way to express the information within the
>domain model.  The Name class I quoted is one that from the DSFA.  Another
>example is DateOfBirth (the date, a date verified flag, and a date
>verification source lookup).  Finding ways to represent this info within the
>domain object means that one can also start to put "know-how-to"
>responsibilities into these objects (eg Name#change, or
>DateOfBirth#verifyUsingSource).  It also - I would argue - makes the domain
>model better than it otherwise would have been: UI grouping really is the
>sign that analysis has been mislocated at the UI layer rather than the
>domain layer.
>
>
>---
>Of course all of these are variations on the same processing, I am just
>talking about where responsibility lies.  My problem is that I see the
>repsonsibility ending up in several places - a generally bad outcome.
>On the one hand some data is core to the domain model so should be there
>- the name of the field presented to the user for one.  However other
>stuff makes more sense in the GUI configuration - is a date field
>represented by a text box with validation or a calender widget?
>
>  
>
>>>I would say that every date field should be rendered the same way.  If
>>>      
>>>
>there's a reason why a date in one class should be rendered one way, and a
>date in another class should be rendered another, then there is probably
>some difference in domain semantics.  Find a way to capture that information
>in the domain model.
>
>  
>
>>>To make this concrete, suppose a regular Date is rendered as a text box
>>>      
>>>
>and we choose this as our default rendering.  However, an Appointment's date
>(which the users conceptually think as occuring on a Calendar) should be
>rendered using a drop-down calendar widget.  In this case, I would suggest
>creating a value object subclass of Date called something like CalendarDate,
>and have my Appointment use this.  (This is probably so common that
>rcpviewer should ship a library of these values with defined semantics for
>domain programmers to choose from).
>
>  
>
>>>As ever, hope some of the above makes sense....
>>>      
>>>
>
>  
>

My initial response to Dan's comments was gonna be that requiring all 
this stuff to be in the domain model was a problem because it excluded 
the use of legacy domains that were not 'properly' designed.
For instance, one of my grand visions is to use RCPViewer to create a UI 
for UBL (Universal Business Language, 
http://www.oasis-open.org/committees/ubl/charter.php).  However, since 
UBL was not developed with NO sensibilities in mind, it might not be 
suitable for use with an NO GUI.

So, my next thought was that I could create a customized domain model on 
top of UBL that would group attributes that needed grouping, provide 
field orders, create data type subclasses where needed, add methods, etc.
I buy into Dan's argument in favor of the 'Ubiquitous Language 
principle' so creating a new domain model on top of any existing legacy 
domain model might not be a bad idea because the resulting domain model 
could be easier for developers to understand and reuse.

Then it occurred to me that there is really no difference between...

 a) creating a new domain model on top of a legacy domain model and 
putting everything that the RCPViewer needs to construct a GUI into the 
domain model, and

b) creating GUI metadata model putting everything that the RCPViewer 
needs to construct a GUI for a legacy domain model into the GUI metamodel

 From my perspective, options a) and b) are the same.  If I think of the 
GUI metamodel as just creating a new domain model on top of a legacy 
model and appropriately regrouping, sorting, and changing the data types 
of attributes, etc. then suddenly the two approaches appear to be the same.

The only thing that I can think of that absolutely needs to be external 
from the domain model into some XML-y type of configuration are labels.

---------------------------------

Before reading this post I responded to one Mike's posts by saying that 
almost all GUI-related data should be in the GUI metadata layer.  Now 
I'm gonna say that almost all GUI-related data should be in the domain 
model.  And I'm correct both times!
The difference is that from now on I will think of the GUI metadata 
layer as a 'virtual domain model' built on top of a legacy domain 
model.  If a domain model already provides all the methods and 
attributes required to work with RCPViewer then very little or no extra 
GUI metadata will be required.  A legacy domain model will require more 
GUI metadata to be provided.



Does this approach make sense to you guys?








From emorning at yahoo.com  Sun May  8 16:09:24 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 08 May 2005 09:09:24 -0500
Subject: [Rcpviewer-contributors] Ted's screenshot - comment posted.
In-Reply-To: <427CCB5F.1000605@incremental.eu.com>
References: <LGEELLOAEBMLCOGIKLMKCEIODCAA.dan@haywood-associates.co.uk> <427CCB5F.1000605@incremental.eu.com>
Message-ID: <427E1D94.4090608@yahoo.com>

Mike Evans wrote:

> In fact my thoughts were that such a GUI would be the default based on 
> annotations without any decorations added.  Methinks Dan is after much 
> richer base GUI semantics than either Ted or I had in mind.

That's correct, I'm trying to produce an example application without
adding ANY, or a little as possible, extra metadata or decorations since
I know that there will be MANY discussions to come about that stuff.
So, consider this screenshot to be what an RCPViewer application would
be like if a developer displayed a domain object with only the bare
minimum amount of required metadata.

>
> To be a little more concrete let's take for a simple example, ordering 
> String fields in an editor.  Let's assume the metamodel provide the 
> GUI with an 2D array of field names and values (I know, I know - it 
> will be cleverer than that, but this is illustrative).
>
> So options that occur to me are:
> a) the sort order is built into the metamodel which sort the array 
> from annotation values on the domain POJO's.
> b) GUI checks for an ISortAdapter which if found first re-sorts the 
> array as per its ( xml-based..?) configuration
> c) the GUI is user-configurable presenting the user with a default 
> list and then allowing items to be moved up and down - it then 
> remembers this order for all future instances (this is sort of like 
> the old Lotus Notes interface)
> d) the GUI applies it own hard-coded rules
>
> Lets look at grouping (either literally with an SWT Group or in an 
> Expandable Composite), options are:
> a) grouping is built into the domain model and it represents this by 
> say passing a third array column with the name of the group to put the 
> string into
> b) the GUI looks for an xml-based IGroupAdapter which return the 
> fields in smaller, named arrays, one for each group
> c) The GUI is user-configurable as before
> d) The GUI starts being clever - if the domain model presents Strings 
> it just display them; if it presents a struct or javabean, it 
> automatically groups them.
>
> Of course all of these are variations on the same processing, I am 
> just talking about where responsibility lies.  My problem is that I 
> see the repsonsibility ending up in several places - a generally bad 
> outcome. On the one hand some data is core to the domain model so 
> should be there - the name of the field presented to the user for 
> one.  However other stuff makes more sense in the GUI configuration - 
> is a date field represented by a text box with validation or a 
> calender widget?
>

Actually, I would lean towards putting most all extra data item required
to construct the GUI in the GUI metadata layer.
Consider for instance your single example of data that is core to the
domain model, the name of the field presented to the user.  I would use
the name of the field from the domain model as a default value that
could be overwritten in the metadata layer since the label might need to
be internationalized (or even customized per client, for instance, we
have some clients that refer to customer orders as 'Orders' while other
clients prefer to refer to them as 'Projects').

Actually, I consider the ECore API to provide a definition of what is
'core' to the domain model.  If it's available via the ECore API then
it's in the domain model otherwise everything else is in the GUI metamodel.



ted



From dan at haywood-associates.co.uk  Sun May  8 16:25:39 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 8 May 2005 15:25:39 +0100
Subject: [Rcpviewer-contributors] GUI and virtual domain models (was Ted's screenshot - comment posted.)
In-Reply-To: <427E1B4F.8070004@yahoo.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKEEJFDCAA.dan@haywood-associates.co.uk>

Ted wrote:

Before reading this post I responded to one Mike's posts by saying that
almost all GUI-related data should be in the GUI metadata layer.  Now
I'm gonna say that almost all GUI-related data should be in the domain
model.  And I'm correct both times!

The difference is that from now on I will think of the GUI metadata
layer as a 'virtual domain model' built on top of a legacy domain
model.  If a domain model already provides all the methods and
attributes required to work with RCPViewer then very little or no extra
GUI metadata will be required.  A legacy domain model will require more
GUI metadata to be provided.

Does this approach make sense to you guys?


>> Music to my ears!  This is part of what I was getting on the wiki page:
"http://www.haywood-associates.co.uk/rcpviewer/space/concepts/virtual-domain
-objects".

>> Actually, I don't think that the GUI metadata and this virtual domain
model are quite the same.  Really, the virtual domain model is really just
the domain model if it was done correctly.  Now while that means that is
going to be a lot more information in it than your usual legacy model, there
will still be some aspects - such as field ordering or ImageDescriptors -
which can never be properly considered part of the domain model.

>> At any rate, in emf-builder progmodel/standard corresponds to the
representing a domain model; progmodel/extended and progmodel/rcpviewer
correspond to additional GUI metadata.  And I've been coding it so that the
latter two only provide their data through adapters.  (This is in line with
your other posting that the core domain model more-or-less is only what EMF
gives us out of the box).

>> But I think I'm just quibbling here - the important point is that we
(seem to) agree that a decent domain model has a lot more information in it
than one might normal assume.

---
Back in 2003, Richard, Rob and I - along with an academic called Rick
Mugridge (who has been pointing his postgrads at NO for a while now) -
workshopped the different layers that make up an NO application.  Rewriting
that in our current terminology we came up with:

* core domain object
* virtual domain object (aggregated or otherwise synthesised from the
underlying possibly anaemic domain objects)
* state management -  changing whether stuff can been viewed / interacted
with according to its state
* security authorisation - a filtering of attributes and actions with
respect to a particular individual's roles

There's different ways to solve the state management layer.  The NO
framework has a way in which the domain programmer can say things like:
field.unusableInStates({PENDING, IN_QA});
action.usableOnlyInState(AUTHORISED);
Again, I think that we can represent this in our programming model with
annotations.

And the perspective layer can be done entirely outside of the domain layer.

Something else for you guys to mull over (it's a bit off topic, but it's
worth thinking through).  I've made the observation before now that Naked
Objects gives us "subtractive" programming.  That is, a field or an action
will appear unless you have a constraint (either programmatic in the domain
layer, or state-related, or role-related) to say that it shouldn't.  Compare
this to the usual "additive" programming, whereby a field or action only
appears if you explicitly program it in.  Also compare the subtractive
approach to UML whereby a domain model is assumed to have all degrees of
freedom until one starts to constrain it using OCL.  All this stuff again
works to keep the domain model "honest".



-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
stockwell
Sent: 08 May 2005 15:00
To: rcpviewer-contributors at lists.berlios.de
Subject: Re: [Rcpviewer-contributors] Ted's screenshot - comment posted.


Dan Haywood wrote:


>---
>Lets look at grouping (either literally with an SWT Group or in an
>Expandable Composite), options are:
>a) grouping is built into the domain model and it represents this by say
>passing a third array column with the name of the group to put the
>string into
>b) the GUI looks for an xml-based IGroupAdapter which return the fields
>in smaller, named arrays, one for each group
>c) The GUI is user-configurable as before
>d) The GUI starts being clever - if the domain model presents Strings it
>just display them; if it presents a struct or javabean, it automatically
>groups them.
>
>
>
>>>This is a more interesting one.  In fact, it's wrong to think of grouping
>>>
>>>
>as a GUI concern.  Q: what sort of things would get grouped?  A: things
that
>go together.  For example, the UI for a Customer object might have a "Name"
>group might consist of (title/firstname/lastname/suffix).
>
>
>
>>>But here's the point: apply Eric Evans' Ubiquitous Language principle.
>>>
>>>
>If there's such a thing as a "Name", then it should be in the domain model.
>So we should say that the Customer class has an immutable composition
>("aggregation by value") 1:1 relationship with Name.  This domain
>information is all that the UI component needs.  We can then have a
>collapsible group in the Customer's form that when collapsed shows the
>Name's toString ("Mr. John Daniels") and when opened up shows the
>constituent fields and allows them to be edited.  The same use of
>relationships for a 1:M relationship should allow Order/Order-Details to be
>shown on a single form.
>
>
>
>>>These are some of the lessons we've learnt from the Irish DSFA gig.
>>>
>>>
>Because the NO framework's viewer isn't really all that sophisticated,
we've
>had to work harder at finding a way to express the information within the
>domain model.  The Name class I quoted is one that from the DSFA.  Another
>example is DateOfBirth (the date, a date verified flag, and a date
>verification source lookup).  Finding ways to represent this info within
the
>domain object means that one can also start to put "know-how-to"
>responsibilities into these objects (eg Name#change, or
>DateOfBirth#verifyUsingSource).  It also - I would argue - makes the domain
>model better than it otherwise would have been: UI grouping really is the
>sign that analysis has been mislocated at the UI layer rather than the
>domain layer.
>
>
>---
>Of course all of these are variations on the same processing, I am just
>talking about where responsibility lies.  My problem is that I see the
>repsonsibility ending up in several places - a generally bad outcome.
>On the one hand some data is core to the domain model so should be there
>- the name of the field presented to the user for one.  However other
>stuff makes more sense in the GUI configuration - is a date field
>represented by a text box with validation or a calender widget?
>
>
>
>>>I would say that every date field should be rendered the same way.  If
>>>
>>>
>there's a reason why a date in one class should be rendered one way, and a
>date in another class should be rendered another, then there is probably
>some difference in domain semantics.  Find a way to capture that
information
>in the domain model.
>
>
>
>>>To make this concrete, suppose a regular Date is rendered as a text box
>>>
>>>
>and we choose this as our default rendering.  However, an Appointment's
date
>(which the users conceptually think as occuring on a Calendar) should be
>rendered using a drop-down calendar widget.  In this case, I would suggest
>creating a value object subclass of Date called something like
CalendarDate,
>and have my Appointment use this.  (This is probably so common that
>rcpviewer should ship a library of these values with defined semantics for
>domain programmers to choose from).
>
>
>
>>>As ever, hope some of the above makes sense....
>>>
>>>
>
>
>

My initial response to Dan's comments was gonna be that requiring all
this stuff to be in the domain model was a problem because it excluded
the use of legacy domains that were not 'properly' designed.
For instance, one of my grand visions is to use RCPViewer to create a UI
for UBL (Universal Business Language,
http://www.oasis-open.org/committees/ubl/charter.php).  However, since
UBL was not developed with NO sensibilities in mind, it might not be
suitable for use with an NO GUI.

So, my next thought was that I could create a customized domain model on
top of UBL that would group attributes that needed grouping, provide
field orders, create data type subclasses where needed, add methods, etc.
I buy into Dan's argument in favor of the 'Ubiquitous Language
principle' so creating a new domain model on top of any existing legacy
domain model might not be a bad idea because the resulting domain model
could be easier for developers to understand and reuse.

Then it occurred to me that there is really no difference between...

 a) creating a new domain model on top of a legacy domain model and
putting everything that the RCPViewer needs to construct a GUI into the
domain model, and

b) creating GUI metadata model putting everything that the RCPViewer
needs to construct a GUI for a legacy domain model into the GUI metamodel

 From my perspective, options a) and b) are the same.  If I think of the
GUI metamodel as just creating a new domain model on top of a legacy
model and appropriately regrouping, sorting, and changing the data types
of attributes, etc. then suddenly the two approaches appear to be the same.

The only thing that I can think of that absolutely needs to be external
from the domain model into some XML-y type of configuration are labels.

---------------------------------

Before reading this post I responded to one Mike's posts by saying that
almost all GUI-related data should be in the GUI metadata layer.  Now
I'm gonna say that almost all GUI-related data should be in the domain
model.  And I'm correct both times!
The difference is that from now on I will think of the GUI metadata
layer as a 'virtual domain model' built on top of a legacy domain
model.  If a domain model already provides all the methods and
attributes required to work with RCPViewer then very little or no extra
GUI metadata will be required.  A legacy domain model will require more
GUI metadata to be provided.



Does this approach make sense to you guys?






_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From dan at haywood-associates.co.uk  Sun May  8 17:12:18 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 8 May 2005 16:12:18 +0100
Subject: [Rcpviewer-contributors] Ted's screenshot - comment posted.
In-Reply-To: <427E0A50.9060805@yahoo.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKAEJGDCAA.dan@haywood-associates.co.uk>

Ted
>> within.
Dan


-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
stockwell
Sent: 08 May 2005 13:47
To: rcpviewer-contributors at lists.berlios.de
Subject: Re: [Rcpviewer-contributors] Ted's screenshot - comment posted.


I like Mike's screenshot of the Customer view a lot.
Ultimately I would like the Properties pane in my application to look
like that.

However, a single view like Mike's customer view would not work for many
of the objects our application displays (my guess is that the Customer
view doesn't work well for all of the objects that Epic displays either).
Here's why...consider an order that has hundred's or thousands of line
items on it.  In terms of Mike's Customer view, consider how that view
would work if the Customer has a thousand Contacts ...

>> That's true enough, but then again just because there is a 1:m
relationship from Customer to Contacts, it doesn't mean that there is
navigability from Customer -> Contacts.

>> Eric Evans makes the case that we should look to constrain the
navigability of associations (DDD, pp82-87).  I would argue that the size of
a collection of related objects is a part of that building a good domain
model.  At the DSFA (Pensions payments) there is an object called
PensionScheme, which has a collection of Payment objects.  Now, there is one
Payment per week, and a pensioner could claim for 30 years or more.  That
makes 1500 related Payments.  The design we came up with was to hold the 20
most recent Payments, and to have the icon representing the collection
provide a mechanism to query archived Payments.  We are using Evans'
Repository pattern (DDD pp147-157) to abstract the domain objects from the
archive database.

>> So, in summary, if you're trying to let the user navigate through 1000
objects, you've probably got the navigability in the domain model wrong.  At
the very least some sort of filtering or querying facility is needed, either
client-side (resolve the collection and filter in a table) or server-side
(run a query from a user action).



---
So, to solve these problems I think an outline pane is neccessary.  The
outline  view affords  the user with 'context' about their current
location within a large object tree and it also provides for easier
navigation within the object.
The outline pane could be optional.

Also, the Eclipse IDE put the outline in a view that is separate from
the editors.  I chose to put the outline inside the editor in a separate
pane inside the editor ... I didn't want to waste the screen real estate
an an outline view that
wouldn't be used all the time.

>> I think I'd argue that the outline pane is important enough to warrant
its own view.  That said, I was thinking more that it would be combined with
a navigator-like view, so that all instantied objects in the client-side
session could be viewed and explored - possibly recursively.  But this is a
relatively minor point in the scheme of things.





From emorning at yahoo.com  Sun May  8 17:27:21 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 08 May 2005 10:27:21 -0500
Subject: [Rcpviewer-contributors] GUI and virtual domain models (was Ted's
 screenshot - comment posted.)
In-Reply-To: <LGEELLOAEBMLCOGIKLMKEEJFDCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKEEJFDCAA.dan@haywood-associates.co.uk>
Message-ID: <427E2FD9.6050202@yahoo.com>

Dan Haywood wrote:

>Ted wrote:
>
>Before reading this post I responded to one Mike's posts by saying that
>almost all GUI-related data should be in the GUI metadata layer.  Now
>I'm gonna say that almost all GUI-related data should be in the domain
>model.  And I'm correct both times!
>
>The difference is that from now on I will think of the GUI metadata
>layer as a 'virtual domain model' built on top of a legacy domain
>model.  If a domain model already provides all the methods and
>attributes required to work with RCPViewer then very little or no extra
>GUI metadata will be required.  A legacy domain model will require more
>GUI metadata to be provided.
>
>Does this approach make sense to you guys?
>
>
>  
>
>>>Music to my ears!  This is part of what I was getting on the wiki page:
>>>      
>>>
>"http://www.haywood-associates.co.uk/rcpviewer/space/concepts/virtual-domain
>-objects".
>
>  
>

Now I understand that post.  I guess I was not 'getting' it before.
I suppose that one critisism of the NO framework that you have heard a 
lot is that NO requires stuff to be in the domain model that should 
really not be in the domain model.
This will be a frequent critisism of developers that have not had the 
'aha' moment that I had today.

In my previous post I documented the thought process that lead to my 
insight.
I think that you should have something like that process in your NO 
documentation. 
That is, instead of just saying "All NO objects must implement these 
methods...." you should lead a new developer through the thought process 
that enables them to erase the difference in thier mind between 
configuring/building a GUI versus having the domain supply the data 
necessary to 'connect' a GUI to the object.  That might help popularize 
the NO approach.




From dan at haywood-associates.co.uk  Sun May  8 23:16:01 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 8 May 2005 22:16:01 +0100
Subject: [Rcpviewer-contributors] Docs (was GUI and virtual domain models (was Ted's screenshot - comment posted.))
In-Reply-To: <427E2FD9.6050202@yahoo.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKMEJGDCAA.dan@haywood-associates.co.uk>

Ted said:

In my previous post I documented the thought process that lead to my
insight.
I think that you should have something like that process in your NO
documentation.
That is, instead of just saying "All NO objects must implement these
methods...." you should lead a new developer through the thought process
that enables them to erase the difference in thier mind between
configuring/building a GUI versus having the domain supply the data
necessary to 'connect' a GUI to the object.  That might help popularize
the NO approach.


>> Good idea.  I've started a docbook XML doc anyway which I hope to evolve
into a developer's guide.  So I've just put a few stub sections to capture
this thought.  (Formal docs are to live under SVN/trunk/docs, by the
ay).  -- Dan



-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
stockwell
Sent: 08 May 2005 16:27
To: rcpviewer-contributors at lists.berlios.de
Subject: Re: [Rcpviewer-contributors] GUI and virtual domain models (was
Ted's screenshot - comment posted.)


Dan Haywood wrote:

>Ted wrote:
>
>Before reading this post I responded to one Mike's posts by saying that
>almost all GUI-related data should be in the GUI metadata layer.  Now
>I'm gonna say that almost all GUI-related data should be in the domain
>model.  And I'm correct both times!
>
>The difference is that from now on I will think of the GUI metadata
>layer as a 'virtual domain model' built on top of a legacy domain
>model.  If a domain model already provides all the methods and
>attributes required to work with RCPViewer then very little or no extra
>GUI metadata will be required.  A legacy domain model will require more
>GUI metadata to be provided.
>
>Does this approach make sense to you guys?
>
>
>
>
>>>Music to my ears!  This is part of what I was getting on the wiki page:
>>>
>>>
>"http://www.haywood-associates.co.uk/rcpviewer/space/concepts/virtual-domai
n
>-objects".
>
>
>

Now I understand that post.  I guess I was not 'getting' it before.
I suppose that one critisism of the NO framework that you have heard a
lot is that NO requires stuff to be in the domain model that should
really not be in the domain model.
This will be a frequent critisism of developers that have not had the
'aha' moment that I had today.

In my previous post I documented the thought process that lead to my
insight.
I think that you should have something like that process in your NO
documentation.
That is, instead of just saying "All NO objects must implement these
methods...." you should lead a new developer through the thought process
that enables them to erase the difference in thier mind between
configuring/building a GUI versus having the domain supply the data
necessary to 'connect' a GUI to the object.  That might help popularize
the NO approach.


_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From mike.evans at incremental.eu.com  Mon May  9 10:37:16 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Mon, 09 May 2005 09:37:16 +0100
Subject: [Rcpviewer-contributors] MikeSpike1 & 2
Message-ID: <427F213C.9090804@incremental.eu.com>

Are now in the 'spikes' directory in SVN.
They are not what I set out to do (!).
Curiously they changed from technical spikes into elementary tutorials 
in test-driven plug-in development .  Dunno why - s'pose coz I needed to 
know how to do it myself.
I persevered on the off-chance that it might be useful to someone coming 
into the project not familiar with PDE.  I do not think there is 
anything there that would be of interest to, e.g. Ted.

To give you an idea of what the two (trivial) projects are about I have 
appended the text of the two explanatory wiki pages at the end of the 
e-mail.  That'll help you decide whether to not to take a look at the 
projects.

Spike3 will be a 'proper' spike - using emf-builder's model and looking 
at how a GUI can be built-up from domain relationships and 
multiplicities alone - Composite pattern here I come!

Mike E.


****  mike spike1-runtime/wiki/Index.wiki ***

1 Mike's Spike 1

This wiki idea is cool!

~~What I've done~~
1. Created 'mikespike1-runtime' project.  This represents the RCPViewer 
application as used by an end-user.  I did this using the new plug-in 
project wizard, selecting to create an RCP app (second page of wizard) 
and then selecting the 'RCP application with a view' template.
1. Created 'mikespike1-test' project.   This is all the regression tests 
for the 'runtime' component.  For this we still need a plugin project 
(for the PDE test environment) but I chose not to add any code 
(including no plugin class).  I made it dependent on the 
mikespike1-runtime and org.junit plugins ( having configured 
mikespike1-runtime to export the core eclipse plugins it is dependent 
upon).
1. Then created a src package in the test project and wrote a 
junit.framework.TestCase class with a dummy test.
1. Then needed a test run configuration:
1. New 'JUnit Plug-in Test'
1. Name : Test
1. Run all tests in selected package ... : mikespike1_test
1. (next tab) Program to Run : run an application : 
mikespike1_runtime.mikespike1
1. (next tab) Choose plug-ins and frgements to launch : Deselect all 
then select the two 2 mikespike1 plugins;
1. Add Required Plug-ins
1. Run!
1. Added some more tests based on the rcp template's generated code

~~Discussion~~
If you look at the tests you'll see I use reflection to access the 
underlying SWT GUI widgets.  Hence the tests are tied to the underlying 
implementations.  I feel this is OK as:
* to my mind the only way to really test GUI's;
* the Eclipse platform (or at least JFace) forces us down standard 
patterns of implementation anyway so this should not be too much of a 
constraint (as long as we do not keep changing the field names)
* as we are doing Test-Driven development the tests control the code 
anyway...

~~Next Steps~~
So far I have put the cart before the horse in that I added tests to a 
pre-existing implementation - that produced by the RCP wizard.  So spike 
2 will do things properly.  Next goto mikespike2-test/wiki/Index.wiki




***  mikespike2-test/wiki/Index.wiki ***


1 Mike's Spike 2

~~ Introduction ~~
This spike is about developing a basic RcpViewer GUI prototype using 
test-driven development.  Hence this wiki is in the 'test' project 
rather than the 'runtime' project as from now on test precede and 
control development.

This 'test' project itself started out as a cut'n'pasted version of 
mikespike1-test, whilst mikespike2-runtime was created via the new 
project plug-in wizard, selecting an RCP application and choosing the 
Hello World template (I fiddled with some of the names/ids).

Creating a runtime configuration for the mikespike2-runtime plugins only 
(and its required plugins) will show that the wizard has done its work 
and runs up an empty RCP app window.

__Note__ : in addtion configure mikespike2-runtime to export the core 
eclipse plugins it is dependent upon.

~~ Development ~~
Is all controlled from the Test class now.  Each iteration creates a 
test, runs it, fails and then add the implementation to make the test 
pass.  Good ol' XP.  So all other notes and explanations of reside in 
the javadoc of each test.  I realise you are presented with the end 
implementation of all tests but I hope by following each subsequent 
test's javadoc you'll get a handle on my thought processes.

__Note__ : you'll nedd to create a JUnit Plugin Test configuartion using 
only the two mikespike2 plugins and their requisite plugins.


-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Mon May  9 11:01:33 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Mon, 09 May 2005 10:01:33 +0100
Subject: [Rcpviewer-contributors] Docs (was GUI and virtual domain models
 (was Ted's screenshot - comment posted.))
In-Reply-To: <LGEELLOAEBMLCOGIKLMKMEJGDCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKMEJGDCAA.dan@haywood-associates.co.uk>
Message-ID: <427F26ED.9080106@incremental.eu.com>

Two more thoughts re: using Eclipse extension points for any sort of GUI 
control:
1) In concept they are additive, not subtractive, so we would be going 
against the grain to use them as a mechanism to constrain root 
functionality (Dan's subtractive approach).
2) They will be hard to test as (I believe) there is no public API for 
changing the the extension registry as runtime.  Hence short of fiddling 
with config files and restarting plugins (*) different test conditions 
will be hard to come up with.  In contrast amodel defined by our own 
mechanism can be built with testing in mind...

Mike E.

(*) : of course we can use reflection but whilst am happy to do so for 
the core SWT and JFace classes I am not for Eclipse's own metamodels.



Dan Haywood wrote:

> Ted said:
> 
> In my previous post I documented the thought process that lead to my
> insight.
> I think that you should have something like that process in your NO
> documentation.
> That is, instead of just saying "All NO objects must implement these
> methods...." you should lead a new developer through the thought process
> that enables them to erase the difference in thier mind between
> configuring/building a GUI versus having the domain supply the data
> necessary to 'connect' a GUI to the object.  That might help popularize
> the NO approach.
> 
> 
> 
>>>Good idea.  I've started a docbook XML doc anyway which I hope to evolve
> 
> into a developer's guide.  So I've just put a few stub sections to capture
> this thought.  (Formal docs are to live under SVN/trunk/docs, by the
> ay).  -- Dan
> 
> 
> 
> -----Original Message-----
> From: rcpviewer-contributors-admin at berlios.de
> [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
> stockwell
> Sent: 08 May 2005 16:27
> To: rcpviewer-contributors at lists.berlios.de
> Subject: Re: [Rcpviewer-contributors] GUI and virtual domain models (was
> Ted's screenshot - comment posted.)
> 
> 
> Dan Haywood wrote:
> 
> 
>>Ted wrote:
>>
>>Before reading this post I responded to one Mike's posts by saying that
>>almost all GUI-related data should be in the GUI metadata layer.  Now
>>I'm gonna say that almost all GUI-related data should be in the domain
>>model.  And I'm correct both times!
>>
>>The difference is that from now on I will think of the GUI metadata
>>layer as a 'virtual domain model' built on top of a legacy domain
>>model.  If a domain model already provides all the methods and
>>attributes required to work with RCPViewer then very little or no extra
>>GUI metadata will be required.  A legacy domain model will require more
>>GUI metadata to be provided.
>>
>>Does this approach make sense to you guys?
>>
>>
>>
>>
>>
>>>>Music to my ears!  This is part of what I was getting on the wiki page:
>>>>
>>>>
>>
>>"http://www.haywood-associates.co.uk/rcpviewer/space/concepts/virtual-domai
> 
> n
> 
>>-objects".
>>
>>
>>
> 
> 
> Now I understand that post.  I guess I was not 'getting' it before.
> I suppose that one critisism of the NO framework that you have heard a
> lot is that NO requires stuff to be in the domain model that should
> really not be in the domain model.
> This will be a frequent critisism of developers that have not had the
> 'aha' moment that I had today.
> 
> In my previous post I documented the thought process that lead to my
> insight.
> I think that you should have something like that process in your NO
> documentation.
> That is, instead of just saying "All NO objects must implement these
> methods...." you should lead a new developer through the thought process
> that enables them to erase the difference in thier mind between
> configuring/building a GUI versus having the domain supply the data
> necessary to 'connect' a GUI to the object.  That might help popularize
> the NO approach.
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Mon May  9 11:31:29 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Mon, 9 May 2005 10:31:29 +0100
Subject: [Rcpviewer-contributors] Docs (was GUI and virtual domain models (was Ted's screenshot - comment posted.))
In-Reply-To: <427F26ED.9080106@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKAEJNDCAA.dan@haywood-associates.co.uk>

>> within
Dan

-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
Sent: 09 May 2005 10:02
To: rcpviewer-contributors at lists.berlios.de
Subject: Re: [Rcpviewer-contributors] Docs (was GUI and virtual domain
models (was Ted's screenshot - comment posted.))


Two more thoughts re: using Eclipse extension points for any sort of GUI
control:

1) In concept they are additive, not subtractive, so we would be going
against the grain to use them as a mechanism to constrain root
functionality (Dan's subtractive approach).

>> I think these are slightly different points.  My "subtractive
programming" thing relates to what a domain programmer does - he identifies
constraints and business rules and then finds a way to represent them in the
domain model so that the application can "do less".
>> I do think there may be a role for using Eclipse extension points,
though, to correspond to my IMetaModelExtension.  In other words, we are
teaching the metamodel builder to pick up additional semantics because
(presumably) the rcpviewer knows to look for them and to render them
appropriately.  And of course some of those semantics might be to constrain
the model (eg a state management extension point that picks up
@UnusableInState({PENDING, IN_QC}) on attributes and operations.  Hmmm,
that's a subtle point: we're adding subtractions...
>> That said, I've written IMetaModelExtension without presuming extension
points, in case the metamodel is ever used outside of Eclipse (eg in Trails)

---
>> What I'd like you and Ted to tell me though: what is the relationship on
Eclipse extension points and Spring?  Do we use Spring to stitch together
the components of our architecture, or Eclipse?  I *think* my preference is
for Spring, with some uber-plugin that basically exposes Spring's Dependency
Injection functionality to others.  But I'm very sketchy on this.


------
2) They will be hard to test as (I believe) there is no public API for
changing the the extension registry as runtime.  Hence short of fiddling
with config files and restarting plugins (*) different test conditions
will be hard to come up with.  In contrast amodel defined by our own
mechanism can be built with testing in mind...

>> Don't really have any knowledge on this, but in general we do want
testability.  Mock objects guys say to build a facade around things that
aren't testable: one could argue my MetaModel is doing this around Eclipse's
Platform class.


Mike E.

(*) : of course we can use reflection but whilst am happy to do so for
the core SWT and JFace classes I am not for Eclipse's own metamodels.



Dan Haywood wrote:

> Ted said:
>
> In my previous post I documented the thought process that lead to my
> insight.
> I think that you should have something like that process in your NO
> documentation.
> That is, instead of just saying "All NO objects must implement these
> methods...." you should lead a new developer through the thought process
> that enables them to erase the difference in thier mind between
> configuring/building a GUI versus having the domain supply the data
> necessary to 'connect' a GUI to the object.  That might help popularize
> the NO approach.
>
>
>
>>>Good idea.  I've started a docbook XML doc anyway which I hope to evolve
>
> into a developer's guide.  So I've just put a few stub sections to capture
> this thought.  (Formal docs are to live under SVN/trunk/docs, by the
> ay).  -- Dan
>
>
>
> -----Original Message-----
> From: rcpviewer-contributors-admin at berlios.de
> [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
> stockwell
> Sent: 08 May 2005 16:27
> To: rcpviewer-contributors at lists.berlios.de
> Subject: Re: [Rcpviewer-contributors] GUI and virtual domain models (was
> Ted's screenshot - comment posted.)
>
>
> Dan Haywood wrote:
>
>
>>Ted wrote:
>>
>>Before reading this post I responded to one Mike's posts by saying that
>>almost all GUI-related data should be in the GUI metadata layer.  Now
>>I'm gonna say that almost all GUI-related data should be in the domain
>>model.  And I'm correct both times!
>>
>>The difference is that from now on I will think of the GUI metadata
>>layer as a 'virtual domain model' built on top of a legacy domain
>>model.  If a domain model already provides all the methods and
>>attributes required to work with RCPViewer then very little or no extra
>>GUI metadata will be required.  A legacy domain model will require more
>>GUI metadata to be provided.
>>
>>Does this approach make sense to you guys?
>>
>>
>>
>>
>>
>>>>Music to my ears!  This is part of what I was getting on the wiki page:
>>>>
>>>>
>>
>>"http://www.haywood-associates.co.uk/rcpviewer/space/concepts/virtual-doma
i
>
> n
>
>>-objects".
>>
>>
>>
>
>
> Now I understand that post.  I guess I was not 'getting' it before.
> I suppose that one critisism of the NO framework that you have heard a
> lot is that NO requires stuff to be in the domain model that should
> really not be in the domain model.
> This will be a frequent critisism of developers that have not had the
> 'aha' moment that I had today.
>
> In my previous post I documented the thought process that lead to my
> insight.
> I think that you should have something like that process in your NO
> documentation.
> That is, instead of just saying "All NO objects must implement these
> methods...." you should lead a new developer through the thought process
> that enables them to erase the difference in thier mind between
> configuring/building a GUI versus having the domain supply the data
> necessary to 'connect' a GUI to the object.  That might help popularize
> the NO approach.
>
>
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>
>
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>
>

--
Mike Evans
Incremental Ltd.
www.incremental.eu.com

_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From mike.evans at incremental.eu.com  Tue May 10 10:17:36 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Tue, 10 May 2005 09:17:36 +0100
Subject: [Rcpviewer-contributors] Mike Spike 3
Message-ID: <42806E20.8090604@incremental.eu.com>

... is in SVN - a real spike this time.
I have not progressed far enough for it to show anything useful yet - 
only in SVN for safety's sake.

Mike E.
-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mme at blueyonder.co.uk  Tue May 10 10:12:43 2005
From: mme at blueyonder.co.uk (Mike Evans)
Date: Tue, 10 May 2005 09:12:43 +0100
Subject: [Rcpviewer-contributors] mikespike 3...
Message-ID: <42806CFB.7000601@blueyonder.co.uk>

... is in SVN - a real spike this time.
I have not progressed far enough for it to show anything useful yet - 
only in SVN for safety's sake.

Mike E.



From dan at haywood-associates.co.uk  Tue May 10 11:33:27 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Tue, 10 May 2005 10:33:27 +0100
Subject: [Rcpviewer-contributors] emf-builder - initial support for references
Message-ID: <LGEELLOAEBMLCOGIKLMKGEKJDCAA.dan@haywood-associates.co.uk>

Just starting, but can at least capture 1:m references.  Still need to model
1:1 and also bidirectional.

Dan




From dan at haywood-associates.co.uk  Tue May 10 11:37:48 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Tue, 10 May 2005 10:37:48 +0100
Subject: [Rcpviewer-contributors] Operations (actions) programming model
Message-ID: <LGEELLOAEBMLCOGIKLMKKEKJDCAA.dan@haywood-associates.co.uk>

I've been mulling over what the programming model should look like for
operations (aka user actions).

It's not enough to just write a method like:

   public Order placeOrder(Date d) { ... }

because:
a) there may be a default value for any parameters, and
b) there could be preconditions or other business rules that mean it should
not be available.


The NOF itself would deal with this as follows:

   public Order actionPlaceOrder(Date d) {   // NOF uses an "action" prefix
      ...
   }
   public Order aboutActionPlaceOrder(ActionAbout a, Date d) {
     a.setParameter(0, "date", yesterdaysDate());
     a.unusableOnCondition(isBlackListed(), "Blacklisted customers cannot
place orders");
   }

The choreography between the framework and the POJO is as follows:
- invokes the aboutAction first time: to fetch the parameter defaults
- the viewer then renders a dialog box
- invokes the aboutAction second time: to run any "unusableOnCondition", ie
determine if the OK field is enabled or disabled
- when user hits OK (presuming enabled): invokes action method itself.

Although this works reasonably well in practice, it isn't typesafe (eg
a.setParameter).  Also, the ActionAbout is quite a strong coupling to the
"reflector" component that parses the POJO model.


So my modification is:

   public Order placeOrderDefaults(Date[] d) {  // framework will pass in a
1-element array
     d[0] = yesterdaysDate();                   // typesafe
   }
   public Order placeOrder(Date d) {            // no need for "action"
prefix
      ..
   }
   public void placeOrderPreConditions(Date d) throws
RuntimeException("...") {  // use RuntimeException as catch all
     if (isBlackListed()) throw new IllegalStateException("Cannot place
order if blacklisted");
   }

Opinions?  The 1-element arrays are wierd, I grant you, but Java of course
only supports pass-by-value.  (I saw this technique in SQLj part 2
specification for modelling byref arguments of stored procedures).


(From the UI's point of view, it would invoke placeOrderDefaults(...) when
click on the link representing the action (in Ted's action tab; then invoke
placeOrder(...).  I'm envisaging an aspect would intercept the call and
invoke placeOrderPreConditions first.  That's why the PreConditions method
must throw a RuntimeException rather than a checked exception).

Dan




From emorning at yahoo.com  Tue May 10 14:48:44 2005
From: emorning at yahoo.com (ted stockwell)
Date: Tue, 10 May 2005 07:48:44 -0500
Subject: [Rcpviewer-contributors] Operations (actions) programming model
In-Reply-To: <LGEELLOAEBMLCOGIKLMKKEKJDCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKKEKJDCAA.dan@haywood-associates.co.uk>
Message-ID: <4280ADAC.1020308@yahoo.com>

Dan Haywood wrote:

>So my modification is:
>
>   public Order placeOrderDefaults(Date[] d) {  // framework will pass in a
>1-element array
>     d[0] = yesterdaysDate();                   // typesafe
>   }
>   public Order placeOrder(Date d) {            // no need for "action"
>prefix
>      ..
>   }
>   public void placeOrderPreConditions(Date d) throws
>RuntimeException("...") {  // use RuntimeException as catch all
>     if (isBlackListed()) throw new IllegalStateException("Cannot place
>order if blacklisted");
>   }
>
>  
>

I don't understand why the placeOrderDefaults method returns an Order 
object instead of just returning an array of defaults for the placeOrder 
method.
That is, I would have expected this instead...

public Object[] getPlaceOrderDefaults() { return new Object[] { 
yesterdaysDate() }; }


>(From the UI's point of view, it would invoke placeOrderDefaults(...) when
>click on the link representing the action (in Ted's action tab; then invoke
>placeOrder(...).  I'm envisaging an aspect would intercept the call and
>invoke placeOrderPreConditions first.  That's why the PreConditions method
>must throw a RuntimeException rather than a checked exception).
>  
>

I would prefer the placeOrderPreConditions method to throw a checked 
exception.  The aspect that invokes the placeOrderPreConditions method 
can always rethrow a RuntimeException that wraps the exception thrown by 
the placeOrderPreConditions method.


A thought...
since you envision an aspect calling the placeOrderPreConditions method 
anyway then why not just put the code for the placeOrderPreConditions 
method in an aspect?
It kinda makes sense to me to that "defaults" and "pre conditions" are 
aspects of the system that could be implemented separately from the 
domain model. 
The advantage of such would be that a domain model could be reused in 
systems that have different requirements in terms of default and 
preconditions.  Or even better... different defaults and pre conditions 
could be 'woven' into a system at runtime.  Now that I think of it, 
adding the defaults and pre conditions at runtime make more sense for a 
plugin based product.  Adding preconditions at runtime would make it 
possible for third-party plugins to add preconditions to a domain.  So 
for instance, if I added a version control plugin to my IDE that 
requires developers to 'lock' files before they can edit them then the 
version control plugin could add a precondition to the domain that denys 
an 'edit' operation on a file if the file has not been locked.







From emorning at yahoo.com  Tue May 10 14:48:58 2005
From: emorning at yahoo.com (ted stockwell)
Date: Tue, 10 May 2005 07:48:58 -0500
Subject: [Rcpviewer-contributors] Acceptance test scripts
Message-ID: <4280ADBA.6030301@yahoo.com>

Y'know what would be very way cool?
If the RCPViewer had the ability to record user actions as an acceptance
test script.
Naturally, the test script would be a serialized XML version of an
ITestScript (which extends IDomainObject) so that the test scripts could
be edited with the RCPViewer and "checks" inserted into the scripts.


Sorry, getting way ahead of myself...



From mike.evans at incremental.eu.com  Tue May 10 15:03:44 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Tue, 10 May 2005 14:03:44 +0100
Subject: [Rcpviewer-contributors] Acceptance test scripts
In-Reply-To: <4280ADBA.6030301@yahoo.com>
References: <4280ADBA.6030301@yahoo.com>
Message-ID: <4280B130.2080004@incremental.eu.com>

yeah - shuddup...

Actually I think this maps to NO's AcceptanceTest idea so does bear 
thinking about.
Will do so whilst developing the test-driven approach.

ted stockwell wrote:
> Y'know what would be very way cool?
> If the RCPViewer had the ability to record user actions as an acceptance
> test script.
> Naturally, the test script would be a serialized XML version of an
> ITestScript (which extends IDomainObject) so that the test scripts could
> be edited with the RCPViewer and "checks" inserted into the scripts.
> 
> 
> Sorry, getting way ahead of myself...
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Tue May 10 15:19:22 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Tue, 10 May 2005 14:19:22 +0100
Subject: [Rcpviewer-contributors] Acceptance test scripts
In-Reply-To: <4280ADBA.6030301@yahoo.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKAEKODCAA.dan@haywood-associates.co.uk>

Absolutely - I've had similar thoughts, admittedly with the benefit of doing
something quite similar at the DSFA:

Here's a real-life unit test (hand-crafted) for the DSFA project:

            Dim tempCust As TestObject = _
                customerClass.invokeActionReturnObject("Create Customer
Awaiting PPSN", params())
            tempCust.associate("Title", mr)
            tempCust.fieldEntry("Client Firstname", "Fred")
            tempCust.fieldEntry("Client Surname", "Bloggs")
            tempCust.associate("Sex", male)
            tempCust.invokeAction( _
                "New Address", params("Chez Nous", "", "", coClare,
ireland))
            tempCust.invokeAction("Save")

            assertTrue("Not persistent!",
underlyingObject(tempCust).isPersistent())

            tempCust.assertActionUsable("New Scheme Case", params("aaa",
"First Case"))

            tempCust.assertNoOfElements("Customer Cases", 0)

            tempCust.invokeAction("New Scheme Case", params("AAA", "First
Case"))

            tempCust.assertNoOfElements("Customer Cases", 1)

This runs within a regular JUnit test method.  The TestObject wraps
IDomainObject (in our terminology), which wraps the POJO.  The original name
for TestObject was actually "View" - it is the mechanism by which one
interacts with the domain object.

If one arranges that the running application and the test case has the same
test fixture, then it is also very easy to debug the application.

So I very much agree that creating such a test case could be done via some
sort of recording, but I think its serialized form should be just JUnit
tests, not XML.  I think I'd prefer that the TestObjects actually implement
the same interface as the object under test, akin to some of the mocking
libraries.  In fact, thinking about it, one could interact with the actual
objects, but enable some aspect to do the recording, and have a
metamodel-aware library through which to make assertions.

Good stuff.
Dan


-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
stockwell
Sent: 10 May 2005 13:49
To: rcpviewer-contributors at lists.berlios.de
Subject: [Rcpviewer-contributors] Acceptance test scripts


Y'know what would be very way cool?
If the RCPViewer had the ability to record user actions as an acceptance
test script.
Naturally, the test script would be a serialized XML version of an
ITestScript (which extends IDomainObject) so that the test scripts could
be edited with the RCPViewer and "checks" inserted into the scripts.


Sorry, getting way ahead of myself...

_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From dan at haywood-associates.co.uk  Tue May 10 15:24:30 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Tue, 10 May 2005 14:24:30 +0100
Subject: [Rcpviewer-contributors] Operations (actions) programming model
In-Reply-To: <4280ADAC.1020308@yahoo.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKGEKODCAA.dan@haywood-associates.co.uk>

>> Ted, thanks for your thoughts on this.  Some good points; conversation
continues within...

-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
stockwell
Sent: 10 May 2005 13:49


--------
>   public Order placeOrderDefaults(Date[] d) {  // framework will pass in a
>1-element array
>     d[0] = yesterdaysDate();                   // typesafe
>   }
I don't understand why the placeOrderDefaults method returns an Order
object instead of just returning an array of defaults for the placeOrder
method.

That is, I would have expected this instead...

  public Object[] getPlaceOrderDefaults() { return new Object[] {
  yesterdaysDate() }; }


>> first up, actually I made a mistake, in that the placeOrderDefaults(...)
would probably just be void rather than return null.

>> other than that, I think I prefer my approach because (a) it's easy to
copy-and-paste the original method and then just append "[]" to the end of
each method, and (b) it's typesafe in a way that returning a array of
Objects isn't.

>> any other opinions???


----
I would prefer the placeOrderPreConditions method to throw a checked
exception.  The aspect that invokes the placeOrderPreConditions method
can always rethrow a RuntimeException that wraps the exception thrown by
the placeOrderPreConditions method.

>> Okay, I buy that.  That is a more natural way to go.


----
A thought...
since you envision an aspect calling the placeOrderPreConditions method
anyway then why not just put the code for the placeOrderPreConditions
method in an aspect?

It kinda makes sense to me to that "defaults" and "pre conditions" are
aspects of the system that could be implemented separately from the
domain model.

>> Don't agree here.  Preconditions are part of the semantics of a domain
model so should be expressed in it.  Since we aren't writing Eiffel, this is
the most natural way I can think of.  And while we might use aspects for our
own implementation, I don't want to force the use of aspects on regular
domain programmers.


----
The advantage of such would be that a domain model could be reused in
systems that have different requirements in terms of default and
preconditions.  Or even better... different defaults and pre conditions
could be 'woven' into a system at runtime.

>> Now *that* is a very interesting idea.  What it says to me is that rather
than relying on a naming convention (append "PreConditions", one would
instead use some more extensible mechanism to indicate preconditions.
Actually, this does sound a little like aspects, though.

>> Maybe the commonly trodden path should just be the "PreConditions"
suffix, but we do (he says, contradicting himself) provide some abstract
aspects so that more sophisticated domain programmers can easily attach
additional preconditions if they so choose.  In fact, we should then eat our
own dog food so that my "apply PreConditions" aspect is just the first of
those).

>> Anyone else want to contribute on this thread?




_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From dan at haywood-associates.co.uk  Tue May 10 16:56:35 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Tue, 10 May 2005 15:56:35 +0100
Subject: [Rcpviewer-contributors] project website...
Message-ID: <LGEELLOAEBMLCOGIKLMKEEKPDCAA.dan@haywood-associates.co.uk>

My intent ultimately is to have continuous integration running so that our
docs and tests are kept continuously up-to-date.

As a stepping stone, though, I've now got an ant script that'll checkout
HEAD from svn and run javadoc and java2html against a hard-coded list of
projects in the workspace.  It dumps the output into our fledging project
website, at http://rcpviewer.berlios.de/.

Let me know if you want a spike or project adding to the list.

Dan




From emorning at yahoo.com  Thu May 12 14:40:42 2005
From: emorning at yahoo.com (ted stockwell)
Date: Thu, 12 May 2005 07:40:42 -0500
Subject: [Rcpviewer-contributors] Re: Spring as a plugin?
In-Reply-To: <LGEELLOAEBMLCOGIKLMKAELIDCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKAELIDCAA.dan@haywood-associates.co.uk>
Message-ID: <42834ECA.5080003@yahoo.com>

Dan Haywood wrote:

>Hi Ted,
>
>Is your spike going to look at how to use Spring to configure components?
>
>I ask because I'm rather unsure about the relationship between Spring vs
>regular Eclipse extension-points.  I'd like to use the former so far as
>possible since it lowers the barrier for non-Eclipse experts like Eoin and
>me (and thus to our target domain programmers in general).  Then again, we
>shouldn't go against the grain if configuring our app with Spring would be
>unnatural for an RCP app.
>
>Anyway, do you have any insights here?
>
>Cheers
>Dan
>  
>
I have developed a Spring plugin for my spike.  I have discovered that 
Spring will make it easier to customize RPCSoftware's system for our 
many clients.
However, Spring cannot be used as a replacement for Eclipse extension 
points since Spring and extension points serve different purposes.
I would characterize the difference as a 'push' model (Spring) versus a 
'pull' model (extension points). 
The difference between the two approaches is that extension points are a 
way of 'pulling' dependencies into an object that are only known at 
runtime whereas Spring can only 'push' those dependencies that are known 
at development time.
Thus extension points are more appropriate for 'extending' very dynamic 
plugin-based products.

On the flip side, extension points can only 'pull' dependencies and 
therefore cannot really be used to replace the implementation of some 
dependency with a different  implementation, the pull model can only 
supply ALL the implementations available, the receiving object would 
have to have some way to distinquish which implementation to use..
Thus Spring is more appropriate for 'configuring' an application by 
assembling components into an application.

In terms of the RCPViewer.  Instead of having an application explicitly 
register all the domain classes with a domain registry when the 
application starts,  the 'Eclipse way' would be to register the domain 
classes via extension points.
In this way the total set of domain classes does not have to be known 
until runtime. 
This aspect of extension points can make team development easier because 
one developer can work on the 'project management' domain while another 
developer works separately on the 'inventory management' domain.  These 
domains can then be included or excluded from the final product merely 
by including or excluding the plugins that contain the domain 
implementation. 


----------------------------------------------

On another note, I'd like to show you all how I wrote the main 
application class for my spike.
This class shows off how I think that Spring will make our system easier 
to customize for our many clients.

When writing my splike I was imagining that I am writing a new version 
or our ERP system (maybe not such a good thing if what you want is a 
simple to understand example, but good if you want an example that will 
make sure that the API is truly reusable).
The main entry point must do two things, authenticate the user and start 
the workbench.
Currently I end up rewriting this class more several clients because I 
need to special stuff when starting the application, or I need to 
authenticate users in various ways.
In the past I have considered using the JAAS API to make it possible to 
integerate different authentication implementations for different 
clients.  Or I could have written our application to the Acegi API to 
accomplish the same thing.
With Spring I was able to abstract out the details of authentication 
while introducing NO DEPENDENCIES AT ALL.  Not even to Spring!

Here is the main runnable for my example...

++++++++

import net.sf.plugins.springframework.SpringApplicationLauncher;

import org.eclipse.core.runtime.IPlatformRunnable;
import org.eclipse.core.runtime.Platform;
import org.eclipse.ui.PlatformUI;

import com.example.ppo.commands.AuthenticationCommand;
import com.example.ppo.commands.CreateAndRunWorkbenchCommand;

public class PpoApplication
extends SpringApplicationLauncher
implements IPlatformRunnable
{
    private AuthenticationCommand _authenticationCommand;
    private CreateAndRunWorkbenchCommand _createAndRunWorkbenchCommand;
   
    public PpoApplication(
            AuthenticationCommand pAuthenticationCommand,
            CreateAndRunWorkbenchCommand pWorkbenchCommand
    ) {
        _authenticationCommand= pAuthenticationCommand;
        _createAndRunWorkbenchCommand= pWorkbenchCommand;
    }
   
    public Object run(Object args) throws Exception {
       
        try {
            if (_authenticationCommand.run() == null)
                return null; 
           

            int returnCode = _createAndRunWorkbenchCommand.run();
           
            if (returnCode == PlatformUI.RETURN_RESTART)
                return IPlatformRunnable.EXIT_RESTART;
           
            return IPlatformRunnable.EXIT_OK;
        }
        finally {
            Platform.endSplash();
        }
    }


}

++++++++++++++

Now the main code does just what it's suppose to...it authenticates the 
user and starts the workbench.  However it does this with the help of 
two Stratgey objects that are supplied by Spring.
I can configure any customer's application by starting the application 
with a different Spring configuration and I never need to touch this 
code again.
Best of all, it does not tie the application to any third-party API.

-------------------

My spring plugin has an extension point for registering Spring 
configuration files.
My example application plugin includes a Spring configuration file and 
the file is registered as a Spring bean factory like so...

    <extension point="net.sf.plugins.springframework.beanFactories">
        <beanFactory id="net.sf.plugins.rcpviewer.examples.ppo" 
file="ppo-beanfactory.xml" />
    </extension>

The Spring plugin also has an application launcher for running 
Spring-based applications.
Launch Spring applications like so...

    eclipse.exe -application net.sf.plugins.springframework.launcher 
-beanFactory net.sf.plugins.rcpviewer.examples.ppo

...where -beanFactory is the id of a registered bean factory.
The launcher expects to find a bean named "main" that implements 
org.eclipse.runtime.IPlatformRunnable in the denoted bean factory.

-------------------


I have comitted the spring plugin under spikes/teds-workspace (well, I'm 
trying anyway...)




From dan at haywood-associates.co.uk  Sun May 15 10:03:11 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 15 May 2005 09:03:11 +0100
Subject: [Rcpviewer-contributors] multiple meta-models & sessions
Message-ID: <LGEELLOAEBMLCOGIKLMKOEMADCAA.dan@haywood-associates.co.uk>

Opinions, please on the following:

At the moment I've been presuming that a metamodel will be instantiated just
once within a client-side JVM.  Its contents are IDomainClasses: the
relationship between MetaModel and IDomainClass is 1:m bidirectional.

Similarly, there is an ISession that contains the IDomainObjects that have
been resolved and are known about for this client.  Again 1:m bidirectional.
Every IDomainObject knows its IDomainClass (m:1 unidirectional).  I've also
just realized that really an ISession is an instantiation of a MetaModel, so
probably should reference it (1:1 unidirectional).

The following summarizes this (use a fixed size font!):

Session       (1) -> (1) MetaModel
  ^ (1)                      ^ (1)
  |                          |
  V (m)                      V (m)
IDomainObject (m) -> (1) IDomainClass


Now, I've been considering allowing multiple metamodels, and thus multiple
sessions, to be instantiated client side.  As an example, consider an RCP
app for bug tracking.  I can think of perhaps 3 domains (= metamodels):
- one representing the bug reports, priorities, issues, problems,
developers, releases and so forth.  This is the "core" domain would probably
be persisted using an RDBMS or EJB3.
- one representing say a chat room app, with chat room, message,
subscription etc.  When a priority #1 bug report comes in then a message can
be sent to a corresponding chat room.  This domain might not have any
persistence other than an in-memory representation held server-side.
- one representing the code base, with files, branches, tags and so forth.
This could be implemented using a persistent object store that delegates to
Subversion

Another example:
- Customer domain, eg for orders
- Filesystem domain, for maintaining any correspondence received from them
(a bit like I see in Mike's EPIC application)

As another final (hackneyed) example, consider a library.  A couple of
domains might be:
- the loan management domain (books, titles, loans, reservations)
- the stock management domain (stock items)

My simplifying assumption is that a single IDomainObject appears only in a
single domain.  So a Book in the loan domain is not the same object as a
Stock in the stock management domain.  However, a Book would know that it is
Stock, and so would have a reference to an IDomainObject whose IDomainClass
belonged to a different meta-model.

This then starts to firm up (in my mind) what an ISession is: it's a
collection of objects where the application can transparently traverse from
one object to another ("walk the object graph").  If one has a reference to
an object in another domain, then the responsibility for traversing the
graph moves to the domain object itself:  typically it would use a lookup
method (eg Book would use its stock_item_ref to look up its corresponding
Stock object).

What then are the implications for the GUI?  My thinking is perhaps to use a
label or icon to represent the domain.  And probably also that the "objects"
view (the LHS of Mike's spike, more-or-less) probably would have multiple
tabs, one for each domain.

And what are the implications for the programming model?  I'm thinking
perhaps of introducing an optional @MetaModel annotation on classes.  If
missing, then the class is presumed to live in the "default" metamodel -
most RCP apps will only need to support a single domain.  But if present, it
would indicate the name of the metamodel.

@MetaModel("Filesystem")
public class WordDoc { ... }

@MetaModel("InstantMessaging")
public class Message { ... }

There would then be a hash of metamodels, held as a singleton, eg:
MetaModel.instanceNamed("Filesystem")

Does any of the above make sense?  I do think it's worth supporting, else
there is a potential scalability issue.    And it probably is worth
considering as part of the design of the GUI.

But let me know your thoughts...

Dan





From dan at haywood-associates.co.uk  Wed May 18 01:52:08 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 18 May 2005 00:52:08 +0100
Subject: [Rcpviewer-contributors] Latest contribs / tidy-up
Message-ID: <LGEELLOAEBMLCOGIKLMKGEMHDCAA.dan@haywood-associates.co.uk>

Mike,Ted:
Thanks for your recent contribs into your respective workspaces - I think
that this spikes area works quite well.


Ted:
I had a peruse over your projects, but found some plugin dependencies seemed
to be missing.  Which version of EMF are you using (I'm using 2.0.1 which is
probably a little old?)

Could you also put together a wiki page or README, either online or as a
.wiki - I'm finding it a little difficult to figure out how it all pieces
together.

Finally, I noticed that your acegisecurity library plugin has the wrong
directory + project name - I guess you cloned it from org.apache.log4j.


Both:
I've been tidying up SVN/workspace.  There's a bunch of projects in there
dating back to when we just started.  What I've done is moved them to the
workspace of whoever originally contributed them:
- Build Tools to mikes-workspace
- ECSPlugin to mikes-workspace
- RCPViewer to mikes-workspace
- de.berlios.rcpviewer.nakedobjects to teds-workspace
- org.apache.log4j: have left alone.
I think I have that right.  If this stuff is now junk, then go ahead and
delete from your spike workspace (we can always get it back if nec. :-).  If
it should go somewhere else, let me know.


Finally:
I've renamed emf-builder to de.berlios.rcpviewer.core, and have converted it
into a library plugin.  NB: to get it to export, you need to run Eclipse
itself on a Java 1.5 VM (there was a bug on bugzilla relating to this),
along with 1.5 compliance level in your workspace.

Thanks all,
Dan




From mike.evans at incremental.eu.com  Fri May 20 09:32:53 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Fri, 20 May 2005 08:32:53 +0100
Subject: [Rcpviewer-contributors] mikespike3 & mikespike3-acme
Message-ID: <428D92A5.4050001@incremental.eu.com>

My third little spike is complete.
It suggests a base mechanism for GUI generation.
For review - most of the info is in the wiki page whose content I attach 
below to save a download of the whole spike.

Mike E.

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com

************************* WIKI CONTENT *********************************

1 Mike's Spike 3

This is a real spike - no more hand holding.
Its aim is to provoke thought into the basic mechanism (I hesitate to 
call it architecture) for GUI generation within RcpViewer.
Principles are:
* KISS
* eat your own dog food
* extensibility
* principle of no surprises (for RCP developers anyway)
A lot more thought than code has gone into this spike...

~~Limitations~~
* Only thinking about presentation here - not any other functionality.
* Still not using EMF model as a distraction

~~Set Up~~
mikespike3 represents the core RcpViewer code as delieverd by us. It is 
based on the mikespike2 code with the following (initial) differences:
* packages have been juggled (I like juggling packages)
* 'God' singleton has been swapped for rather more tasteful 'Model'
* this deals with instances for the puposes of this spike, not types
* the model starts with simple bean classes holding random primitive values
* the start-up view (ObjectListView) is now a list of all __instances__ 
within the model
* no tests - this is a real spike
mikespike3-acme represents a plugin developed by a third party extending 
RcpViewer.

A launch configuration for mikespike3 can be easily created using the 
'Launch an Eclipse Application' option on the overview tab of the plugin 
editor.  Once you have run the vanilla options add the mikespike3-acme 
plugin for its extra goodies (such as they are).

~~ Design ~~
There is a single, final mikespike3.editors.Editor class.  All displayed 
editors within RcpViewer are instances of this class.  Why?  I feel 
tying in persistence / security / all other non-GUI functionality to the 
Eclipse platform will be non-trivial.  Even if all of these are 
implemented vai aspects  we will still have to tie them in with GUI - 
editor lifecycle, save option enablements etc. etc.  Having a base 
editor which we do not have to open up for subclassing will keep life 
simple.

So how are different GUI representations generated?  Via 
mikespike3.gui.IEditorContentBuilder.  This is an interface and an 
extension point.  The Editor's mikespike3.editors.EditorInput passes a 
builder of this type that is then called in the Editor's 
createPartControl(...) method to generate the GUI.  The EditorInput is 
populated by whatever GUI mechanism the user is using to open an editor. 
  Here this is demonstrated by the two mikespike3.views.OpenAction's 
actions.  These reference a singleton 
mikespike3.gui.EditorContentBuilderFactory for available options.

Exactly what IEditorContentBuilder options are available are decided on 
a per class basis via the isApplicable() method on each interface.  The 
java implementation decides this rather than a configuration value to 
enable flexibility - in the longer term I reckon applicability should be 
done per instance rather than per type.  Plus having potentially complex 
logic rules in XML is daft.

Note that I follow the standard Eclipse approach of offering a default 
Editor for any particular type (dbl-click or 'open' menu option) or a 
list of other options via the 'open with' menu option.  Whatever option 
is selected becomes the default for that type).

All of this is to allow third parties to develop additional editor GUI 
representations for RcpViewer.

However I propose that we develop just one.  This is 
mikespike3.gui.DefaultEditorContentBuilder which generates a form-based 
GUI for any type based on the model metadata.  (Currently the 
implementation does the basic reflection necessary but of course this 
will comes from Dan's RCP model).

Developing only a single content builder is not as limited as it sounds. 
It uses the Composite patern to build up the GUI field-by-field.  The 
GUI for each individual field is then generated via a 
mikespike3.gui.IFieldBuilder implementation.  This is also an extension 
point and implementation selection works in a similiar manner to 
IEditorContentBuilder - with two crucial differences:
* IFieldBuilder's are selected per instance, not per type;
* IEditorContentBuilder offer alternatives whilst a single IFieldBuilder 
  will be always be selected
Hence the FieldBuilderFactory runs through all implementations of the 
'mikespike3.fieldbuilder' extension point until it hits the first that 
isApplicable().  If none are found it reverts to the 
DefaultFieldBuilder.  Note that the extension points are sorted so that 
more specialist ones are checked first.  What does 'more specialist' 
mean? - see ConfigElementSorter in the util package (this is an old 
implemenation that might be more elegantly done in Eclipse 3.x).

The purpose of the IFieldBuilder mechanism is to allow very different 
GUI's to be generated in the same editor.  Whilst the examples within 
this spike are trivial, in RcpViewer different IFieldBuilder's for 
linked objects based on their relationships will offer rich 
alternatives.  Or so I shall try to prove in the next spike.











From mike.evans at incremental.eu.com  Fri May 20 09:53:59 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Fri, 20 May 2005 08:53:59 +0100
Subject: [Rcpviewer-contributors] multiple meta-models & sessions
In-Reply-To: <LGEELLOAEBMLCOGIKLMKOEMADCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKOEMADCAA.dan@haywood-associates.co.uk>
Message-ID: <428D9797.4090606@incremental.eu.com>

Dan gets the first sad face of the project for making my head hurt.

I thought that a 'domain' would encapsulate the entire universe of 
types and objects that an RcpViewer app deals with. This made sense - 
within the domain's ISession, all instantiated objects would reachable 
one way or the other.

If we now have multiple ISession's, they rather loose their purpose.  If 
the object itself has to give the application all its references the 
ISession is reduced to a helper class.  Unless we have some sort of 
uber-session that encapsulates all other sessions - and then we are back 
to where we started.

Clearly I have not given this the thought that Dan has, but to me 
multiple domains/sessions smells wrong.

Mike E.



Dan Haywood wrote:

> Opinions, please on the following:
> 
> At the moment I've been presuming that a metamodel will be instantiated just
> once within a client-side JVM.  Its contents are IDomainClasses: the
> relationship between MetaModel and IDomainClass is 1:m bidirectional.
> 
> Similarly, there is an ISession that contains the IDomainObjects that have
> been resolved and are known about for this client.  Again 1:m bidirectional.
> Every IDomainObject knows its IDomainClass (m:1 unidirectional).  I've also
> just realized that really an ISession is an instantiation of a MetaModel, so
> probably should reference it (1:1 unidirectional).
> 
> The following summarizes this (use a fixed size font!):
> 
> Session       (1) -> (1) MetaModel
>   ^ (1)                      ^ (1)
>   |                          |
>   V (m)                      V (m)
> IDomainObject (m) -> (1) IDomainClass
> 
> 
> Now, I've been considering allowing multiple metamodels, and thus multiple
> sessions, to be instantiated client side.  As an example, consider an RCP
> app for bug tracking.  I can think of perhaps 3 domains (= metamodels):
> - one representing the bug reports, priorities, issues, problems,
> developers, releases and so forth.  This is the "core" domain would probably
> be persisted using an RDBMS or EJB3.
> - one representing say a chat room app, with chat room, message,
> subscription etc.  When a priority #1 bug report comes in then a message can
> be sent to a corresponding chat room.  This domain might not have any
> persistence other than an in-memory representation held server-side.
> - one representing the code base, with files, branches, tags and so forth.
> This could be implemented using a persistent object store that delegates to
> Subversion
> 
> Another example:
> - Customer domain, eg for orders
> - Filesystem domain, for maintaining any correspondence received from them
> (a bit like I see in Mike's EPIC application)
> 
> As another final (hackneyed) example, consider a library.  A couple of
> domains might be:
> - the loan management domain (books, titles, loans, reservations)
> - the stock management domain (stock items)
> 
> My simplifying assumption is that a single IDomainObject appears only in a
> single domain.  So a Book in the loan domain is not the same object as a
> Stock in the stock management domain.  However, a Book would know that it is
> Stock, and so would have a reference to an IDomainObject whose IDomainClass
> belonged to a different meta-model.
> 
> This then starts to firm up (in my mind) what an ISession is: it's a
> collection of objects where the application can transparently traverse from
> one object to another ("walk the object graph").  If one has a reference to
> an object in another domain, then the responsibility for traversing the
> graph moves to the domain object itself:  typically it would use a lookup
> method (eg Book would use its stock_item_ref to look up its corresponding
> Stock object).
> 
> What then are the implications for the GUI?  My thinking is perhaps to use a
> label or icon to represent the domain.  And probably also that the "objects"
> view (the LHS of Mike's spike, more-or-less) probably would have multiple
> tabs, one for each domain.
> 
> And what are the implications for the programming model?  I'm thinking
> perhaps of introducing an optional @MetaModel annotation on classes.  If
> missing, then the class is presumed to live in the "default" metamodel -
> most RCP apps will only need to support a single domain.  But if present, it
> would indicate the name of the metamodel.
> 
> @MetaModel("Filesystem")
> public class WordDoc { ... }
> 
> @MetaModel("InstantMessaging")
> public class Message { ... }
> 
> There would then be a hash of metamodels, held as a singleton, eg:
> MetaModel.instanceNamed("Filesystem")
> 
> Does any of the above make sense?  I do think it's worth supporting, else
> there is a potential scalability issue.    And it probably is worth
> considering as part of the design of the GUI.
> 
> But let me know your thoughts...
> 
> Dan
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Fri May 20 10:52:00 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Fri, 20 May 2005 08:52:00 GMT
Subject: [Rcpviewer-contributors] multiple meta-models & sessions
Message-ID: <Zen-1DZ3Ee-0008Oe-9h@pythagoras.zen.co.uk>

Let me try to explain a little better and reassure.

The vast majority of RCP apps I would see as having only a single instance of Domain (or think of as its old name of MetaModel if you like).  This would be accessible via a singleton, eg Domain.instance(), equivalent to Domain.instanceFor("default").

This single Domain instance would give rise to a single ISession instance.  All POJO/IDomainObjects in that session would be transparently navigable, persisted and rendered.

And for most RCP apps, this is the end of the story.

But I foresee a small class of apps where we have multiple domains and - for legacy or technology reasons - it isn't possible to provide transparent persistence.  For example, there is no 2 phase commit between a filesystem and an RDBMS.  So in this case the co-ordination between such domains is done by the POJO itself.

To make this concrete: we might have a Communication POJO that records some incoming correspondence from a customer.  This is in the "default" domain, stored in an RDBMS and rendered using the RCPviewer default rendering.  We might also have a document imaging system that provides access to a TIFF of said document; this represents an "imaging" domain.  The Communication POJO (in the "default" domain) would hold a value or key to lookup the TIFF object (in the "imaging" domain) - but not a reference to the TIFF object itself.  From the point of view of RCPviewer, it would still deal with the TIFF using an IDomainObject.  What we of course want is that the UI representation of this particular IDomainObject would be different - it would show the TIFF.  To accomplish this we install both an IDomainAnalyzer (for the "imaging" domain) and some custom view extension to the UI.  The IDomainAnalyzer injects additional semantics into the IDomainObject representing the TIFF, while the UI extension reads these semantics and use it to render the backing TIFF using some appropriate view.

To be honest, this stuff is some way down the line.  The reason I got to thinking about it was just how to access the Domain instance from both regular objects as well as aspects.

For now, just work on the simple case where we have a single "default" domain, so that Domain is indeed a singleton.

Hope that clears things up a tiny bit.
Dan

---
Mike Evans <mike.evans at incremental.eu.com> wrote :

> Dan gets the first sad face of the project for making my head hurt.
> 
> I thought that a 'domain' would encapsulate the entire universe of 
> types and objects that an RcpViewer app deals with. This made sense - 
> within the domain's ISession, all instantiated objects would reachable 
> one way or the other.
> 
> If we now have multiple ISession's, they rather loose their purpose.  If 
> the object itself has to give the application all its references the 
> ISession is reduced to a helper class.  Unless we have some sort of 
> uber-session that encapsulates all other sessions - and then we are back 
> to where we started.
> 
> Clearly I have not given this the thought that Dan has, but to me 
> multiple domains/sessions smells wrong.
> 
> Mike E.
> 
> 
> 
> Dan Haywood wrote:
> 
> > Opinions, please on the following:
> > 
> > At the moment I've been presuming that a metamodel will be instantiated
> just
> > once within a client-side JVM.  Its contents are IDomainClasses: the
> > relationship between MetaModel and IDomainClass is 1:m bidirectional.
> > 
> > Similarly, there is an ISession that contains the IDomainObjects that have
> > been resolved and are known about for this client.  Again 1:m
> bidirectional.
> > Every IDomainObject knows its IDomainClass (m:1 unidirectional).  I've
> also
> > just realized that really an ISession is an instantiation of a MetaModel,
> so
> > probably should reference it (1:1 unidirectional).
> > 
> > The following summarizes this (use a fixed size font!):
> > 
> > Session       (1) -> (1) MetaModel
> >   ^ (1)                      ^ (1)
> >   |                          |
> >   V (m)                      V (m)
> > IDomainObject (m) -> (1) IDomainClass
> > 
> > 
> > Now, I've been considering allowing multiple metamodels, and thus multiple
> > sessions, to be instantiated client side.  As an example, consider an RCP
> > app for bug tracking.  I can think of perhaps 3 domains (= metamodels):
> > - one representing the bug reports, priorities, issues, problems,
> > developers, releases and so forth.  This is the "core" domain would
> probably
> > be persisted using an RDBMS or EJB3.
> > - one representing say a chat room app, with chat room, message,
> > subscription etc.  When a priority #1 bug report comes in then a message
> can
> > be sent to a corresponding chat room.  This domain might not have any
> > persistence other than an in-memory representation held server-side.
> > - one representing the code base, with files, branches, tags and so forth.
> > This could be implemented using a persistent object store that delegates
> to
> > Subversion
> > 
> > Another example:
> > - Customer domain, eg for orders
> > - Filesystem domain, for maintaining any correspondence received from them
> > (a bit like I see in Mike's EPIC application)
> > 
> > As another final (hackneyed) example, consider a library.  A couple of
> > domains might be:
> > - the loan management domain (books, titles, loans, reservations)
> > - the stock management domain (stock items)
> > 
> > My simplifying assumption is that a single IDomainObject appears only in a
> > single domain.  So a Book in the loan domain is not the same object as a
> > Stock in the stock management domain.  However, a Book would know that it
> is
> > Stock, and so would have a reference to an IDomainObject whose
> IDomainClass
> > belonged to a different meta-model.
> > 
> > This then starts to firm up (in my mind) what an ISession is: it's a
> > collection of objects where the application can transparently traverse
> from
> > one object to another ("walk the object graph").  If one has a reference
> to
> > an object in another domain, then the responsibility for traversing the
> > graph moves to the domain object itself:  typically it would use a lookup
> > method (eg Book would use its stock_item_ref to look up its corresponding
> > Stock object).
> > 
> > What then are the implications for the GUI?  My thinking is perhaps to use
> a
> > label or icon to represent the domain.  And probably also that the
> "objects"
> > view (the LHS of Mike's spike, more-or-less) probably would have multiple
> > tabs, one for each domain.
> > 
> > And what are the implications for the programming model?  I'm thinking
> > perhaps of introducing an optional @MetaModel annotation on classes.  If
> > missing, then the class is presumed to live in the "default" metamodel -
> > most RCP apps will only need to support a single domain.  But if present,
> it
> > would indicate the name of the metamodel.
> > 
> > @MetaModel("Filesystem")
> > public class WordDoc { ... }
> > 
> > @MetaModel("InstantMessaging")
> > public class Message { ... }
> > 
> > There would then be a hash of metamodels, held as a singleton, eg:
> > MetaModel.instanceNamed("Filesystem")
> > 
> > Does any of the above make sense?  I do think it's worth supporting, else
> > there is a potential scalability issue.    And it probably is worth
> > considering as part of the design of the GUI.
> > 
> > But let me know your thoughts...
> > 
> > Dan
> > 
> > 
> > 
> > _______________________________________________
> > Rcpviewer-contributors mailing list
> > Rcpviewer-contributors at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From emorning at yahoo.com  Thu May 26 12:37:21 2005
From: emorning at yahoo.com (ted stockwell)
Date: Thu, 26 May 2005 05:37:21 -0500
Subject: [Rcpviewer-contributors] mikespike3 & mikespike3-acme
In-Reply-To: <428D92A5.4050001@incremental.eu.com>
References: <428D92A5.4050001@incremental.eu.com>
Message-ID: <4295A6E1.4030605@yahoo.com>

Mike Evans wrote:

> My third little spike is complete.
> It suggests a base mechanism for GUI generation.
> For review - most of the info is in the wiki page whose content I 
> attach below to save a download of the whole spike.
>
> Mike E.
>

Good job Mike!
I like your approach overall and don't see any particular  flaws in it.

Have just one question...
I'm not sure if the mikespike3-acme plugin is working or if I am doing 
something wrong.
I can see that mikespike3-acme is contributing an extension to the 
mikespike3.editorContentBuilder extension point.
Therefore I expected to see "Blue Form" to show up on the list of 
editors I can use to open an object.
However, that bit is not working for me, I get only the 'Default Form'.
I am including the mikespike3-acme plugin in my .launch.

 >>
Note that I follow the standard Eclipse approach of offering a default 
Editor for any particular type (dbl-click or 'open' menu option) or a 
list of other options via the 'open with' menu option.  Whatever option 
is selected becomes the default for that type).
<<
I like this idea.
One thing I don't like about the Eclipse approach is that I have to 
close an editor in order to open an object in a different editor.
I use JasperAssistant to create JasperReports, I am constantly flipping 
between the text editor and the JasperAssistant GUI editor when creating 
JasperReport designs, and it's a PITA to have to close the text editor 
and then open the JasperAssistant GUI.
I would be nice if there were some convenient UI mechanism to switch 
editors.



From mike.evans at incremental.eu.com  Thu May 26 13:22:16 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Thu, 26 May 2005 12:22:16 +0100
Subject: [Rcpviewer-contributors] mikespike3 & mikespike3-acme
In-Reply-To: <4295A6E1.4030605@yahoo.com>
References: <428D92A5.4050001@incremental.eu.com> <4295A6E1.4030605@yahoo.com>
Message-ID: <4295B168.3060105@incremental.eu.com>

Hi Ted,

Bit busy at the moment but my machine is currently running through 
Epic's GUI tests which take 5 minutes or so, so I have that long.

The mechanism is deliberately simple.  Glad you approve.
Just to check - the blue form content builder is only isApplicable() for 
one of the two bean classes.  Remember the class itself  decides this - 
not the xml config.  Are you sure you have tried both bean classes?  If 
so I have a probelm and will take a look at it.

Switching mechanism is a good idea.  We could build it in as a dynamic 
base Editor class action.

BTW: ( ... tests are still running ...), that brings up another thought. 
  One of Epic's eccentricities is that there is no application-wide 
toolbar (forget the screenshots - I'll update those).  I found it 
redundant as I much prefer each form editor to use its own toolbar - to 
me this keeps the user focussed (and provides for much simpler coding!) 
Any thoughts with regard to RcpViewer?

Mike E.



ted stockwell wrote:

> Mike Evans wrote:
> 
>> My third little spike is complete.
>> It suggests a base mechanism for GUI generation.
>> For review - most of the info is in the wiki page whose content I 
>> attach below to save a download of the whole spike.
>>
>> Mike E.
>>
> 
> Good job Mike!
> I like your approach overall and don't see any particular  flaws in it.
> 
> Have just one question...
> I'm not sure if the mikespike3-acme plugin is working or if I am doing 
> something wrong.
> I can see that mikespike3-acme is contributing an extension to the 
> mikespike3.editorContentBuilder extension point.
> Therefore I expected to see "Blue Form" to show up on the list of 
> editors I can use to open an object.
> However, that bit is not working for me, I get only the 'Default Form'.
> I am including the mikespike3-acme plugin in my .launch.
> 
>  >>
> Note that I follow the standard Eclipse approach of offering a default 
> Editor for any particular type (dbl-click or 'open' menu option) or a 
> list of other options via the 'open with' menu option.  Whatever option 
> is selected becomes the default for that type).
> <<
> I like this idea.
> One thing I don't like about the Eclipse approach is that I have to 
> close an editor in order to open an object in a different editor.
> I use JasperAssistant to create JasperReports, I am constantly flipping 
> between the text editor and the JasperAssistant GUI editor when creating 
> JasperReport designs, and it's a PITA to have to close the text editor 
> and then open the JasperAssistant GUI.
> I would be nice if there were some convenient UI mechanism to switch 
> editors.
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From emorning at yahoo.com  Thu May 26 13:35:27 2005
From: emorning at yahoo.com (ted stockwell)
Date: Thu, 26 May 2005 06:35:27 -0500
Subject: [Rcpviewer-contributors] multiple meta-models & sessions
In-Reply-To: <LGEELLOAEBMLCOGIKLMKOEMADCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKOEMADCAA.dan@haywood-associates.co.uk>
Message-ID: <4295B47F.4090805@yahoo.com>

Hi Dan,

I think that your concept of MetaModel is roughly equivalent to EMF's 
concept of ResourceSet.
I see a need for multiple MetaModels in very sophisticated applications.
I would use multiple MetaModels when my application needs to share data 
other applications.  I would use a MetaModel to abstract the access to 
those other applications.

So for instance, imagine that I develop a bus scheduling application for 
schools and that the school already has an administration system that 
contains all the data for all students.
I would develop a plugin for my bus scheduling application that wraps 
access to the administration application by making the data in the 
administration application available via a MetaModel.
The extra work expended in abstracting access to the administration 
application will pay off in being able to develop compatible 
administration system plugins for other administration systems and thus 
being able to hook up my bus scheduling application to any 
administration system used by other schools.




Dan Haywood wrote:

>Opinions, please on the following:
>
>At the moment I've been presuming that a metamodel will be instantiated just
>once within a client-side JVM.  Its contents are IDomainClasses: the
>relationship between MetaModel and IDomainClass is 1:m bidirectional.
>
>Similarly, there is an ISession that contains the IDomainObjects that have
>been resolved and are known about for this client.  Again 1:m bidirectional.
>Every IDomainObject knows its IDomainClass (m:1 unidirectional).  I've also
>just realized that really an ISession is an instantiation of a MetaModel, so
>probably should reference it (1:1 unidirectional).
>
>The following summarizes this (use a fixed size font!):
>
>Session       (1) -> (1) MetaModel
>  ^ (1)                      ^ (1)
>  |                          |
>  V (m)                      V (m)
>IDomainObject (m) -> (1) IDomainClass
>
>
>Now, I've been considering allowing multiple metamodels, and thus multiple
>sessions, to be instantiated client side.  As an example, consider an RCP
>app for bug tracking.  I can think of perhaps 3 domains (= metamodels):
>- one representing the bug reports, priorities, issues, problems,
>developers, releases and so forth.  This is the "core" domain would probably
>be persisted using an RDBMS or EJB3.
>- one representing say a chat room app, with chat room, message,
>subscription etc.  When a priority #1 bug report comes in then a message can
>be sent to a corresponding chat room.  This domain might not have any
>persistence other than an in-memory representation held server-side.
>- one representing the code base, with files, branches, tags and so forth.
>This could be implemented using a persistent object store that delegates to
>Subversion
>
>Another example:
>- Customer domain, eg for orders
>- Filesystem domain, for maintaining any correspondence received from them
>(a bit like I see in Mike's EPIC application)
>
>As another final (hackneyed) example, consider a library.  A couple of
>domains might be:
>- the loan management domain (books, titles, loans, reservations)
>- the stock management domain (stock items)
>
>My simplifying assumption is that a single IDomainObject appears only in a
>single domain.  So a Book in the loan domain is not the same object as a
>Stock in the stock management domain.  However, a Book would know that it is
>Stock, and so would have a reference to an IDomainObject whose IDomainClass
>belonged to a different meta-model.
>
>This then starts to firm up (in my mind) what an ISession is: it's a
>collection of objects where the application can transparently traverse from
>one object to another ("walk the object graph").  If one has a reference to
>an object in another domain, then the responsibility for traversing the
>graph moves to the domain object itself:  typically it would use a lookup
>method (eg Book would use its stock_item_ref to look up its corresponding
>Stock object).
>
>What then are the implications for the GUI?  My thinking is perhaps to use a
>label or icon to represent the domain.  And probably also that the "objects"
>view (the LHS of Mike's spike, more-or-less) probably would have multiple
>tabs, one for each domain.
>
>And what are the implications for the programming model?  I'm thinking
>perhaps of introducing an optional @MetaModel annotation on classes.  If
>missing, then the class is presumed to live in the "default" metamodel -
>most RCP apps will only need to support a single domain.  But if present, it
>would indicate the name of the metamodel.
>
>@MetaModel("Filesystem")
>public class WordDoc { ... }
>
>@MetaModel("InstantMessaging")
>public class Message { ... }
>
>There would then be a hash of metamodels, held as a singleton, eg:
>MetaModel.instanceNamed("Filesystem")
>
>Does any of the above make sense?  I do think it's worth supporting, else
>there is a potential scalability issue.    And it probably is worth
>considering as part of the design of the GUI.
>
>But let me know your thoughts...
>
>Dan
>
>
>
>_______________________________________________
>Rcpviewer-contributors mailing list
>Rcpviewer-contributors at lists.berlios.de
>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>
>  
>



From emorning at yahoo.com  Thu May 26 14:08:05 2005
From: emorning at yahoo.com (ted stockwell)
Date: Thu, 26 May 2005 07:08:05 -0500
Subject: [Rcpviewer-contributors] Toolbars
In-Reply-To: <4295B168.3060105@incremental.eu.com>
References: <428D92A5.4050001@incremental.eu.com> <4295A6E1.4030605@yahoo.com> <4295B168.3060105@incremental.eu.com>
Message-ID: <4295BC25.5030800@yahoo.com>

Mike Evans wrote:

> Hi Ted,
>
> Bit busy at the moment but my machine is currently running through 
> Epic's GUI tests which take 5 minutes or so, so I have that long.

I'm jealous.  I don't have GUI tests for our product, I have only 
JUnit-based functional tests.  What do you use for GUI testing?


> BTW: ( ... tests are still running ...), that brings up another 
> thought.  One of Epic's eccentricities is that there is no 
> application-wide toolbar (forget the screenshots - I'll update 
> those).  I found it redundant as I much prefer each form editor to use 
> its own toolbar - to me this keeps the user focussed (and provides for 
> much simpler coding!) Any thoughts with regard to RcpViewer?


My personal preference is to have just one application-wide toolbar.  I 
prefer the 'one stop shopping' that the main toolbar affords me.  I 
don't like to have to scan the screen for the toolbar with the button 
that I want.
In our application I have several toolbar buttons that always stay on 
the toolbar; Save, Refresh, Print, etc.
Editor actions are added to the main toolbar as the active editor 
changes.  I use eclipse extension points exclusively to manage the main 
menu and toolbar.  I like that I don't have any code in my editors to 
manage menus, toolbars, or context menus.


That said, I don't know what the 'right' thing is.  I think the 'right' 
approach would be the approach that would score highest on usability 
tests, but I don't have a feel for which approach that is.

---------------------
Given that we have different preferences perhaps the answer is that the 
GUI should be configurable to use either approach.
You could implement your spike to use the editor toolbar and then I 
could research how to dynamically switch between using editor toolbars 
and the application toolbar.

-------------------
OR.... perhaps the answer is that the domain object should specify 
whether the action should go on the editor toolbar or the application 
toolbar.
If the domain object does not specify which toolbar to use then the GUI 
should use the 'default' toolbar.
The 'default' toolbar could be configurable.  Some developers might 
prefer to make the application toolbar the default toolbar and some 
developers would prefer to use the editor toolbar as the default.


From dan at haywood-associates.co.uk  Thu May 26 14:36:55 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 26 May 2005 12:36:55 GMT
Subject: [Rcpviewer-contributors] Switching editors (was mikespike3 & mikespike3-acme)
Message-ID: <Zen-1DbHbb-00009F-Pp@heisenberg.zen.co.uk>

Hi Ted, Mike
Busy on the mailing list this morning!  I feel all happy and warm (especially since Liverpool won the cup, yeah!  Ted fyi: that's a quite famous soccer team :-)

Regards switching editors, what do we feel about using multiple tabs? eg the PDE manifest editor has the form views or edit the raw text in plugin.xml / manifest.MF.  Thus, each specialist rendering would contribute an extra tab via some extension point.

For example, my idea of an accessibility editor, whereby one could in a Smalltalk-like way invoke actions on objects, would be separate tab.

Seems to me this is doing it "the Eclipse way" - thoughts?
Dan
---
Mike Evans <mike.evans at incremental.eu.com> wrote :

> Hi Ted,
> 
> Bit busy at the moment but my machine is currently running through 
> Epic's GUI tests which take 5 minutes or so, so I have that long.
> 
> The mechanism is deliberately simple.  Glad you approve.
> Just to check - the blue form content builder is only isApplicable() for 
> one of the two bean classes.  Remember the class itself  decides this - 
> not the xml config.  Are you sure you have tried both bean classes?  If 
> so I have a probelm and will take a look at it.
> 
> Switching mechanism is a good idea.  We could build it in as a dynamic 
> base Editor class action.
> 
> BTW: ( ... tests are still running ...), that brings up another thought. 
>   One of Epic's eccentricities is that there is no application-wide 
> toolbar (forget the screenshots - I'll update those).  I found it 
> redundant as I much prefer each form editor to use its own toolbar - to 
> me this keeps the user focussed (and provides for much simpler coding!) 
> Any thoughts with regard to RcpViewer?
> 
> Mike E.
> 
> 
> 
> ted stockwell wrote:
> 
> > Mike Evans wrote:
> > 
> >> My third little spike is complete.
> >> It suggests a base mechanism for GUI generation.
> >> For review - most of the info is in the wiki page whose content I 
> >> attach below to save a download of the whole spike.
> >>
> >> Mike E.
> >>
> > 
> > Good job Mike!
> > I like your approach overall and don't see any particular  flaws in it.
> > 
> > Have just one question...
> > I'm not sure if the mikespike3-acme plugin is working or if I am doing 
> > something wrong.
> > I can see that mikespike3-acme is contributing an extension to the 
> > mikespike3.editorContentBuilder extension point.
> > Therefore I expected to see "Blue Form" to show up on the list of 
> > editors I can use to open an object.
> > However, that bit is not working for me, I get only the 'Default Form'.
> > I am including the mikespike3-acme plugin in my .launch.
> > 
> >  >>
> > Note that I follow the standard Eclipse approach of offering a default 
> > Editor for any particular type (dbl-click or 'open' menu option) or a 
> > list of other options via the 'open with' menu option.  Whatever option 
> > is selected becomes the default for that type).
> > 
> > I like this idea.
> > One thing I don't like about the Eclipse approach is that I have to 
> > close an editor in order to open an object in a different editor.
> > I use JasperAssistant to create JasperReports, I am constantly flipping 
> > between the text editor and the JasperAssistant GUI editor when creating 
> > JasperReport designs, and it's a PITA to have to close the text editor 
> > and then open the JasperAssistant GUI.
> > I would be nice if there were some convenient UI mechanism to switch 
> > editors.
> > 
> > _______________________________________________
> > Rcpviewer-contributors mailing list
> > Rcpviewer-contributors at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From dan at haywood-associates.co.uk  Thu May 26 14:40:56 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 26 May 2005 12:40:56 GMT
Subject: [Rcpviewer-contributors] multiple meta-models & sessions
Message-ID: <Zen-1DbHfU-00073q-6n@pythagoras.zen.co.uk>

Ted, 
That's right, you've got it.  Multiple metamodels are applicable only for sophisticated applications.

I think I did a later post on the mailing list in answer to Mike's review comments, but from what you've said I think we're on the same page.

I suspect you are right about the EMF ResourceSet.  I think I'm using a single EMF ResourceSet at the moment, so I'll probably refactor.

By the way, MetaModel is now called Domain (as you've probably picked up).  I still love the idea that I'm doing domain driven design in the domain of - erm - domain design.

Dan
--------

Ted Stockwell <emorning at yahoo.com> wrote :

> Hi Dan,
> 
> I think that your concept of MetaModel is roughly equivalent to EMF's 
> concept of ResourceSet.
> I see a need for multiple MetaModels in very sophisticated applications.
> I would use multiple MetaModels when my application needs to share data 
> other applications.  I would use a MetaModel to abstract the access to 
> those other applications.
> 
> So for instance, imagine that I develop a bus scheduling application for 
> schools and that the school already has an administration system that 
> contains all the data for all students.
> I would develop a plugin for my bus scheduling application that wraps 
> access to the administration application by making the data in the 
> administration application available via a MetaModel.
> The extra work expended in abstracting access to the administration 
> application will pay off in being able to develop compatible 
> administration system plugins for other administration systems and thus 
> being able to hook up my bus scheduling application to any 
> administration system used by other schools.
> 
> 
> 
> 
> Dan Haywood wrote:
> 
> >Opinions, please on the following:
> >
> >At the moment I've been presuming that a metamodel will be instantiated
> just
> >once within a client-side JVM.  Its contents are IDomainClasses: the
> >relationship between MetaModel and IDomainClass is 1:m bidirectional.
> >
> >Similarly, there is an ISession that contains the IDomainObjects that have
> >been resolved and are known about for this client.  Again 1:m
> bidirectional.
> >Every IDomainObject knows its IDomainClass (m:1 unidirectional).  I've also
> >just realized that really an ISession is an instantiation of a MetaModel,
> so
> >probably should reference it (1:1 unidirectional).
> >
> >The following summarizes this (use a fixed size font!):
> >
> >Session       (1) -> (1) MetaModel
> >  ^ (1)                      ^ (1)
> >  |                          |
> >  V (m)                      V (m)
> >IDomainObject (m) -> (1) IDomainClass
> >
> >
> >Now, I've been considering allowing multiple metamodels, and thus multiple
> >sessions, to be instantiated client side.  As an example, consider an RCP
> >app for bug tracking.  I can think of perhaps 3 domains (= metamodels):
> >- one representing the bug reports, priorities, issues, problems,
> >developers, releases and so forth.  This is the "core" domain would
> probably
> >be persisted using an RDBMS or EJB3.
> >- one representing say a chat room app, with chat room, message,
> >subscription etc.  When a priority #1 bug report comes in then a message
> can
> >be sent to a corresponding chat room.  This domain might not have any
> >persistence other than an in-memory representation held server-side.
> >- one representing the code base, with files, branches, tags and so forth.
> >This could be implemented using a persistent object store that delegates to
> >Subversion
> >
> >Another example:
> >- Customer domain, eg for orders
> >- Filesystem domain, for maintaining any correspondence received from them
> >(a bit like I see in Mike's EPIC application)
> >
> >As another final (hackneyed) example, consider a library.  A couple of
> >domains might be:
> >- the loan management domain (books, titles, loans, reservations)
> >- the stock management domain (stock items)
> >
> >My simplifying assumption is that a single IDomainObject appears only in a
> >single domain.  So a Book in the loan domain is not the same object as a
> >Stock in the stock management domain.  However, a Book would know that it
> is
> >Stock, and so would have a reference to an IDomainObject whose IDomainClass
> >belonged to a different meta-model.
> >
> >This then starts to firm up (in my mind) what an ISession is: it's a
> >collection of objects where the application can transparently traverse from
> >one object to another ("walk the object graph").  If one has a reference to
> >an object in another domain, then the responsibility for traversing the
> >graph moves to the domain object itself:  typically it would use a lookup
> >method (eg Book would use its stock_item_ref to look up its corresponding
> >Stock object).
> >
> >What then are the implications for the GUI?  My thinking is perhaps to use
> a
> >label or icon to represent the domain.  And probably also that the
> "objects"
> >view (the LHS of Mike's spike, more-or-less) probably would have multiple
> >tabs, one for each domain.
> >
> >And what are the implications for the programming model?  I'm thinking
> >perhaps of introducing an optional @MetaModel annotation on classes.  If
> >missing, then the class is presumed to live in the "default" metamodel -
> >most RCP apps will only need to support a single domain.  But if present,
> it
> >would indicate the name of the metamodel.
> >
> >@MetaModel("Filesystem")
> >public class WordDoc { ... }
> >
> >@MetaModel("InstantMessaging")
> >public class Message { ... }
> >
> >There would then be a hash of metamodels, held as a singleton, eg:
> >MetaModel.instanceNamed("Filesystem")
> >
> >Does any of the above make sense?  I do think it's worth supporting, else
> >there is a potential scalability issue.    And it probably is worth
> >considering as part of the design of the GUI.
> >
> >But let me know your thoughts...
> >
> >Dan
> >
> >
> >
> >_______________________________________________
> >Rcpviewer-contributors mailing list
> >Rcpviewer-contributors at lists.berlios.de
> >http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >
> >  
> >
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From dan at haywood-associates.co.uk  Thu May 26 14:45:58 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 26 May 2005 12:45:58 GMT
Subject: [Rcpviewer-contributors] Toolbars
Message-ID: <Zen-1DbHkM-0004oM-OA@heisenberg.zen.co.uk>

It'd be great to have both approaches, starting off with Mike's approach.

For what it's worth, the "official" NO viewpoint would be to put the behaviour near the object, which is more akin to Mike's view: behaviourally complete objects.

On the other hand I still love Ted's screenshot (from Quicken, was it?) with the actions in a separate view.  If that's an easier thing to do (some sort of listener on the currently active editor?) then I'd very much like to see that.  It'll probably need more metadata to drive it which will help develop the programming model too.

Dan

---
Ted Stockwell <emorning at yahoo.com> wrote :

> Mike Evans wrote:
> 
> > Hi Ted,
> >
> > Bit busy at the moment but my machine is currently running through 
> > Epic's GUI tests which take 5 minutes or so, so I have that long.
> 
> I'm jealous.  I don't have GUI tests for our product, I have only 
> JUnit-based functional tests.  What do you use for GUI testing?
> 
> 
> > BTW: ( ... tests are still running ...), that brings up another 
> > thought.  One of Epic's eccentricities is that there is no 
> > application-wide toolbar (forget the screenshots - I'll update 
> > those).  I found it redundant as I much prefer each form editor to use 
> > its own toolbar - to me this keeps the user focussed (and provides for 
> > much simpler coding!) Any thoughts with regard to RcpViewer?
> 
> 
> My personal preference is to have just one application-wide toolbar.  I 
> prefer the 'one stop shopping' that the main toolbar affords me.  I 
> don't like to have to scan the screen for the toolbar with the button 
> that I want.
> In our application I have several toolbar buttons that always stay on 
> the toolbar; Save, Refresh, Print, etc.
> Editor actions are added to the main toolbar as the active editor 
> changes.  I use eclipse extension points exclusively to manage the main 
> menu and toolbar.  I like that I don't have any code in my editors to 
> manage menus, toolbars, or context menus.
> 
> 
> That said, I don't know what the 'right' thing is.  I think the 'right' 
> approach would be the approach that would score highest on usability 
> tests, but I don't have a feel for which approach that is.
> 
> ---------------------
> Given that we have different preferences perhaps the answer is that the 
> GUI should be configurable to use either approach.
> You could implement your spike to use the editor toolbar and then I 
> could research how to dynamically switch between using editor toolbars 
> and the application toolbar.
> 
> -------------------
> OR.... perhaps the answer is that the domain object should specify 
> whether the action should go on the editor toolbar or the application 
> toolbar.
> If the domain object does not specify which toolbar to use then the GUI 
> should use the 'default' toolbar.
> The 'default' toolbar could be configurable.  Some developers might 
> prefer to make the application toolbar the default toolbar and some 
> developers would prefer to use the editor toolbar as the default.
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From emorning at yahoo.com  Thu May 26 15:18:03 2005
From: emorning at yahoo.com (ted stockwell)
Date: Thu, 26 May 2005 08:18:03 -0500
Subject: [Rcpviewer-contributors] Toolbars
In-Reply-To: <Zen-1DbHkM-0004oM-OA@heisenberg.zen.co.uk>
References: <Zen-1DbHkM-0004oM-OA@heisenberg.zen.co.uk>
Message-ID: <4295CC8B.6050804@yahoo.com>

Dan Haywood wrote:

>On the other hand I still love Ted's screenshot (from Quicken, was it?) with the actions in a separate view.  
>

I imagine that the actions in the Action view might also have associated 
buttons on the toolbar (be it the application toolbar or the editor 
toolbar) and/or associated menus on the main menu.
This is the same concept as having the File | Save menu item on the main 
menu AND having a button on the toolbar that invokes the same action.

-------------------

BTW, QuickBooks  (where I stole the idea for the Actions view) has three 
ways to invoke the same action.
All the actions appear on the main menu AND in the Actions view AND as a 
context menu on the 'Home Page'.
The 'HomePage' displays a nifty diagram of the dataflows of the typical 
business and you can right-click somewhere on the diagram and invoke 
actions like "Create an Invoice".


From dan at haywood-associates.co.uk  Thu May 26 15:24:57 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 26 May 2005 13:24:57 GMT
Subject: [Rcpviewer-contributors] Toolbars
Message-ID: <Zen-1DbIM5-0005De-Ad@pythagoras.zen.co.uk>

Ted Stockwell <emorning at yahoo.com> wrote :

> The 'HomePage' displays a nifty diagram of the dataflows of the typical 
> business and you can right-click somewhere on the diagram and invoke 
> actions like "Create an Invoice".


Here's a thought experiment: what is the domain object being displayed on that HomePage view? An instance of Workflow, perhaps?  And what information would need to be in the metamodel in order for a custom viewer/editor in RcpViewer to display it just like Quicken does?

In 18 months time, perhaps we'll know :-)






From mike.evans at incremental.eu.com  Thu May 26 19:05:45 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Thu, 26 May 2005 18:05:45 +0100
Subject: [Fwd: Re: [Rcpviewer-contributors] Toolbars]
Message-ID: <429601E9.4000101@incremental.eu.com>


-------- Original Message --------
Subject: Re: [Rcpviewer-contributors] Toolbars
Date: Thu, 26 May 2005 18:05:23 +0100
From: Mike Evans <mike.evans at incremental.eu.com>
To: Dan Haywood <dan at haywood-associates.co.uk>
References: <Zen-1DbHkM-0004oM-OA at heisenberg.zen.co.uk>

To be honest standard windows design would be to have a single toolbar
as per Ted's implementation.  I had problems with this in terms of the
'liveness' of the actions (e.g ensuring the save option is enabled as
soon as a change has been made) but it sounds like Ted has this one solved.

Both approaches with the decision made by the metadata is a good design
goal though.

Mike E.



Dan Haywood wrote:

> It'd be great to have both approaches, starting off with Mike's approach.
> 
> For what it's worth, the "official" NO viewpoint would be to put the behaviour near the object, which is more akin to Mike's view: behaviourally complete objects.
> 
> On the other hand I still love Ted's screenshot (from Quicken, was it?) with the actions in a separate view.  If that's an easier thing to do (some sort of listener on the currently active editor?) then I'd very much like to see that.  It'll probably need more metadata to drive it which will help develop the programming model too.
> 
> Dan
> 
> ---
> Ted Stockwell <emorning at yahoo.com> wrote :
> 
> 
>>Mike Evans wrote:
>>
>>
>>>Hi Ted,
>>>
>>>Bit busy at the moment but my machine is currently running through 
>>>Epic's GUI tests which take 5 minutes or so, so I have that long.
>>
>>I'm jealous.  I don't have GUI tests for our product, I have only 
>>JUnit-based functional tests.  What do you use for GUI testing?
>>
>>
>>
>>>BTW: ( ... tests are still running ...), that brings up another 
>>>thought.  One of Epic's eccentricities is that there is no 
>>>application-wide toolbar (forget the screenshots - I'll update 
>>>those).  I found it redundant as I much prefer each form editor to use 
>>>its own toolbar - to me this keeps the user focussed (and provides for 
>>>much simpler coding!) Any thoughts with regard to RcpViewer?
>>
>>
>>My personal preference is to have just one application-wide toolbar.  I 
>>prefer the 'one stop shopping' that the main toolbar affords me.  I 
>>don't like to have to scan the screen for the toolbar with the button 
>>that I want.
>>In our application I have several toolbar buttons that always stay on 
>>the toolbar; Save, Refresh, Print, etc.
>>Editor actions are added to the main toolbar as the active editor 
>>changes.  I use eclipse extension points exclusively to manage the main 
>>menu and toolbar.  I like that I don't have any code in my editors to 
>>manage menus, toolbars, or context menus.
>>
>>
>>That said, I don't know what the 'right' thing is.  I think the 'right' 
>>approach would be the approach that would score highest on usability 
>>tests, but I don't have a feel for which approach that is.
>>
>>---------------------
>>Given that we have different preferences perhaps the answer is that the 
>>GUI should be configurable to use either approach.
>>You could implement your spike to use the editor toolbar and then I 
>>could research how to dynamically switch between using editor toolbars 
>>and the application toolbar.
>>
>>-------------------
>>OR.... perhaps the answer is that the domain object should specify 
>>whether the action should go on the editor toolbar or the application 
>>toolbar.
>>If the domain object does not specify which toolbar to use then the GUI 
>>should use the 'default' toolbar.
>>The 'default' toolbar could be configurable.  Some developers might 
>>prefer to make the application toolbar the default toolbar and some 
>>developers would prefer to use the editor toolbar as the default.
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> 
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Thu May 26 19:12:23 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Thu, 26 May 2005 18:12:23 +0100
Subject: [Rcpviewer-contributors] Toolbars
In-Reply-To: <4295BC25.5030800@yahoo.com>
References: <428D92A5.4050001@incremental.eu.com> <4295A6E1.4030605@yahoo.com> <4295B168.3060105@incremental.eu.com> <4295BC25.5030800@yahoo.com>
Message-ID: <42960377.3020809@incremental.eu.com>

Ted,

For GUI testing I wanted Epic to be able to test itself on the client 
site.  Hence, as usual, I hand-rolled something.  My admin plugin has a 
test function which is based on running JUnit internally.  Initially 
this was standard non-GUI tests but after a little work I can now 
more-or-less test most GUI functionality this way too.  It is 
essentially the same mechanism as test driven development but with a 
little more thought given to threading.
If you're interested I can go through the implementation with you.

Mike E.



ted stockwell wrote:

> Mike Evans wrote:
> 
>> Hi Ted,
>>
>> Bit busy at the moment but my machine is currently running through 
>> Epic's GUI tests which take 5 minutes or so, so I have that long.
> 
> 
> I'm jealous.  I don't have GUI tests for our product, I have only 
> JUnit-based functional tests.  What do you use for GUI testing?
> 
> 
>> BTW: ( ... tests are still running ...), that brings up another 
>> thought.  One of Epic's eccentricities is that there is no 
>> application-wide toolbar (forget the screenshots - I'll update 
>> those).  I found it redundant as I much prefer each form editor to use 
>> its own toolbar - to me this keeps the user focussed (and provides for 
>> much simpler coding!) Any thoughts with regard to RcpViewer?
> 
> 
> 
> My personal preference is to have just one application-wide toolbar.  I 
> prefer the 'one stop shopping' that the main toolbar affords me.  I 
> don't like to have to scan the screen for the toolbar with the button 
> that I want.
> In our application I have several toolbar buttons that always stay on 
> the toolbar; Save, Refresh, Print, etc.
> Editor actions are added to the main toolbar as the active editor 
> changes.  I use eclipse extension points exclusively to manage the main 
> menu and toolbar.  I like that I don't have any code in my editors to 
> manage menus, toolbars, or context menus.
> 
> 
> That said, I don't know what the 'right' thing is.  I think the 'right' 
> approach would be the approach that would score highest on usability 
> tests, but I don't have a feel for which approach that is.
> 
> ---------------------
> Given that we have different preferences perhaps the answer is that the 
> GUI should be configurable to use either approach.
> You could implement your spike to use the editor toolbar and then I 
> could research how to dynamically switch between using editor toolbars 
> and the application toolbar.
> 
> -------------------
> OR.... perhaps the answer is that the domain object should specify 
> whether the action should go on the editor toolbar or the application 
> toolbar.
> If the domain object does not specify which toolbar to use then the GUI 
> should use the 'default' toolbar.
> The 'default' toolbar could be configurable.  Some developers might 
> prefer to make the application toolbar the default toolbar and some 
> developers would prefer to use the editor toolbar as the default.
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From emorning at yahoo.com  Fri May 27 14:10:26 2005
From: emorning at yahoo.com (ted stockwell)
Date: Fri, 27 May 2005 07:10:26 -0500
Subject: [Rcpviewer-contributors] mikespike3, EMF, etc...
Message-ID: <42970E32.4030400@yahoo.com>

Hi All,

I'm impressed by Mike's last spike.  It's easy to understand and 
straightforward.  I think it's a good base on which to move forward with 
RCPViewer.
At this point I still intend to finish my spike (more on that below, 
that's optional reading ;-)) but I don't want to muddy the waters with 
my spike.  I can see that Mike's spike is a much better base on which to 
move forward than mine will be.

So that said, assuming that we move forward with Mike's spike, what are 
the next steps? 

I think it would be good to come up with several orthogonal areas of 
expansion that could be worked on separately by different developers.

I can think of a few general areas of expansion...
...add persistence to mikespike3.
...expand the default viewer layout capability
...create a sample metamodel for development purposes
...add validation functionality to mikespike3

I would be willing to work on any of the above.

I suggest that we create an official code branch from Mike's code.
Then each new capability should be developed as a 'spike'. 
Then, after the group has reviewed and approved a spike the new 
functionality be merged into the official code.


----------------------------------------

About my spike (or lack thereof)...

I am motivated to work on RCPViewer because I am trying to put together 
the technical architecture for a next generation Java ERP, basically the 
core architecture for the next generation of RPCSoftware's product.
I have identified several key things that our product really needs in 
order to be more successful (actually, these are things that I consider 
necessary to stay in business long term, otherwise the costs of 
developing, deploying, and managing systems will grow far beyond what 
small businesses can pay for).
Two of those things are...
...an Active Object Model.  We need to be able to more easily customize 
the product for specific customers, an active object model is key to 
being able to do this in a managable way.
...a DDUI (Domain-Driven User Interface).  We need to find a way to 
dramatically reduce the effort it takes to develop a good quality UI.  I 
hope RCPViewer will be the answer.

So, I think I came to RCPViewer from a different perspective than most.  
I need a DDUI that display objects from a domain model that is not 
determined until runtime.  Whereas for most everybody else the domain 
model is determined at compile time.  This is why I started with EMF.  
EMF will be the basis of my active object model.

So, my original thought was that RCPViewer would be a viewer for EMF 
objects.  That there would be an adapter to provide EMF-metadata for POJOs.
However, EMF is proving to be fairly cumbersome.  After seeing Mike's 
spike I can't see why RCPViewer should use EMF when the job can get done 
in a much simpler fashion.
So,  I intend to finish my spike because I MUST learn the ins and outs 
of EMF and I MUST have a DDUI that can display object instances from my 
active object model.
However, I not convinced that EMF is the best base on which to build 
RCPViewer.
After finishing my spike I will investigate how to use Mike's spike to 
view EMF-generated object instances.






From mike.evans at incremental.eu.com  Sat May 28 13:53:08 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sat, 28 May 2005 12:53:08 +0100
Subject: [Rcpviewer-contributors] Switching editors (was mikespike3 &
 mikespike3-acme)
In-Reply-To: <Zen-1DbHbb-00009F-Pp@heisenberg.zen.co.uk>
References: <Zen-1DbHbb-00009F-Pp@heisenberg.zen.co.uk>
Message-ID: <42985BA4.4030605@incremental.eu.com>

My thoughts wrt multiple tabs.
In mikespike3 we have a single base editor class which provides a single
page whose contents can be changed via the editorcontentbuilder
extension point.  The default content is our default / example form editor.
Standard behaviour is this single editor / page per instance opened.

However setting a 'debug' or 'advanced' mode might well open additional
tabs on the base editor class.  This could include Dan's accessibility
editor, and/or for instance, an echo of debug output in a console.

The crucial thing here is that additional tabs are entirely controlled
by ourselves.  We do not offer an extension point for other developers
to add their own additional tabs.  This raises the spectre of multiple,
unknown, GUI components simultaneously updating the same object
instance.  I fear the complexity of the contract we would have to expect
said developers to stick to - and the complexity of the defensive
programming we would have to put in place to enforce it.

Perhaps we will have a clearer idea once we/I actually start develping
the editor.

Mike E.



Dan Haywood wrote:
> Hi Ted, Mike
> Busy on the mailing list this morning!  I feel all happy and warm (especially since Liverpool won the cup, yeah!  Ted fyi: that's a quite famous soccer team :-)
> 
> Regards switching editors, what do we feel about using multiple tabs? eg the PDE manifest editor has the form views or edit the raw text in plugin.xml / manifest.MF.  Thus, each specialist rendering would contribute an extra tab via some extension point.
> 
> For example, my idea of an accessibility editor, whereby one could in a Smalltalk-like way invoke actions on objects, would be separate tab.
> 
> Seems to me this is doing it "the Eclipse way" - thoughts?
> Dan
> ---
> Mike Evans <mike.evans at incremental.eu.com> wrote :
> 
> 
>>Hi Ted,
>>
>>Bit busy at the moment but my machine is currently running through 
>>Epic's GUI tests which take 5 minutes or so, so I have that long.
>>
>>The mechanism is deliberately simple.  Glad you approve.
>>Just to check - the blue form content builder is only isApplicable() for 
>>one of the two bean classes.  Remember the class itself  decides this - 
>>not the xml config.  Are you sure you have tried both bean classes?  If 
>>so I have a probelm and will take a look at it.
>>
>>Switching mechanism is a good idea.  We could build it in as a dynamic 
>>base Editor class action.
>>
>>BTW: ( ... tests are still running ...), that brings up another thought. 
>>  One of Epic's eccentricities is that there is no application-wide 
>>toolbar (forget the screenshots - I'll update those).  I found it 
>>redundant as I much prefer each form editor to use its own toolbar - to 
>>me this keeps the user focussed (and provides for much simpler coding!) 
>>Any thoughts with regard to RcpViewer?
>>
>>Mike E.
>>
>>
>>
>>ted stockwell wrote:
>>
>>
>>>Mike Evans wrote:
>>>
>>>
>>>>My third little spike is complete.
>>>>It suggests a base mechanism for GUI generation.
>>>>For review - most of the info is in the wiki page whose content I 
>>>>attach below to save a download of the whole spike.
>>>>
>>>>Mike E.
>>>>
>>>
>>>Good job Mike!
>>>I like your approach overall and don't see any particular  flaws in it.
>>>
>>>Have just one question...
>>>I'm not sure if the mikespike3-acme plugin is working or if I am doing 
>>>something wrong.
>>>I can see that mikespike3-acme is contributing an extension to the 
>>>mikespike3.editorContentBuilder extension point.
>>>Therefore I expected to see "Blue Form" to show up on the list of 
>>>editors I can use to open an object.
>>>However, that bit is not working for me, I get only the 'Default Form'.
>>>I am including the mikespike3-acme plugin in my .launch.
>>>
>>> >>
>>>Note that I follow the standard Eclipse approach of offering a default 
>>>Editor for any particular type (dbl-click or 'open' menu option) or a 
>>>list of other options via the 'open with' menu option.  Whatever option 
>>>is selected becomes the default for that type).
>>>
>>>I like this idea.
>>>One thing I don't like about the Eclipse approach is that I have to 
>>>close an editor in order to open an object in a different editor.
>>>I use JasperAssistant to create JasperReports, I am constantly flipping 
>>>between the text editor and the JasperAssistant GUI editor when creating 
>>>JasperReport designs, and it's a PITA to have to close the text editor 
>>>and then open the JasperAssistant GUI.
>>>I would be nice if there were some convenient UI mechanism to switch 
>>>editors.
>>>
>>>_______________________________________________
>>>Rcpviewer-contributors mailing list
>>>Rcpviewer-contributors at lists.berlios.de
>>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>>
>>>
>>
>>-- 
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> 
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com





From mike.evans at incremental.eu.com  Sat May 28 14:37:47 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sat, 28 May 2005 13:37:47 +0100
Subject: [Rcpviewer-contributors] mikespike3, EMF, etc...
In-Reply-To: <42970E32.4030400@yahoo.com>
References: <42970E32.4030400@yahoo.com>
Message-ID: <4298661B.8030006@incremental.eu.com>

The spike was designed for clarity rather than functionality - it was 
more of a demo than a technology investigation.  How clear it remains 
once we want it to do real things is another matter...  Nevertheless, 
thankyou Ted!

OK - next steps.
If we want the spike to be the base, two preparatory steps are required:
- rewrite it for a test driven approach
- use Dan's metamodel.
I suggest I do this asap.  That will be next Friday (3rd June) as I will 
be on a client site until Thursday completing my monthly release cycle. 
  However, as I reward to myself I have shaded in all of that Friday for 
RcpViewer.
Once this is done we can divide up into the different areas as suggested 
by Ted.  Regarding Ted's ideas:
- peristence: I have not given any thought to persistence so am happy to 
offer someone else that opportunity...
- expand default viewer : I quite fancy that
- sample metamodel : Dan?  As a thought, how complex is the Java 
Petstore  model?
- validation functionality : part of the model spec surely?

My other idea relates to Ted's discussion about his EMF plans. 
Interestingly, he has identified the same risks as I have wrt to small 
company software development - though his proposed solutions are bolder 
than mine (I am relying on the plugin concept and auto-updates).

The DDUI is obviously RcpViewer as we all understand it.  It is 
essentially an enabler for what he terms the 'active object model'.  Now 
if this model is static with respect to any single runtime instance (i.e 
generated once at startup) surely it is effectively the same thing as 
Dan is working on?  In which case can we not define a single contract / 
interface that the DDUI works against and 'on the other side' allow Ted 
and Dan to explore different ways of implementing that contract?  That 
would give us a clear division of work.
- Ted : model impl 1
- Dan : model impl 2
- Ted / Dan : agree common contract
- Mike : develop first client for this contract (gui)
- ? : develop second client for this contract (persistence)
I see the core work of this project actually being the generation of 
this contract - which will be the richer if it is developed in 
conjunction with multiple implementations.

Perhaps this is too much duplication for a small team - but perhaps a 
period of parallel, cooperative development would offer a better long 
term result?

Mike E.






ted stockwell wrote:

> Hi All,
> 
> I'm impressed by Mike's last spike.  It's easy to understand and 
> straightforward.  I think it's a good base on which to move forward with 
> RCPViewer.
> At this point I still intend to finish my spike (more on that below, 
> that's optional reading ;-)) but I don't want to muddy the waters with 
> my spike.  I can see that Mike's spike is a much better base on which to 
> move forward than mine will be.
> 
> So that said, assuming that we move forward with Mike's spike, what are 
> the next steps?
> I think it would be good to come up with several orthogonal areas of 
> expansion that could be worked on separately by different developers.
> 
> I can think of a few general areas of expansion...
> ...add persistence to mikespike3.
> ...expand the default viewer layout capability
> ...create a sample metamodel for development purposes
> ...add validation functionality to mikespike3
> 
> I would be willing to work on any of the above.
> 
> I suggest that we create an official code branch from Mike's code.
> Then each new capability should be developed as a 'spike'. Then, after 
> the group has reviewed and approved a spike the new functionality be 
> merged into the official code.
> 
> 
> ----------------------------------------
> 
> About my spike (or lack thereof)...
> 
> I am motivated to work on RCPViewer because I am trying to put together 
> the technical architecture for a next generation Java ERP, basically the 
> core architecture for the next generation of RPCSoftware's product.
> I have identified several key things that our product really needs in 
> order to be more successful (actually, these are things that I consider 
> necessary to stay in business long term, otherwise the costs of 
> developing, deploying, and managing systems will grow far beyond what 
> small businesses can pay for).
> Two of those things are...
> ...an Active Object Model.  We need to be able to more easily customize 
> the product for specific customers, an active object model is key to 
> being able to do this in a managable way.
> ...a DDUI (Domain-Driven User Interface).  We need to find a way to 
> dramatically reduce the effort it takes to develop a good quality UI.  I 
> hope RCPViewer will be the answer.
> 
> So, I think I came to RCPViewer from a different perspective than most.  
> I need a DDUI that display objects from a domain model that is not 
> determined until runtime.  Whereas for most everybody else the domain 
> model is determined at compile time.  This is why I started with EMF.  
> EMF will be the basis of my active object model.
> 
> So, my original thought was that RCPViewer would be a viewer for EMF 
> objects.  That there would be an adapter to provide EMF-metadata for POJOs.
> However, EMF is proving to be fairly cumbersome.  After seeing Mike's 
> spike I can't see why RCPViewer should use EMF when the job can get done 
> in a much simpler fashion.
> So,  I intend to finish my spike because I MUST learn the ins and outs 
> of EMF and I MUST have a DDUI that can display object instances from my 
> active object model.
> However, I not convinced that EMF is the best base on which to build 
> RCPViewer.
> After finishing my spike I will investigate how to use Mike's spike to 
> view EMF-generated object instances.
> 
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From emorning at yahoo.com  Sun May 29 17:38:48 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 29 May 2005 10:38:48 -0500
Subject: [Rcpviewer-contributors] TASKS Was: mikespike3, EMF, etc...
In-Reply-To: <42970E32.4030400@yahoo.com>
References: <42970E32.4030400@yahoo.com>
Message-ID: <4299E208.2040207@yahoo.com>

ted stockwell wrote:

> Hi All,
>
> I'm impressed by Mike's last spike.  It's easy to understand and 
> straightforward.  I think it's a good base on which to move forward 
> with RCPViewer.
> At this point I still intend to finish my spike (more on that below, 
> that's optional reading ;-)) but I don't want to muddy the waters with 
> my spike.  I can see that Mike's spike is a much better base on which 
> to move forward than mine will be.
>
> So that said, assuming that we move forward with Mike's spike, what 
> are the next steps?
> I think it would be good to come up with several orthogonal areas of 
> expansion that could be worked on separately by different developers.
>
> I can think of a few general areas of expansion...
> ...add persistence to mikespike3.
> ...expand the default viewer layout capability
> ...create a sample metamodel for development purposes
> ...add validation functionality to mikespike3
>
Forgot to add security to the list.  That is, handling authentication 
and authorization.
I would like to work on this aspect also.

Also just though of Undo/Redo.  That would be SO cool to have in the 
RCPViewer.

Also, as Mike pointed out in another message, we should make the 
framework testable early on.

So, the full RCPViewer 'TODO' list is now...
...add persistence to mikespike3 (TED).
...expand the default viewer layout capability (MIKE)
...create a sample metamodel for development purposes (DAN?)
...add validation functionality to mikespike3 (UNASSIGNED)
...make framework testable (MIKE)
...add undo/redo support. (UNASSIGNED)
...add authentication/authorization (TED)




From emorning at yahoo.com  Sun May 29 18:53:26 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 29 May 2005 11:53:26 -0500
Subject: [Rcpviewer-contributors] mikespike3, EMF, etc...
In-Reply-To: <4298661B.8030006@incremental.eu.com>
References: <42970E32.4030400@yahoo.com> <4298661B.8030006@incremental.eu.com>
Message-ID: <4299F386.3010907@yahoo.com>

Mike Evans wrote:

> Once this is done we can divide up into the different areas as 
> suggested by Ted.  Regarding Ted's ideas:
> - peristence: I have not given any thought to persistence so am happy 
> to offer someone else that opportunity...


I am happy to add a persistence aspect to the example.

>
> My other idea relates to Ted's discussion about his EMF plans. 
> Interestingly, he has identified the same risks as I have wrt to small 
> company software development - though his proposed solutions are 
> bolder than mine (I am relying on the plugin concept and auto-updates).
>
Same here, I planned on relying on plugins and auto-updates.  The 
biggest problem is when we must customize the domain model for a client 
by adding new attributes and associates to existing classes.  There is 
significant variation in how our clients run their businesses.  Our 
model is becoming polluted by all these additions made only for specific 
clients. 
Also, there is the problem of customizing forms to display data that is 
specific to a client.  We currently add new fields to a common form that 
is shared by all our clients.  It irritates existing clients that new 
fields are showing up on forms, fields that they don't understand and 
don't care about. 
I suppose that the GUI aspect of customizing forms for clients could be 
handled via some plugin-based scheme, however the active model coupled 
with a DDUI seems like it solves a whole bunch of problems  at once 
(avoids domain model polution by adding new attributes at runtime via a 
plugin extension to the domain model, domain driven forms automagically 
accomodate the extended domain, more consistent and higher quality UI, 
and the real payoff... much less work required to maintain and develop 
new functionality).



> The DDUI is obviously RcpViewer as we all understand it.  It is 
> essentially an enabler for what he terms the 'active object model'.  
> Now if this model is static with respect to any single runtime 
> instance (i.e generated once at startup) surely it is effectively the 
> same thing as Dan is working on?  In which case can we not define a 
> single contract / interface that the DDUI works against and 'on the 
> other side' allow Ted and Dan to explore different ways of 
> implementing that contract?  That would give us a clear division of 
> work. e

I agree.  Dan's model is 'THE' model.  Different implementation of the 
model are used for POJO development versus EMF development. 
This is one point that I was trying to get at in my last e-mail about 
why Mike's spike is more appropriate for a base going forward.  My spike 
is based on EMF-generated objects, Mike's spike is based on POJOs.  Most 
developers will use POJOs therefore Mike's spike is more appropriate for 
developing RCPViewer.  My spike respresents an exceptional case, 
therefore I should adapt my domain objects to work with Mike's spike.

>
> Perhaps this is too much duplication for a small team - but perhaps a 
> period of parallel, cooperative development would offer a better long 
> term result?
>

Perhaps too much duplication.  Not really sure. 
The changes that each of us make are gonna be BIG.  So I figure that 
even if we agree to work on a single example that basically merging the 
changes together will come down to each of using rewriting the examples 
that we work on anyway.




From emorning at yahoo.com  Sun May 29 18:53:31 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 29 May 2005 11:53:31 -0500
Subject: [Rcpviewer-contributors] Persistence
In-Reply-To: <4298661B.8030006@incremental.eu.com>
References: <42970E32.4030400@yahoo.com> <4298661B.8030006@incremental.eu.com>
Message-ID: <4299F38B.5010104@yahoo.com>

Hi all,

This is an overview of how I intend to implement persistence and of 
changes that I would make to the API with regard to peristence.
Please read this and provide feedback soon in order to prevent me from 
persuing a path that you would rather I not persue ;-).

I expect that each application will handle persistence in its own way.  
Some applications may use Hibernate, some may save objects as XML in a 
file system, etc.
As I see it it, RCPViewer should not have any API to actually *perform* 
persistence, RCPViewer merely needs a way to hook up peristence objects 
to the GUI.

As I see it, these items are what RCPViewer needs with regard to 
peristence...

...Support for 'New' actions.  That is, something similar to 'New 
Wizards' in the RCP. 
So, for instance, to create a new Customer the user should just be able 
to select File | New | Customer from the main menu and an editor should 
open for entering the Customer information.
In order to implement this I propose adding a new method to IDomainClass 
named isNewable().  isNewable() returns true if the class should be 
included on the File | New menu.  The default value is false.

... Editor support for Save, SaveAs methods and support for the 'dirty' 
decoration in the editor tab.  Every IDomainObject is displayed in it's 
own editor.  The RCPViewer editor must implement the 
org.eclipse.ui.ISaveablePart interface.  I propose that editor should 
simply delegate ISaveablePart  methods to the underlying IDomainObject. 
Therefore I propose that IDomainObjects that IDomainObject extends the 
org.eclipse.ui.ISaveablePart interface
(NOTE: This ties IDomainObject to an Eclipse API.  Is this a bad thing?  
Is the de.berlios.rcpviewer.domain API really meant for generic 
development?  Or just Eclipse development?  Personally, I have no 
problem with tying IDomainObject to Eclipse but what do you guys think?)

----------------

Assuming all of the above os OK then the next question is how do I 
create an implementation of the RCPViewer API that uses POJOs?
The simple answer would be to require high level POJOs that are 
'newable' to implement the org.eclipse.ui.ISaveablePart interface. 
However, if we require POJOs to implement a specific interface then 
they're not really POJOs anymore are they?

I think that Dan's answer would be to add the ISaveablePart interface to 
a class as a mixin, using AspectJ or something.

My answer is to provider POJO classes that are 'newable' with an Eclipse 
adapter factory that can adapt POJO instances that are saveable to 
implementations of ISaveablePart.


----------------
BTW, I would have suggested integrating RCPView with the Eclipse 'New 
Wizard' functionality but I have found that the 'New Wizards' 
functionality isn't exactly suitable for RCPViewer.  The problem with 
Eclipse 'New Wizards' is that they REQUIRE a wizard page to be shown for 
whatever object you are creating.  However, most time I expect that 
creating objects will not require any kind of configuration before the 
object is created.
So, for instance, to create a new Customer the user should just be able 
to select File | New | Customer from the main menu and an editor should 
open for entering the Customer information.
However, this cannot be implemented with the Eclipse New Wizard 
functionality.  The Eclipse New Wizard functionality REQUIRES that a 
wizard be displayed when the user chooses File | New | Customer from the 
main menu, then the Customer editor is displayed when the user hits the 
FINISH button on the wizard.

---------------
NOTE: I don't see any need for the IObjectStore interface in the 
RCPViewer API.

---------------

Anyway, I will create a simple axmple of these ideas from mikespike3 and 
hopefully post it in a couple/few days.


-ted




From dan at haywood-associates.co.uk  Sun May 29 19:15:45 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 29 May 2005 18:15:45 +0100
Subject: [Rcpviewer-contributors] Active model (was: mikespike3, EMF, etc...)
In-Reply-To: <4299F386.3010907@yahoo.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKAEOMDCAA.dan@haywood-associates.co.uk>

Ted wrote:

> The biggest problem is when we must customize the domain model for a
client
> by adding new attributes and associates to existing classes.  There is
> significant variation in how our clients run their businesses.  Our
> model is becoming polluted by all these additions made only for specific
> clients.
> Also, there is the problem of customizing forms to display data that is
> specific to a client.  We currently add new fields to a common form that
> is shared by all our clients.  It irritates existing clients that new
> fields are showing up on forms, fields that they don't understand and
> don't care about.
> I suppose that the GUI aspect of customizing forms for clients could be
> handled via some plugin-based scheme, however the active model coupled
> with a DDUI seems like it solves a whole bunch of problems  at once
> (avoids domain model polution by adding new attributes at runtime via a
> plugin extension to the domain model, domain driven forms automagically
> accomodate the extended domain, more consistent and higher quality UI,
> and the real payoff... much less work required to maintain and develop
> new functionality).

Ted - I know you've talked about this before, but what I've never understood
is why simple subclassing isn't good enough for this situation?  Or at any
rate, do you see any reason why under RcpViewer at least simple subclassing
won't by enough?




_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From mike.evans at incremental.eu.com  Sun May 29 19:27:21 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sun, 29 May 2005 18:27:21 +0100
Subject: [Rcpviewer-contributors] TASKS Was: mikespike3, EMF, etc...
In-Reply-To: <4299E208.2040207@yahoo.com>
References: <42970E32.4030400@yahoo.com> <4299E208.2040207@yahoo.com>
Message-ID: <4299FB79.9080408@incremental.eu.com>

I was thinking about undo/redo as well.
I think this might well tie in with the test framework AND the macro 
capability.  They are all uses of the command pattern after all.
So I'll have a think on that one.

Mike E.

ted stockwell wrote:

> ted stockwell wrote:
> 
>> Hi All,
>>
>> I'm impressed by Mike's last spike.  It's easy to understand and 
>> straightforward.  I think it's a good base on which to move forward 
>> with RCPViewer.
>> At this point I still intend to finish my spike (more on that below, 
>> that's optional reading ;-)) but I don't want to muddy the waters with 
>> my spike.  I can see that Mike's spike is a much better base on which 
>> to move forward than mine will be.
>>
>> So that said, assuming that we move forward with Mike's spike, what 
>> are the next steps?
>> I think it would be good to come up with several orthogonal areas of 
>> expansion that could be worked on separately by different developers.
>>
>> I can think of a few general areas of expansion...
>> ...add persistence to mikespike3.
>> ...expand the default viewer layout capability
>> ...create a sample metamodel for development purposes
>> ...add validation functionality to mikespike3
>>
> Forgot to add security to the list.  That is, handling authentication 
> and authorization.
> I would like to work on this aspect also.
> 
> Also just though of Undo/Redo.  That would be SO cool to have in the 
> RCPViewer.
> 
> Also, as Mike pointed out in another message, we should make the 
> framework testable early on.
> 
> So, the full RCPViewer 'TODO' list is now...
> ...add persistence to mikespike3 (TED).
> ...expand the default viewer layout capability (MIKE)
> ...create a sample metamodel for development purposes (DAN?)
> ...add validation functionality to mikespike3 (UNASSIGNED)
> ...make framework testable (MIKE)
> ...add undo/redo support. (UNASSIGNED)
> ...add authentication/authorization (TED)
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Sun May 29 19:51:47 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sun, 29 May 2005 18:51:47 +0100
Subject: [Rcpviewer-contributors] Persistence
In-Reply-To: <4299F38B.5010104@yahoo.com>
References: <42970E32.4030400@yahoo.com> <4298661B.8030006@incremental.eu.com> <4299F38B.5010104@yahoo.com>
Message-ID: <429A0133.7010209@incremental.eu.com>

My only issue is with extending IDomainObject.

I see the GUI simply as a client of the model.  Extending IDomainObject 
from any UI type is inappropriate.  I read a great paper off the 
alphaworks website years ago (alas can remeber no title nor author) 
explaining how type families should define one's intentions.  And I 
would argue that a generic business object type should not be part of 
any type family defining orthogonal functionalities such as persistence.

On the other hand, IDomainObject is ultimately a descriptor to allow an 
object to live within our runtime environment - which is all about UI 
and persistence.  And we are not (yet!) proposing non-Eclipse runtime 
environments.

So I don't really know...

What does us our resident consultant think, Dan?

Mike E.

PS : What about transactional control?  Are we going down the NO route 
of having objects representing transactions - a bit of a leap for most 
object modellers?

ted stockwell wrote:

> Hi all,
> 
> This is an overview of how I intend to implement persistence and of 
> changes that I would make to the API with regard to peristence.
> Please read this and provide feedback soon in order to prevent me from 
> persuing a path that you would rather I not persue ;-).
> 
> I expect that each application will handle persistence in its own way.  
> Some applications may use Hibernate, some may save objects as XML in a 
> file system, etc.
> As I see it it, RCPViewer should not have any API to actually *perform* 
> persistence, RCPViewer merely needs a way to hook up peristence objects 
> to the GUI.
> 
> As I see it, these items are what RCPViewer needs with regard to 
> peristence...
> 
> ...Support for 'New' actions.  That is, something similar to 'New 
> Wizards' in the RCP. So, for instance, to create a new Customer the user 
> should just be able to select File | New | Customer from the main menu 
> and an editor should open for entering the Customer information.
> In order to implement this I propose adding a new method to IDomainClass 
> named isNewable().  isNewable() returns true if the class should be 
> included on the File | New menu.  The default value is false.
> 
> ... Editor support for Save, SaveAs methods and support for the 'dirty' 
> decoration in the editor tab.  Every IDomainObject is displayed in it's 
> own editor.  The RCPViewer editor must implement the 
> org.eclipse.ui.ISaveablePart interface.  I propose that editor should 
> simply delegate ISaveablePart  methods to the underlying IDomainObject. 
> Therefore I propose that IDomainObjects that IDomainObject extends the 
> org.eclipse.ui.ISaveablePart interface
> (NOTE: This ties IDomainObject to an Eclipse API.  Is this a bad thing?  
> Is the de.berlios.rcpviewer.domain API really meant for generic 
> development?  Or just Eclipse development?  Personally, I have no 
> problem with tying IDomainObject to Eclipse but what do you guys think?)
> 
> ----------------
> 
> Assuming all of the above os OK then the next question is how do I 
> create an implementation of the RCPViewer API that uses POJOs?
> The simple answer would be to require high level POJOs that are 
> 'newable' to implement the org.eclipse.ui.ISaveablePart interface. 
> However, if we require POJOs to implement a specific interface then 
> they're not really POJOs anymore are they?
> 
> I think that Dan's answer would be to add the ISaveablePart interface to 
> a class as a mixin, using AspectJ or something.
> 
> My answer is to provider POJO classes that are 'newable' with an Eclipse 
> adapter factory that can adapt POJO instances that are saveable to 
> implementations of ISaveablePart.
> 
> 
> ----------------
> BTW, I would have suggested integrating RCPView with the Eclipse 'New 
> Wizard' functionality but I have found that the 'New Wizards' 
> functionality isn't exactly suitable for RCPViewer.  The problem with 
> Eclipse 'New Wizards' is that they REQUIRE a wizard page to be shown for 
> whatever object you are creating.  However, most time I expect that 
> creating objects will not require any kind of configuration before the 
> object is created.
> So, for instance, to create a new Customer the user should just be able 
> to select File | New | Customer from the main menu and an editor should 
> open for entering the Customer information.
> However, this cannot be implemented with the Eclipse New Wizard 
> functionality.  The Eclipse New Wizard functionality REQUIRES that a 
> wizard be displayed when the user chooses File | New | Customer from the 
> main menu, then the Customer editor is displayed when the user hits the 
> FINISH button on the wizard.
> 
> ---------------
> NOTE: I don't see any need for the IObjectStore interface in the 
> RCPViewer API.
> 
> ---------------
> 
> Anyway, I will create a simple axmple of these ideas from mikespike3 and 
> hopefully post it in a couple/few days.
> 
> 
> -ted
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Sun May 29 19:57:33 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 29 May 2005 18:57:33 +0100
Subject: [Rcpviewer-contributors] Persistence
In-Reply-To: <4299F38B.5010104@yahoo.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKMEOMDCAA.dan@haywood-associates.co.uk>

>> within

-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
stockwell
Sent: 29 May 2005 17:54
To: rcpviewer-contributors at lists.berlios.de
Subject: [Rcpviewer-contributors] Persistence

I expect that each application will handle persistence in its own way.
Some applications may use Hibernate, some may save objects as XML in a
file system, etc.

>> agreed.  NO framework also has an "in-memory" objectstore which is
v. useful for unit testing.  There's a preliminary version of this in
(what these days is called) de.berlios.rcpviewer.domain.runtime plugin.


As I see it it, RCPViewer should not have any API to actually *perform*
persistence, RCPViewer merely needs a way to hook up peristence objects
to the GUI.

>> to an extent I agree.  However, I think that the RcpViewer should have
>> knowledge of a certain regular lifecycle of states that persistable
objects
>> can go through.  For example, an object might be created but not yet
>> persisted; or might subsequently be persisted.  I think in any enterprise
>> persistence mechanism (JDO, Hibernate and EJB3) these should exist.
>> Searching is another area where there should be some support.  On the
>> DSFA project we've used DDD Repositories very successfully.  We
externalized
>> all searches into Repository objects, and then had different
implementations
>> according to the persistence mechanism in use.  So at a very least the
>> RcpViewer should provide some infrastructure to make the Repository
pattern
>> the easiest thing for domain programmers to use.


In order to implement this I propose adding a new method to IDomainClass
named isNewable().  isNewable() returns true if the class should be
included on the File | New menu.  The default value is false.

>> That's fine - there's something similar in the NO framework.  Do you have
>> any suggestions on how we pick up the fact that a given POJO class is
>> non-instantiable?  eg, in the NO framework one would write:
>> public class Customer {
>>   public static void aboutCustomer(ClassAbout about) {
>>    about.uninstantiable();
>>   }
>> }
>>
>> (In other words, adding the info in the meta-model is one thing; one
>> also must decide what the programming model is - ie what the POJOs
>> should be coded up as.


... Editor support for Save, SaveAs methods ... I propose that
IDomainObjects
that IDomainObject extends the org.eclipse.ui.ISaveablePart interface
NOTE: This ties IDomainObject to an Eclipse API.  Is this a bad thing?

>> I thought when I read this first time that I'd have a problem with this,
>> but I don't think I do.  I can see the IDomain/IDomainClass metamodel
>> being reused in other contexts, but ISession/IDomainObject are specific
>> to Eclipse.
>>
>> That said, an alternative approach would be to have IDomainObject be
>> adaptable, eg
>>   ISaveablePart sp =
(ISaveablePart)someDomainObject.getAdapter(ISaveablePart.class);
>> so that we don't pollute the IDomainObject with Eclipse specifics.

----------------

Assuming all of the above os OK then the next question is how do I
create an implementation of the RCPViewer API that uses POJOs?

>> Let me stop you there for a second: when I read on it seems that you've
>> made "newability" and "saveability" interchangeable.  I don't think they
are.
>> For example, at DSFA we have an object which can be created but can never
>> be saved.  So my answers below reflect this.


The simple answer would be to require high level POJOs that are
'newable' to implement the org.eclipse.ui.ISaveablePart interface.
However, if we require POJOs to implement a specific interface then
they're not really POJOs anymore are they?

>> Agreed, don't like this.  Saying that an IDomainObject is (or can
>> provide) an ISaveablePart is *not* the same thing as saying that the
>> POJO that it wraps is an ISaveablePart.
>>
>> My suggestion would be to use naming conventions for both of these
>> two concerns of "newability" and "saveability".
>>
>> If the domain programmer provides a "created" method, then we
>> say that the object can be - erm - created.  And if the domain
>> programmer provides a "save()" method, then its saveable.


My answer is to provider POJO classes that are 'newable' with an Eclipse
adapter factory that can adapt POJO instances that are saveable to
implementations of ISaveablePart.

>> I don't think that adapter factories are appropriate for the POJOs
>> themselves.  Remember that we only ever interact with the POJOs
>> through the IDomainObjects which can translate the requirements of the
>> rest of the RcpViewer framework into "things that the POJO understand".


----------------
BTW, I would have suggested integrating RCPView with the Eclipse 'New
Wizard' functionality but I have found that the 'New Wizards'
functionality isn't exactly suitable for RCPViewer.  The problem with
Eclipse 'New Wizards' is that they REQUIRE a wizard page to be shown for
whatever object you are creating.

>> Perhaps if there is a created(...) method in the POJO which takes
>> some arguments, then this would be interpreted as providing a
>> wizard to gather those arguments?



---------------
NOTE: I don't see any need for the IObjectStore interface in the
RCPViewer API.

>> You may well be right, on the other hand it is only a sketch.  It might
>> be needed to enshrine what RcpViewer requires in terms of persistence
>> lifecycle state.

---------------

Anyway, I will create a simple axmple of these ideas from mikespike3 and
hopefully post it in a couple/few days.


-ted


_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From dan at haywood-associates.co.uk  Sun May 29 20:01:40 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sun, 29 May 2005 19:01:40 +0100
Subject: [Rcpviewer-contributors] TASKS Was: mikespike3, EMF, etc...
In-Reply-To: <4299E208.2040207@yahoo.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKCEONDCAA.dan@haywood-associates.co.uk>

Ted wrote:

>> So, the full RCPViewer 'TODO' list is now...
>> ...add persistence to mikespike3 (TED).
>> ...expand the default viewer layout capability (MIKE)
>> ...create a sample metamodel for development purposes (DAN?)
>> ...add validation functionality to mikespike3 (UNASSIGNED)
>> ...make framework testable (MIKE)
>> ...add undo/redo support. (UNASSIGNED)
>> ...add authentication/authorization (TED)

I wouldn't call it "full", but it's great that we're now moving
onto a stage of dividing out "real" work like this.

So, yes, I'll do the sample metamodel, and I think that I may as well
do PetStore - foreseeing a linecount announcement on TSS in Jan 2006!

A lot of the validation stuff should be driven out of the
metamodel, which is my area too.  So, I'll do some work here to
define an API and interaction model for the GUI components. 

Similarly, I have an approach in mind for authorization which is
related to this (based on how NO framework does it, works pretty well),
so hold off on that side until I can do some stuff in the metamodel 
to show what I have in mind.

I'll post up this list up on the wiki, probably a better place for it to
live (though I suspect you guys have forgotten your password ;-)


Dan


-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of ted
stockwell
Sent: 29 May 2005 16:39
To: rcpviewer-contributors at lists.berlios.de
Subject: [Rcpviewer-contributors] TASKS Was: mikespike3, EMF, etc...


ted stockwell wrote:

> Hi All,
>
> I'm impressed by Mike's last spike.  It's easy to understand and 
> straightforward.  I think it's a good base on which to move forward 
> with RCPViewer.
> At this point I still intend to finish my spike (more on that below, 
> that's optional reading ;-)) but I don't want to muddy the waters with 
> my spike.  I can see that Mike's spike is a much better base on which 
> to move forward than mine will be.
>
> So that said, assuming that we move forward with Mike's spike, what 
> are the next steps?
> I think it would be good to come up with several orthogonal areas of 
> expansion that could be worked on separately by different developers.
>
> I can think of a few general areas of expansion...
> ...add persistence to mikespike3.
> ...expand the default viewer layout capability
> ...create a sample metamodel for development purposes
> ...add validation functionality to mikespike3
>
Forgot to add security to the list.  That is, handling authentication 
and authorization.
I would like to work on this aspect also.

Also just though of Undo/Redo.  That would be SO cool to have in the 
RCPViewer.

Also, as Mike pointed out in another message, we should make the 
framework testable early on.

So, the full RCPViewer 'TODO' list is now...
...add persistence to mikespike3 (TED).
...expand the default viewer layout capability (MIKE)
...create a sample metamodel for development purposes (DAN?)
...add validation functionality to mikespike3 (UNASSIGNED)
...make framework testable (MIKE)
...add undo/redo support. (UNASSIGNED)
...add authentication/authorization (TED)


_______________________________________________
Rcpviewer-contributors mailing list
Rcpviewer-contributors at lists.berlios.de
http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors




From emorning at yahoo.com  Sun May 29 23:50:15 2005
From: emorning at yahoo.com (ted stockwell)
Date: Sun, 29 May 2005 16:50:15 -0500
Subject: [Rcpviewer-contributors] Active model
In-Reply-To: <LGEELLOAEBMLCOGIKLMKAEOMDCAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKAEOMDCAA.dan@haywood-associates.co.uk>
Message-ID: <429A3917.3080700@yahoo.com>

Dan Haywood wrote:

>Ted wrote:
>
>  
>
>>The biggest problem is when we must customize the domain model for a
>>    
>>
>client
>  
>
>>by adding new attributes and associates to existing classes.  There is
>>significant variation in how our clients run their businesses.  Our
>>model is becoming polluted by all these additions made only for specific
>>clients.
>>Also, there is the problem of customizing forms to display data that is
>>specific to a client.  We currently add new fields to a common form that
>>is shared by all our clients.  It irritates existing clients that new
>>fields are showing up on forms, fields that they don't understand and
>>don't care about.
>>I suppose that the GUI aspect of customizing forms for clients could be
>>handled via some plugin-based scheme, however the active model coupled
>>with a DDUI seems like it solves a whole bunch of problems  at once
>>(avoids domain model polution by adding new attributes at runtime via a
>>plugin extension to the domain model, domain driven forms automagically
>>accomodate the extended domain, more consistent and higher quality UI,
>>and the real payoff... much less work required to maintain and develop
>>new functionality).
>>    
>>
>
>Ted - I know you've talked about this before, but what I've never understood
>is why simple subclassing isn't good enough for this situation?  Or at any
>rate, do you see any reason why under RcpViewer at least simple subclassing
>won't by enough?
>
>  
>
Subclassing doesn't work when more than one subclass is required.
For instance, suppose a particular client needs time-tracking in 
addition to the standard functionality.  The time-tracking module wants 
to subclass the Vendor class to create an Employee class.  An Employee 
is a Vendor that provides a service and that also has a 'Pay Rate' that 
determines the cost of the empoyee's service.
Also suppose that the same client needs to track the Tax Id of Vendors, 
which is not part of the standard functionality (this is a real case but 
I don't recall right now what the vendor's Tax Id is used for).  So a 
customization module is create for the client that subclasses the Vendor 
class and adds the Tax ID to the Vendor.

Now, how do I create a Vendor at runtime?  I can create either the 
subclass used by the time-tracking module, or the subclass used by the 
client plugin. 

I figure that the answer is to use composition instead of subclass so 
that the two modules can add what they need to the Vendor class at 
runtime.  An 'active' object model would give me that.





From emorning at yahoo.com  Mon May 30 17:34:28 2005
From: emorning at yahoo.com (ted stockwell)
Date: Mon, 30 May 2005 10:34:28 -0500
Subject: [Rcpviewer-contributors] Persistence
In-Reply-To: <429A0133.7010209@incremental.eu.com>
References: <42970E32.4030400@yahoo.com> <4298661B.8030006@incremental.eu.com> <4299F38B.5010104@yahoo.com> <429A0133.7010209@incremental.eu.com>
Message-ID: <429B3284.6080903@yahoo.com>

Mike Evans wrote:

> My only issue is with extending IDomainObject.
>
> I see the GUI simply as a client of the model.  Extending 
> IDomainObject from any UI type is inappropriate.  I read a great paper 
> off the alphaworks website years ago (alas can remeber no title nor 
> author) explaining how type families should define one's intentions.  
> And I would argue that a generic business object type should not be 
> part of any type family defining orthogonal functionalities such as 
> persistence.
>
> On the other hand, IDomainObject is ultimately a descriptor to allow 
> an object to live within our runtime environment - which is all about 
> UI and persistence.  And we are not (yet!) proposing non-Eclipse 
> runtime environments.
>
> So I don't really know...
>
> What does us our resident consultant think, Dan?
>
> Mike E.
>
> PS : What about transactional control?  Are we going down the NO route 
> of having objects representing transactions - a bit of a leap for most 
> object modellers?
>
> ted stockwell wrote:
>


You make a good point about the orthogonality of the persistence 
functionality (keep this argument in mind for some future date when I 
argue that UI configuration should not go in the business object).
So, suddenly I think that I need to bring IObjectStore back from the dead!

So, instead of having IDomainObject implement ISaveablePart I now think 
that the ISaveablePart methods should be implemented by IObjectStore (Of 
course, a parameter will have to be added to each method in order to 
also pass the object to be saved).
Then instead of delegating ISaveablePart methods to the underlying 
IDomainObject, the RCPViewer editor will get the ISession associated 
with an object, get the IObjectStore from the session, and then invoke 
the associated ISaveable method on the object store.

I will  also add an IObjectStore.beginTransaction method which will 
return an ITransaction.  ITransaction will have commit and rollback 
methods.  Don't see how we can avoid having a Transaction class, 
however, it seems to me that the ITransaction interface and the 
IObjectStore.beginTransaction method will be only for internal RCPViewer 
use only.  The IObjectStore and ITransaction interfaces are merely 
wrappers for the application-specific persistence mechanism. 
Methods on business objects that require transactions will use the 
application-specific transaction manager directly.

------------------

Sorry, about going one direction and then another.  The good news is 
that this kind of exercise is helping me to learn the ins-and-outs of 
Dan's model.




From dan at haywood-associates.co.uk  Mon May 30 20:50:37 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Mon, 30 May 2005 19:50:37 +0100
Subject: [Rcpviewer-contributors] Persistence
In-Reply-To: <429A0133.7010209@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKOEOODCAA.dan@haywood-associates.co.uk>

>> within

-----Original Message-----
From: rcpviewer-contributors-admin at berlios.de
[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
Subject: Re: [Rcpviewer-contributors] Persistence

I see the GUI simply as a client of the model.  Extending IDomainObject
from any UI type is inappropriate.  I read a great paper off the
alphaworks website years ago (alas can remeber no title nor author)
explaining how type families should define one's intentions.  And I
would argue that a generic business object type should not be part of
any type family defining orthogonal functionalities such as persistence.

... What does us our resident consultant think, Dan?

>> I replied to Ted's posting on this yesterday saying I didn't have a
>> problem with IDomainObject extended ISaveablePart.  But actually, on
>> reflection I think I do.  Although I don't see IDomainObject itself
>> as ever being reused outside of Eclipse, I would like to see IDomainClass
>> being used outside (eg in Chris Nelson's Trails project).  Since an
>> IDomainClass has a method createTransient which returns an IDomainObject,
>> this says that IDomainObject should not extend from the Eclipse API.

>> Ted also responded earlier today, saying he was gonna put save logic
>> onto IObjectStore.  Sounds like a good plan to me - I think we're
>> all on the same page.  I suspect that if Hibernate or EJB3 were being
>> used as the persistence mechanism, there wouldn't actually be much for
the
>> IObjectStore to do, but it would still take responsibility for
>> mapping the "save" lifecycle event of an IDomainObject over to the
>> corresponding state change for the underlying persistence mechanism.


----

PS : What about transactional control?  Are we going down the NO route
of having objects representing transactions - a bit of a leap for most
object modellers?

>> I think the NO route to transactions works well, though I'm not sure I
>> quite understand your remark because there are two different idioms to
>> delimit a transaction within NO.  The first and simplest is to write
>> a simple action method, as displayed on the object's menu.  All
>> modifications to objects that result from that action invokation are
>> performed in a single transaction.  This is good enough for most
>> circumstances.

>> The other approach (and the one I think you were referring to) is to
>> encapsulate the transaction as an object which, when persisted,
>> represents the change.  The classic example is a bank transfer.
>> Rather than have an action called "transferTo" on a BankAccount which
>> takes as a parameter another BankAccount objects and an amount, we
instead
>> would have an action called "makeTransfer" that would take two
>> BankAccount objects, an amount, and would return a TransferTransaction.
>> It all comes down to whether the action itself is a domain object.
>> Sometimes it is, sometimes not.

>> By the way, at the DSFA there is a requirement to audit certain
>> transactions.  The way we implemented this was to write a generic
>> capability (in the NO framework) for any object (or a bounded graph of
>> objects) into XML, along with corresponding XSD schema.  This is then
>> recorded.  Because it is XML, it can then be rendered into other formats,
>> eg for reviewing by auditors, or for reporting upon (how many actions of
>> type X did we do in July, etc?)

>> In fact, we used this XML capability as part of the implementation of a
>> Communication object representing pro-forma communications.  The user
>> has to specify the bits of the form that vary, within the business
>> object itself (and therefore typesafe).   The communication object is
>> converted into XML, and then we used Altova's Stylevision to build an
>> XSL-FO XSLT to convert this XML into a PDF.  It'd be very nice to do
>> something similar for RcpViewer.  I would see this PDF view/preview as
>> being an additional tab on the object's editor.




From dan at haywood-associates.co.uk  Tue May 31 00:42:06 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Mon, 30 May 2005 23:42:06 +0100
Subject: [Rcpviewer-contributors] More tidying up, updates to the wiki
Message-ID: <LGEELLOAEBMLCOGIKLMKAEPADCAA.dan@haywood-associates.co.uk>

Been doing a little tidy up of the wiki.  The
http://www.haywood-associates.co.uk/rcpviewer/space/features page lists some
of the items that have been mentioned on this mailing list.  I still have a
bunch more to add, which I'll do tomorrow, and please add your own in the
appropriate category.

Separately, have posted further tidy-ups to the metamodel, all in readiness
for it being able to support being built at compile-time (using Java AST) as
well as at runtime (using reflection).  There are now a plethora of plugin
projects - sorry about that - but at least they are documented in
http://www.haywood-associates.co.uk/rcpviewer/space/features/meta-model.

Dan





