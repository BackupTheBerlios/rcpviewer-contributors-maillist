From mike.evans at incremental.eu.com  Mon Aug  1 11:07:51 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Mon, 01 Aug 2005 10:07:51 +0100
Subject: [Rcpviewer-contributors] Progress 20050801
Message-ID: <42EDE667.3000107@incremental.eu.com>

August already!  Where did July go?

Not so much progress today - SVN faff.  Made the mistake of removing 
files and renaming packages, despite Dan's warnings.  Everything 
consequently went tits up.
I think everything is sorted - let me know if any problems.
One word of warning - if you decide to 'hard' refresh everything in the 
workspace (i.e. completely delete then re-checkout via Tortoise SVN) but 
retain your old eclipse metadata, ApsectJ can start kicking up errors.

Anyway, as to productive stuff:
FieldBuilders are back in their own package (sorry...) and there are 
CellEditors for all primitive types.  The ..acme project beans have been 
extended to allow some of this to be tried out, though I do not pretend 
it is fully tested.

Mike E.



-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Tue Aug  2 09:06:32 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Tue, 02 Aug 2005 08:06:32 +0100
Subject: [Rcpviewer-contributors] Re: running petstore against current gui...
In-Reply-To: <LGEELLOAEBMLCOGIKLMKCEPODDAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKCEPODDAA.dan@haywood-associates.co.uk>
Message-ID: <42EF1B78.7080607@incremental.eu.com>

Responses below...

Mike E.



Dan Haywood wrote:

> ... thrown up a couple of things, dead easy to fix I'm sure.
> 
> 1. if you instantiate an Order then fails to build the editor:
> 
> DateFieldBuilder:
> 
> 		public void setGuiValue(Object obj) {
> 			if ( !(obj instanceof Date) ) throw new IllegalArgumentException();
> 			_text.setText( FORMATTER.format( (Date)obj ) );
> 
> 		}
> 
> 
> because obj is null.
> 
> Might just need a guard against null?  But I remember you saying that null
> handling was on your todo list.

Ooops - null check indeed required - added and committed.

> 
> 
> 2. I'm only registering 4 classes, but all domain classes appear in the
> classbar view.  Could you show only the 4 classes in this view?

Err... it being early I may be being dumb but aren't domain classes by 
definition those that are registered?  Have a look at 
DomainRegistryUtil.iterateAllClasses() - I basically get all domains 
from the domain registry and then iteratte through domain.classes() on 
each.  What ought I be doing?

> 
> 
> By the way, now had a chance to look at the latest version of the action
> view (could we rename this to operation view to be consistent with the
> metamodel?)  

"Operation view" it is.  Another chance for SVN to screw up...


I have to say that it works rather better than I thought, which
> is nice.  I still think a slightly prettier version will be needed at some
> stage - one that *doesn't* rely on colours - but its more than good enough
> for now.  Thanks.

I'm thinking of decorated icons which indicate:
- nullability
- validity
- anything else you can think of.
These icons would be used by FieldBuilders too.
However that's for later.

> 
> One other thing it needs to do (though this is a bit of a nice-to-have) is
> to remember any values for parameters when switching between editors.
> Otherwise the view is effectively modal because the user cannot leave what
> they were doing and come back to it.  But add that to the "to-do" list if
> its not easy to implement - I'd rather see collections next.
> 

A-ha!  I had it in my head that you wanted the ops view to remember 
values per instance - which is what it currently does.  At first glance 
to make its state essentially static should be trivial.  However...
How do we handle validation of values across instances?
Coupla examples:
An op becomes invalid because the new focus instance has a different 
state - easy - just disable.
But what about an inapplicable parameter value?  Disable / clear?
I'll have a think about how best to do this.

> 
> Cheers
> Dan
> 
> 
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Tue Aug  2 09:55:58 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Tue, 2 Aug 2005 07:55:58 GMT
Subject: [Rcpviewer-contributors] Re: running petstore against current gui...
Message-ID: <Zen-1Dzrd0-0001py-7c@rutherford.zen.co.uk>

> > 2. I'm only registering 4 classes, but all domain classes appear in the
> > classbar view.  Could you show only the 4 classes in this view?
> 
> Err... it being early I may be being dumb but aren't domain classes by 
> definition those that are registered?  Have a look at 
> DomainRegistryUtil.iterateAllClasses() - I basically get all domains 
> from the domain registry and then iteratte through domain.classes() on 
> each.  What ought I be doing?

Sorry, I'm overloading the word "register".  So we need to distinguish two different sets of domain classes.  The first is the set make up the IDomain.  We find these by traversing all references, so in principal it should only be necessary to "register" one or two central classes and the rest should be navigable from them.

The second is a subset of the first, representing the starting points for a user to interact with the application.  These are what should be in the classbar.

I'm hoping that we can use the extension point to represent the second set.  Since the classes in the class bar are pretty central, this should be enough to ensure that the first set is built up correctly.  If it isn't, then we could always add a boolean attribute (showInClassBar) to the plugin point?

Dan


-------
Mike Evans <mike.evans at incremental.eu.com> wrote :

> Responses below...
> 
> Mike E.
> 
> 
> 
> Dan Haywood wrote:
> 
> > ... thrown up a couple of things, dead easy to fix I'm sure.
> > 
> > 1. if you instantiate an Order then fails to build the editor:
> > 
> > DateFieldBuilder:
> > 
> > 		public void setGuiValue(Object obj) {
> > 			if ( !(obj instanceof Date) ) throw new IllegalArgumentException();
> > 			_text.setText( FORMATTER.format( (Date)obj ) );
> > 
> > 		}
> > 
> > 
> > because obj is null.
> > 
> > Might just need a guard against null?  But I remember you saying that null
> > handling was on your todo list.
> 
> Ooops - null check indeed required - added and committed.
> 
> > 
> > 
> > 2. I'm only registering 4 classes, but all domain classes appear in the
> > classbar view.  Could you show only the 4 classes in this view?
> 
> Err... it being early I may be being dumb but aren't domain classes by 
> definition those that are registered?  Have a look at 
> DomainRegistryUtil.iterateAllClasses() - I basically get all domains 
> from the domain registry and then iteratte through domain.classes() on 
> each.  What ought I be doing?
> 
> > 
> > 
> > By the way, now had a chance to look at the latest version of the action
> > view (could we rename this to operation view to be consistent with the
> > metamodel?)  
> 
> "Operation view" it is.  Another chance for SVN to screw up...
> 
> 
> I have to say that it works rather better than I thought, which
> > is nice.  I still think a slightly prettier version will be needed at some
> > stage - one that *doesn't* rely on colours - but its more than good enough
> > for now.  Thanks.
> 
> I'm thinking of decorated icons which indicate:
> - nullability
> - validity
> - anything else you can think of.
> These icons would be used by FieldBuilders too.
> However that's for later.
> 
> > 
> > One other thing it needs to do (though this is a bit of a nice-to-have) is
> > to remember any values for parameters when switching between editors.
> > Otherwise the view is effectively modal because the user cannot leave what
> > they were doing and come back to it.  But add that to the "to-do" list if
> > its not easy to implement - I'd rather see collections next.
> > 
> 
> A-ha!  I had it in my head that you wanted the ops view to remember 
> values per instance - which is what it currently does.  At first glance 
> to make its state essentially static should be trivial.  However...
> How do we handle validation of values across instances?
> Coupla examples:
> An op becomes invalid because the new focus instance has a different 
> state - easy - just disable.
> But what about an inapplicable parameter value?  Disable / clear?
> I'll have a think about how best to do this.
> 
> > 
> > Cheers
> > Dan
> > 
> > 
> > 
> > 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From mike.evans at incremental.eu.com  Tue Aug  2 10:17:45 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Tue, 02 Aug 2005 09:17:45 +0100
Subject: [Rcpviewer-contributors] Re: running petstore against current
 gui...
In-Reply-To: <Zen-1Dzrd0-0001py-7c@rutherford.zen.co.uk>
References: <Zen-1Dzrd0-0001py-7c@rutherford.zen.co.uk>
Message-ID: <42EF2C29.9060301@incremental.eu.com>

Ok.
Well I have just blithely started to add an iterateRegisteredClasses() 
method to the DomainRegistryUtil which would simply return all classes 
defined by the extension point.
HOWEVER...
The extension point is designed as only one means by which the gui could 
be made aware of domain clasess.  Ultimately the domain might be 
populated other ways (especially for testing) -  hence all the 
DomainBootstrapFactory faff.
Hence the GUI should not distinguish classes due to the extension point, 
nor by any attributes on the extension point.
Does the model have any concept of first class/second class objects? 
(e.g for persistence those with their own lifecycles v. dependent 
objects).  If so could we use this to filter the objects to be displayed 
on the class bar?

Mike E.

Dan Haywood wrote:

>>>2. I'm only registering 4 classes, but all domain classes appear in the
>>>classbar view.  Could you show only the 4 classes in this view?
>>
>>Err... it being early I may be being dumb but aren't domain classes by 
>>definition those that are registered?  Have a look at 
>>DomainRegistryUtil.iterateAllClasses() - I basically get all domains 
>>from the domain registry and then iteratte through domain.classes() on 
>>each.  What ought I be doing?
> 
> 
> Sorry, I'm overloading the word "register".  So we need to distinguish two different sets of domain classes.  The first is the set make up the IDomain.  We find these by traversing all references, so in principal it should only be necessary to "register" one or two central classes and the rest should be navigable from them.
> 
> The second is a subset of the first, representing the starting points for a user to interact with the application.  These are what should be in the classbar.
> 
> I'm hoping that we can use the extension point to represent the second set.  Since the classes in the class bar are pretty central, this should be enough to ensure that the first set is built up correctly.  If it isn't, then we could always add a boolean attribute (showInClassBar) to the plugin point?
> 
> Dan
> 
> 
> -------
> Mike Evans <mike.evans at incremental.eu.com> wrote :
> 
> 
>>Responses below...
>>
>>Mike E.
>>
>>
>>
>>Dan Haywood wrote:
>>
>>
>>>... thrown up a couple of things, dead easy to fix I'm sure.
>>>
>>>1. if you instantiate an Order then fails to build the editor:
>>>
>>>DateFieldBuilder:
>>>
>>>		public void setGuiValue(Object obj) {
>>>			if ( !(obj instanceof Date) ) throw new IllegalArgumentException();
>>>			_text.setText( FORMATTER.format( (Date)obj ) );
>>>
>>>		}
>>>
>>>
>>>because obj is null.
>>>
>>>Might just need a guard against null?  But I remember you saying that null
>>>handling was on your todo list.
>>
>>Ooops - null check indeed required - added and committed.
>>
>>
>>>
>>>2. I'm only registering 4 classes, but all domain classes appear in the
>>>classbar view.  Could you show only the 4 classes in this view?
>>
>>Err... it being early I may be being dumb but aren't domain classes by 
>>definition those that are registered?  Have a look at 
>>DomainRegistryUtil.iterateAllClasses() - I basically get all domains 
>>from the domain registry and then iteratte through domain.classes() on 
>>each.  What ought I be doing?
>>
>>
>>>
>>>By the way, now had a chance to look at the latest version of the action
>>>view (could we rename this to operation view to be consistent with the
>>>metamodel?)  
>>
>>"Operation view" it is.  Another chance for SVN to screw up...
>>
>>
>>I have to say that it works rather better than I thought, which
>>
>>>is nice.  I still think a slightly prettier version will be needed at some
>>>stage - one that *doesn't* rely on colours - but its more than good enough
>>>for now.  Thanks.
>>
>>I'm thinking of decorated icons which indicate:
>>- nullability
>>- validity
>>- anything else you can think of.
>>These icons would be used by FieldBuilders too.
>>However that's for later.
>>
>>
>>>One other thing it needs to do (though this is a bit of a nice-to-have) is
>>>to remember any values for parameters when switching between editors.
>>>Otherwise the view is effectively modal because the user cannot leave what
>>>they were doing and come back to it.  But add that to the "to-do" list if
>>>its not easy to implement - I'd rather see collections next.
>>>
>>
>>A-ha!  I had it in my head that you wanted the ops view to remember 
>>values per instance - which is what it currently does.  At first glance 
>>to make its state essentially static should be trivial.  However...
>>How do we handle validation of values across instances?
>>Coupla examples:
>>An op becomes invalid because the new focus instance has a different 
>>state - easy - just disable.
>>But what about an inapplicable parameter value?  Disable / clear?
>>I'll have a think about how best to do this.
>>
>>
>>>Cheers
>>>Dan
>>>
>>>
>>>
>>>
>>
>>-- 
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> 
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Tue Aug  2 11:01:52 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Tue, 02 Aug 2005 10:01:52 +0100
Subject: [Rcpviewer-contributors] Bugette?
Message-ID: <42EF3680.6060807@incremental.eu.com>

Dan,

Quickie bug for you.
The underscore on the beginning of an attribute name seems to get 
dropped somewhere during model instantiation.
I am getting null attributes out of NotifyListenersAspect.
Current workaround is not to have underscores in the name.

Mike E.

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Wed Aug  3 00:09:54 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Tue, 2 Aug 2005 23:09:54 +0100
Subject: [Rcpviewer-contributors] Re: running petstore against current gui...
In-Reply-To: <42EF2C29.9060301@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKGEAEDEAA.dan@haywood-associates.co.uk>

> Does the model have any concept of first class/second class objects?
> (e.g for persistence those with their own lifecycles v. dependent
> objects).  If so could we use this to filter the objects to be displayed
> on the class bar?

Actually, yes, it does.  I'd forgotten that I'd added the concept of a class
being "instantiable" and also "searchable" (defined by the @Lifecycle
annotation).  For the former I mean it should be available as File>New, for
the latter it should be available by Search menu.  I think that if either of
these are enabled then it should be in the class bar.  At any rate, this is
a reasonable approximation, and we can refine it later as needs be.

So, make sure that you've installed the ExtendedProgModelBuilder:

		getDomainInstance().addBuilder(new ExtendedProgModelBuilder());
		getDomainInstance().done();

You should then be able to get hold of ExtendedDomainClass:

		ExtendedDomainClass extendedDomainClass =
			domainClass.getAdapter(ExtendedDomainClass.class);

And then do things like:

		if (extendedDomainClass.isInstantiable()) { ... }
		if (extendedDomainClass.isSearchable()) { ... }

Let's see how that goes.  I'll update the petstore domain classes
accordingly.

Dan


> -----Original Message-----
> From: Mike Evans [mailto:mike.evans at incremental.eu.com]
> Sent: 02 August 2005 09:18
> To: Dan Haywood
> Cc: rcpviewer-contributors at lists.berlios.de
> Subject: Re: [Rcpviewer-contributors] Re: running petstore against
> current gui...
>
>
> Ok.
> Well I have just blithely started to add an iterateRegisteredClasses()
> method to the DomainRegistryUtil which would simply return all classes
> defined by the extension point.
> HOWEVER...
> The extension point is designed as only one means by which the gui could
> be made aware of domain clasess.  Ultimately the domain might be
> populated other ways (especially for testing) -  hence all the
> DomainBootstrapFactory faff.
> Hence the GUI should not distinguish classes due to the extension point,
> nor by any attributes on the extension point.
> Does the model have any concept of first class/second class objects?
> (e.g for persistence those with their own lifecycles v. dependent
> objects).  If so could we use this to filter the objects to be displayed
> on the class bar?
>
> Mike E.
>
> Dan Haywood wrote:
>
> >>>2. I'm only registering 4 classes, but all domain classes appear in the
> >>>classbar view.  Could you show only the 4 classes in this view?
> >>
> >>Err... it being early I may be being dumb but aren't domain classes by
> >>definition those that are registered?  Have a look at
> >>DomainRegistryUtil.iterateAllClasses() - I basically get all domains
> >>from the domain registry and then iteratte through domain.classes() on
> >>each.  What ought I be doing?
> >
> >
> > Sorry, I'm overloading the word "register".  So we need to
> distinguish two different sets of domain classes.  The first is
> the set make up the IDomain.  We find these by traversing all
> references, so in principal it should only be necessary to
> "register" one or two central classes and the rest should be
> navigable from them.
> >
> > The second is a subset of the first, representing the starting
> points for a user to interact with the application.  These are
> what should be in the classbar.
> >
> > I'm hoping that we can use the extension point to represent the
> second set.  Since the classes in the class bar are pretty
> central, this should be enough to ensure that the first set is
> built up correctly.  If it isn't, then we could always add a
> boolean attribute (showInClassBar) to the plugin point?
> >
> > Dan
> >
> >
> > -------
> > Mike Evans <mike.evans at incremental.eu.com> wrote :
> >
> >
> >>Responses below...
> >>
> >>Mike E.
> >>
> >>
> >>
> >>Dan Haywood wrote:
> >>
> >>
> >>>... thrown up a couple of things, dead easy to fix I'm sure.
> >>>
> >>>1. if you instantiate an Order then fails to build the editor:
> >>>
> >>>DateFieldBuilder:
> >>>
> >>>		public void setGuiValue(Object obj) {
> >>>			if ( !(obj instanceof Date) ) throw new
> IllegalArgumentException();
> >>>			_text.setText( FORMATTER.format( (Date)obj ) );
> >>>
> >>>		}
> >>>
> >>>
> >>>because obj is null.
> >>>
> >>>Might just need a guard against null?  But I remember you
> saying that null
> >>>handling was on your todo list.
> >>
> >>Ooops - null check indeed required - added and committed.
> >>
> >>
> >>>
> >>>2. I'm only registering 4 classes, but all domain classes appear in the
> >>>classbar view.  Could you show only the 4 classes in this view?
> >>
> >>Err... it being early I may be being dumb but aren't domain classes by
> >>definition those that are registered?  Have a look at
> >>DomainRegistryUtil.iterateAllClasses() - I basically get all domains
> >>from the domain registry and then iteratte through domain.classes() on
> >>each.  What ought I be doing?
> >>
> >>
> >>>
> >>>By the way, now had a chance to look at the latest version of
> the action
> >>>view (could we rename this to operation view to be consistent with the
> >>>metamodel?)
> >>
> >>"Operation view" it is.  Another chance for SVN to screw up...
> >>
> >>
> >>I have to say that it works rather better than I thought, which
> >>
> >>>is nice.  I still think a slightly prettier version will be
> needed at some
> >>>stage - one that *doesn't* rely on colours - but its more than
> good enough
> >>>for now.  Thanks.
> >>
> >>I'm thinking of decorated icons which indicate:
> >>- nullability
> >>- validity
> >>- anything else you can think of.
> >>These icons would be used by FieldBuilders too.
> >>However that's for later.
> >>
> >>
> >>>One other thing it needs to do (though this is a bit of a
> nice-to-have) is
> >>>to remember any values for parameters when switching between editors.
> >>>Otherwise the view is effectively modal because the user
> cannot leave what
> >>>they were doing and come back to it.  But add that to the
> "to-do" list if
> >>>its not easy to implement - I'd rather see collections next.
> >>>
> >>
> >>A-ha!  I had it in my head that you wanted the ops view to remember
> >>values per instance - which is what it currently does.  At first glance
> >>to make its state essentially static should be trivial.  However...
> >>How do we handle validation of values across instances?
> >>Coupla examples:
> >>An op becomes invalid because the new focus instance has a different
> >>state - easy - just disable.
> >>But what about an inapplicable parameter value?  Disable / clear?
> >>I'll have a think about how best to do this.
> >>
> >>
> >>>Cheers
> >>>Dan
> >>>
> >>>
> >>>
> >>>
> >>
> >>--
> >>Mike Evans
> >>Incremental Ltd.
> >>www.incremental.eu.com
> >>
> >>_______________________________________________
> >>Rcpviewer-contributors mailing list
> >>Rcpviewer-contributors at lists.berlios.de
> >>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >
> >
> >
> >
> >
> >
> > _______________________________________________
> > Rcpviewer-contributors mailing list
> > Rcpviewer-contributors at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >
> >
>
> --
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
>
>




From dan at haywood-associates.co.uk  Wed Aug  3 00:28:01 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Tue, 2 Aug 2005 23:28:01 +0100
Subject: [Rcpviewer-contributors] Operation invokability (was Re: running petstore against current gui...)
In-Reply-To: <42EF1B78.7080607@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKOEAEDEAA.dan@haywood-associates.co.uk>

> >
> > One other thing it needs to do (though this is a bit of a
> nice-to-have) is
> > to remember any values for parameters when switching between editors.
> > Otherwise the view is effectively modal because the user cannot
> leave what
> > they were doing and come back to it.  But add that to the
> "to-do" list if
> > its not easy to implement - I'd rather see collections next.
> >
>
> A-ha!  I had it in my head that you wanted the ops view to remember
> values per instance - which is what it currently does.  At first glance
> to make its state essentially static should be trivial.  However...
> How do we handle validation of values across instances?
> Coupla examples:
> An op becomes invalid because the new focus instance has a different
> state - easy - just disable.
> But what about an inapplicable parameter value?  Disable / clear?
> I'll have a think about how best to do this.


My apologies - the behaviour you have (ops view parameters per instance)
*is* what I wanted.  Don't know what I thought I was seeing when I wrote my
earlier email.

That said, the point you raise still applies because of the a-modal nature
of the design.  Suppose that there are 10 widgets in stock, and Order A.1
for Customer A (not yet saved) is for 5.  The save operation is enabled
because we do have enough widgets for the order (we don't support
backorders).  We then create Order B.1 for Customer B is for 6 widgets, and
we save that immediately.  When we go back to the still-to-be-saved Order
A.1, its save operation should not be disabled because there are only 4
widgets in stock.

I have a solution, though.  You recall I said I wanted to create an
IOperation that you could then register listeners on.  This would be
analogous to the IDomainObject that the editors listen upon.  So one of the
things callbacks would be the usability (invokability) of an operation.  So,
each entry in your ops view would be backed by a corresponding IOperation.

How to accomplish this magic?  Well, first I will have a central registry of
all currently instantiated IOperations, held in a WeakHashMap in some
singleton.  Whenever any operation is performed on any object, we then run
through all IOperations and get them to work out if they can be invoked or
not.  If they determine that they are now in a different state (cannot now
be invoked when previously could, or vice versa), then they will notify
their listeners.

And how to make sure that after any operation is performed (eg save() of
Order B.1) that we do this impact analysis of all instantiated IOperations?
Using aspects, of course (probably an after() pointcut or equivalent).

What I don't like about this design is that we are effectively polling all
pending operations on the off-chance that some of them will have changed
their state.  But other than somehow declaratively specifying the impact of
any given operation, I can't see any better solution/

I suspect that these IOperations might be part of the forthcoming job stuff,
though they are very much in the ...domain plugin (model) rather than the
...gui (view).

Dan






> -----Original Message-----
> From: rcpviewer-contributors-admin at berlios.de
> [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
> Sent: 02 August 2005 08:07
> To: Dan Haywood
> Cc: rcpviewer-contributors at lists.berlios.de
> Subject: [Rcpviewer-contributors] Re: running petstore against current
> gui...
>
>
> Responses below...
>
> Mike E.
>
>
>
> Dan Haywood wrote:
>
> > ... thrown up a couple of things, dead easy to fix I'm sure.
> >
> > 1. if you instantiate an Order then fails to build the editor:
> >
> > DateFieldBuilder:
> >
> > 		public void setGuiValue(Object obj) {
> > 			if ( !(obj instanceof Date) ) throw new
> IllegalArgumentException();
> > 			_text.setText( FORMATTER.format( (Date)obj ) );
> >
> > 		}
> >
> >
> > because obj is null.
> >
> > Might just need a guard against null?  But I remember you
> saying that null
> > handling was on your todo list.
>
> Ooops - null check indeed required - added and committed.
>
> >
> >
> > 2. I'm only registering 4 classes, but all domain classes appear in the
> > classbar view.  Could you show only the 4 classes in this view?
>
> Err... it being early I may be being dumb but aren't domain classes by
> definition those that are registered?  Have a look at
> DomainRegistryUtil.iterateAllClasses() - I basically get all domains
> from the domain registry and then iteratte through domain.classes() on
> each.  What ought I be doing?
>
> >
> >
> > By the way, now had a chance to look at the latest version of the action
> > view (could we rename this to operation view to be consistent with the
> > metamodel?)
>
> "Operation view" it is.  Another chance for SVN to screw up...
>
>
> I have to say that it works rather better than I thought, which
> > is nice.  I still think a slightly prettier version will be
> needed at some
> > stage - one that *doesn't* rely on colours - but its more than
> good enough
> > for now.  Thanks.
>
> I'm thinking of decorated icons which indicate:
> - nullability
> - validity
> - anything else you can think of.
> These icons would be used by FieldBuilders too.
> However that's for later.
>
> >
> > One other thing it needs to do (though this is a bit of a
> nice-to-have) is
> > to remember any values for parameters when switching between editors.
> > Otherwise the view is effectively modal because the user cannot
> leave what
> > they were doing and come back to it.  But add that to the
> "to-do" list if
> > its not easy to implement - I'd rather see collections next.
> >
>
> A-ha!  I had it in my head that you wanted the ops view to remember
> values per instance - which is what it currently does.  At first glance
> to make its state essentially static should be trivial.  However...
> How do we handle validation of values across instances?
> Coupla examples:
> An op becomes invalid because the new focus instance has a different
> state - easy - just disable.
> But what about an inapplicable parameter value?  Disable / clear?
> I'll have a think about how best to do this.
>
> >
> > Cheers
> > Dan
> >
> >
> >
> >
>
> --
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
>
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>




From dan at haywood-associates.co.uk  Wed Aug  3 05:01:06 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 3 Aug 2005 04:01:06 +0100
Subject: [Rcpviewer-contributors] Bugette?
In-Reply-To: <42EF3680.6060807@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKOEAFDEAA.dan@haywood-associates.co.uk>

The name of the attribute is derived from the accessor (or the mutator if
there is no accessor).   This is following JavaBean conventions.

So, public String getColor() will yield an attribute named "color".

If you really want underscores, then you could have:

public String get_color() should yield an attribute named "_color".  But who
would want to write code like that?


---
By the way, I've decided I don't like underscores at the beginning of
instance variables names.  I used to write:

   private String firstName;
   get<hit ctrl+space here>
   set<hit ctrl+space here>

and Eclipse would write my getFirstName() and setFirstName() method.  But if
the instance variable is written:

   private String _firstName;

then the get<hit ctrl+space here> / set<hit ctrl+space here> trick doesn't
work.

Any workaround or alternatively a way to teach Eclipse of the underscore
coding convention???

Dan

> -----Original Message-----
> From: rcpviewer-contributors-admin at berlios.de
> [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
> Sent: 02 August 2005 10:02
> To: Dan Haywood
> Cc: rcpviewer-contributors at lists.berlios.de
> Subject: [Rcpviewer-contributors] Bugette?
>
>
> Dan,
>
> Quickie bug for you.
> The underscore on the beginning of an attribute name seems to get
> dropped somewhere during model instantiation.
> I am getting null attributes out of NotifyListenersAspect.
> Current workaround is not to have underscores in the name.
>
> Mike E.
>
> --
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
>
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>




From mike.evans at incremental.eu.com  Wed Aug  3 08:29:21 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Wed, 03 Aug 2005 07:29:21 +0100
Subject: [Rcpviewer-contributors] Bugette?
In-Reply-To: <LGEELLOAEBMLCOGIKLMKOEAFDEAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKOEAFDEAA.dan@haywood-associates.co.uk>
Message-ID: <42F06441.7090509@incremental.eu.com>

Okey dokey - variable prefixes might be something to handle within 
tooling later.

Eclipse can handle any amount of hungarian-notation rubbish as well as 
humble underscores via Preference / Java / Code Style / Fields / Prefix List

On a related issue - I have just taken my first look (!) at the official 
JavaBeans spec and find no 'design pattern' (as they call it) for 
accessors and mutators for Collections (I suppose not surprising as the 
spec is older than the Collections concept).  Could we define one?  This 
way the GUI can cleverer with collection manipulation.
I would suggest that your convention addToXXX and removeFromXXX where 
XXX is a variable name would do.  The if the GUI found such methods it 
can automtaically add DnD support etc.  Or alternatively the metadata 
could furnish the GUI with such info...?

Mike E.

Dan Haywood wrote:

> The name of the attribute is derived from the accessor (or the mutator if
> there is no accessor).   This is following JavaBean conventions.
> 
> So, public String getColor() will yield an attribute named "color".
> 
> If you really want underscores, then you could have:
> 
> public String get_color() should yield an attribute named "_color".  But who
> would want to write code like that?
> 
> 
> ---
> By the way, I've decided I don't like underscores at the beginning of
> instance variables names.  I used to write:
> 
>    private String firstName;
>    get<hit ctrl+space here>
>    set<hit ctrl+space here>
> 
> and Eclipse would write my getFirstName() and setFirstName() method.  But if
> the instance variable is written:
> 
>    private String _firstName;
> 
> then the get<hit ctrl+space here> / set<hit ctrl+space here> trick doesn't
> work.
> 
> Any workaround or alternatively a way to teach Eclipse of the underscore
> coding convention???
> 
> Dan
> 
> 
>>-----Original Message-----
>>From: rcpviewer-contributors-admin at berlios.de
>>[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
>>Sent: 02 August 2005 10:02
>>To: Dan Haywood
>>Cc: rcpviewer-contributors at lists.berlios.de
>>Subject: [Rcpviewer-contributors] Bugette?
>>
>>
>>Dan,
>>
>>Quickie bug for you.
>>The underscore on the beginning of an attribute name seems to get
>>dropped somewhere during model instantiation.
>>I am getting null attributes out of NotifyListenersAspect.
>>Current workaround is not to have underscores in the name.
>>
>>Mike E.
>>
>>--
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Wed Aug  3 09:01:15 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Wed, 03 Aug 2005 08:01:15 +0100
Subject: [Rcpviewer-contributors] Operation invokability (was Re: running
 petstore against current gui...)
In-Reply-To: <LGEELLOAEBMLCOGIKLMKOEAEDEAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKOEAEDEAA.dan@haywood-associates.co.uk>
Message-ID: <42F06BBB.3070203@incremental.eu.com>

Oh good grief - of course.
I can't spend much time today on this (midway through major/catastrophic 
change on Epic) however my immediate thoughts are...

Two negatives to your suggested approach:
1) Checks occur only when the operation is invoked.  So far we have kept 
the gui pre-emptive - preventing the user getting into an error state, 
rather than handling one after the event.  This would be nice to continue.
2) As you say we end up polling every op every time.  (Actually I think 
this is less of an issue than we might think as there will not be that 
many).

So how about adapting your approach thus.  Whenever an operation with a 
contraint (I think you call them pre-requisite) is instantiated, we 
extract the state that needs to be polled and put that into the 
registry.  Then this state and the op listen on each other.  When a 
second op comes along also constrained on this state it will be added to 
the listeners.  Then any op invocation - and better, change of args - 
can be vetoed when necessary.
So in your example the Order.save() op is constrained by stock so the 
Stock object is the state recorded.

An additional lovely might be to have a 'pending' state so that even 
unsaved Order's could veto each other...

I have not thought this through on a generic level yet, but wotdya think?

Mike E.

Dan Haywood wrote:

>>>One other thing it needs to do (though this is a bit of a
>>
>>nice-to-have) is
>>
>>>to remember any values for parameters when switching between editors.
>>>Otherwise the view is effectively modal because the user cannot
>>
>>leave what
>>
>>>they were doing and come back to it.  But add that to the
>>
>>"to-do" list if
>>
>>>its not easy to implement - I'd rather see collections next.
>>>
>>
>>A-ha!  I had it in my head that you wanted the ops view to remember
>>values per instance - which is what it currently does.  At first glance
>>to make its state essentially static should be trivial.  However...
>>How do we handle validation of values across instances?
>>Coupla examples:
>>An op becomes invalid because the new focus instance has a different
>>state - easy - just disable.
>>But what about an inapplicable parameter value?  Disable / clear?
>>I'll have a think about how best to do this.
> 
> 
> 
> My apologies - the behaviour you have (ops view parameters per instance)
> *is* what I wanted.  Don't know what I thought I was seeing when I wrote my
> earlier email.
> 
> That said, the point you raise still applies because of the a-modal nature
> of the design.  Suppose that there are 10 widgets in stock, and Order A.1
> for Customer A (not yet saved) is for 5.  The save operation is enabled
> because we do have enough widgets for the order (we don't support
> backorders).  We then create Order B.1 for Customer B is for 6 widgets, and
> we save that immediately.  When we go back to the still-to-be-saved Order
> A.1, its save operation should not be disabled because there are only 4
> widgets in stock.
> 
> I have a solution, though.  You recall I said I wanted to create an
> IOperation that you could then register listeners on.  This would be
> analogous to the IDomainObject that the editors listen upon.  So one of the
> things callbacks would be the usability (invokability) of an operation.  So,
> each entry in your ops view would be backed by a corresponding IOperation.
> 
> How to accomplish this magic?  Well, first I will have a central registry of
> all currently instantiated IOperations, held in a WeakHashMap in some
> singleton.  Whenever any operation is performed on any object, we then run
> through all IOperations and get them to work out if they can be invoked or
> not.  If they determine that they are now in a different state (cannot now
> be invoked when previously could, or vice versa), then they will notify
> their listeners.
> 
> And how to make sure that after any operation is performed (eg save() of
> Order B.1) that we do this impact analysis of all instantiated IOperations?
> Using aspects, of course (probably an after() pointcut or equivalent).
> 
> What I don't like about this design is that we are effectively polling all
> pending operations on the off-chance that some of them will have changed
> their state.  But other than somehow declaratively specifying the impact of
> any given operation, I can't see any better solution/
> 
> I suspect that these IOperations might be part of the forthcoming job stuff,
> though they are very much in the ...domain plugin (model) rather than the
> ...gui (view).
> 
> Dan
> 
> 
> 
> 
> 
> 
> 
>>-----Original Message-----
>>From: rcpviewer-contributors-admin at berlios.de
>>[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
>>Sent: 02 August 2005 08:07
>>To: Dan Haywood
>>Cc: rcpviewer-contributors at lists.berlios.de
>>Subject: [Rcpviewer-contributors] Re: running petstore against current
>>gui...
>>
>>
>>Responses below...
>>
>>Mike E.
>>
>>
>>
>>Dan Haywood wrote:
>>
>>
>>>... thrown up a couple of things, dead easy to fix I'm sure.
>>>
>>>1. if you instantiate an Order then fails to build the editor:
>>>
>>>DateFieldBuilder:
>>>
>>>		public void setGuiValue(Object obj) {
>>>			if ( !(obj instanceof Date) ) throw new
>>
>>IllegalArgumentException();
>>
>>>			_text.setText( FORMATTER.format( (Date)obj ) );
>>>
>>>		}
>>>
>>>
>>>because obj is null.
>>>
>>>Might just need a guard against null?  But I remember you
>>
>>saying that null
>>
>>>handling was on your todo list.
>>
>>Ooops - null check indeed required - added and committed.
>>
>>
>>>
>>>2. I'm only registering 4 classes, but all domain classes appear in the
>>>classbar view.  Could you show only the 4 classes in this view?
>>
>>Err... it being early I may be being dumb but aren't domain classes by
>>definition those that are registered?  Have a look at
>>DomainRegistryUtil.iterateAllClasses() - I basically get all domains
>>from the domain registry and then iteratte through domain.classes() on
>>each.  What ought I be doing?
>>
>>
>>>
>>>By the way, now had a chance to look at the latest version of the action
>>>view (could we rename this to operation view to be consistent with the
>>>metamodel?)
>>
>>"Operation view" it is.  Another chance for SVN to screw up...
>>
>>
>>I have to say that it works rather better than I thought, which
>>
>>>is nice.  I still think a slightly prettier version will be
>>
>>needed at some
>>
>>>stage - one that *doesn't* rely on colours - but its more than
>>
>>good enough
>>
>>>for now.  Thanks.
>>
>>I'm thinking of decorated icons which indicate:
>>- nullability
>>- validity
>>- anything else you can think of.
>>These icons would be used by FieldBuilders too.
>>However that's for later.
>>
>>
>>>One other thing it needs to do (though this is a bit of a
>>
>>nice-to-have) is
>>
>>>to remember any values for parameters when switching between editors.
>>>Otherwise the view is effectively modal because the user cannot
>>
>>leave what
>>
>>>they were doing and come back to it.  But add that to the
>>
>>"to-do" list if
>>
>>>its not easy to implement - I'd rather see collections next.
>>>
>>
>>A-ha!  I had it in my head that you wanted the ops view to remember
>>values per instance - which is what it currently does.  At first glance
>>to make its state essentially static should be trivial.  However...
>>How do we handle validation of values across instances?
>>Coupla examples:
>>An op becomes invalid because the new focus instance has a different
>>state - easy - just disable.
>>But what about an inapplicable parameter value?  Disable / clear?
>>I'll have a think about how best to do this.
>>
>>
>>>Cheers
>>>Dan
>>>
>>>
>>>
>>>
>>
>>--
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Wed Aug  3 09:32:02 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 3 Aug 2005 07:32:02 GMT
Subject: [Rcpviewer-contributors] addTo/removeFrom conventions (was Bugette?)
Message-ID: <Zen-1E0DjO-0000WS-MU@pythagoras.zen.co.uk>

Mike,

I'll check out that Eclipse option for underscores - thx.

Re: addTo/removeFrom - yes, you're on the money here.  Certainly my intent is that only if there is a public addTo should it be possible to add to the collection from the GUI - otherwise the collection can only be added to programmatically.  Similarly for public removeTo.

If you look at the tests (TestDomainObjectCollection in ...domain.runtime.tests) you'll see that you can add or remove from a collection using the IDomainObject. 

An addTo/removeFrom with anything less than public visibility should not be exposed.  Looking at the code that does this (RuntimeDomainClass#identifyAssociatorsAndDissociators), it looks like I'm not checking the visibility, so I'll fix this.

By the way, you'll also note that there must be a @TypeOf annotation.  That's because there could be some collections that have no addTo/removeFrom methods so we would have no way of knowing what the collection is of (generics are erased at runtime, obviously).

Separately, you might also have noticed a @ContainerOf annotation.  This means that the container has composition (aggregation by value, or if you are DB guy, then an identifying relationship) - in other words should be under the exclusive control of the container.  In petstore CustomerOrder/OrderLine is like this.  In these situations it also should not be possible to add to the collection through the GUI.  I haven't implemented this yet, but when I do it should be transparent to the GUI - there won't be an addTo available.


Dan
------------

Mike Evans <mike.evans at incremental.eu.com> wrote :

> On a related issue - I have just taken my first look (!) at the official 
> JavaBeans spec and find no 'design pattern' (as they call it) for 
> accessors and mutators for Collections (I suppose not surprising as the 
> spec is older than the Collections concept).  Could we define one?  This 
> way the GUI can cleverer with collection manipulation.
> I would suggest that your convention addToXXX and removeFromXXX where 
> XXX is a variable name would do.  The if the GUI found such methods it 
> can automtaically add DnD support etc.  Or alternatively the metadata 
> could furnish the GUI with such info...?
> 
> Mike E.
> 
> Dan Haywood wrote:
> 
> > The name of the attribute is derived from the accessor (or the mutator if
> > there is no accessor).   This is following JavaBean conventions.
> > 
> > So, public String getColor() will yield an attribute named "color".
> > 
> > If you really want underscores, then you could have:
> > 
> > public String get_color() should yield an attribute named "_color".  But
> who
> > would want to write code like that?
> > 
> > 
> > ---
> > By the way, I've decided I don't like underscores at the beginning of
> > instance variables names.  I used to write:
> > 
> >    private String firstName;
> >    get
> >    set
> > 
> > and Eclipse would write my getFirstName() and setFirstName() method.  But
> if
> > the instance variable is written:
> > 
> >    private String _firstName;
> > 
> > then the get / set trick doesn't
> > work.
> > 
> > Any workaround or alternatively a way to teach Eclipse of the underscore
> > coding convention???
> > 
> > Dan
> > 
> > 
> >>-----Original Message-----
> >>From: rcpviewer-contributors-admin at berlios.de
> >>[mailto:rcpviewer-contributors-admin at berlios.de]On
> Behalf Of Mike Evans
> >>Sent: 02 August 2005 10:02
> >>To: Dan Haywood
> >>Cc: rcpviewer-contributors at lists.berlios.de
> >>Subject: [Rcpviewer-contributors] Bugette?
> >>
> >>
> >>Dan,
> >>
> >>Quickie bug for you.
> >>The underscore on the beginning of an attribute name seems to get
> >>dropped somewhere during model instantiation.
> >>I am getting null attributes out of NotifyListenersAspect.
> >>Current workaround is not to have underscores in the name.
> >>
> >>Mike E.
> >>
> >>--
> >>Mike Evans
> >>Incremental Ltd.
> >>www.incremental.eu.com
> >>
> >>_______________________________________________
> >>Rcpviewer-contributors mailing list
> >>Rcpviewer-contributors at lists.berlios.de
> >>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >>
> > 
> > 
> > 
> > _______________________________________________
> > Rcpviewer-contributors mailing list
> > Rcpviewer-contributors at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com







From mike.evans at incremental.eu.com  Thu Aug  4 08:26:00 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Thu, 04 Aug 2005 07:26:00 +0100
Subject: [Rcpviewer-contributors] Operation invokability (was Re: running
 petstore against current gui...)
In-Reply-To: <Zen-1E0Dpm-0001Gm-9k@rutherford.zen.co.uk>
References: <Zen-1E0Dpm-0001Gm-9k@rutherford.zen.co.uk>
Message-ID: <42F1B4F8.3060700@incremental.eu.com>

The problem with running through the 'pre' method is that it will not 
help me validate / invalidate individual arguments as they are set on 
the gui.
eg.
order( int quantity, ProductType type ) {
    ...
}

preMethod() {
    return ( getStock( type) >= quantity );
}

I was thinking of some way of validating each argument as it is entered 
on the gui.  In this case product type must be set before quantity can 
be.  However the single pre method would not help us here.  What I 
really need is a pre-check per argument.

Or is this overkill?

Mike E.


Dan Haywood wrote:
> Mike,
> 
> 1. I think you are right for a multi-user system, it could be some other user making a change that could cause one of our pending ops to become invalid.  So really we need to be listening on a message bus for changes.
> 
> In a single user system the only thing that could cause a change would be the invocation of an operation.
> 
> Where this wants to head to I think is a message bus (JMS or equiv) that picks up changes to objects either from ourselves or from some other user.  When we invoke an operation we publish any changes onto this bus.  Then we act as a subscriber to this bus; it is this subscriber that checks against instantiated ops.
> 
> Not sure if I want to embed OpenJMS just now :-)  so might create a simple in-memory queue to represent this bus.
> 
> 
> 2. The state that needs to be polled should be encapsulated in the op's ...Pre method.  So all I envisaged was running through each instantiated IOperation and calling its ...Pre method if it had one (some won't, of course).  I agree that this polling won't really hurt us, it's just that "polling" is one of those words I look out for.
> 
> Dan
> ------------
> Mike Evans <mike.evans at incremental.eu.com> wrote :
> 
> 
>>Oh good grief - of course.
>>I can't spend much time today on this (midway through major/catastrophic 
>>change on Epic) however my immediate thoughts are...
>>
>>Two negatives to your suggested approach:
>>1) Checks occur only when the operation is invoked.  So far we have kept 
>>the gui pre-emptive - preventing the user getting into an error state, 
>>rather than handling one after the event.  This would be nice to continue.
>>2) As you say we end up polling every op every time.  (Actually I think 
>>this is less of an issue than we might think as there will not be that 
>>many).
>>
>>So how about adapting your approach thus.  Whenever an operation with a 
>>contraint (I think you call them pre-requisite) is instantiated, we 
>>extract the state that needs to be polled and put that into the 
>>registry.  Then this state and the op listen on each other.  When a 
>>second op comes along also constrained on this state it will be added to 
>>the listeners.  Then any op invocation - and better, change of args - 
>>can be vetoed when necessary.
>>So in your example the Order.save() op is constrained by stock so the 
>>Stock object is the state recorded.
>>
>>An additional lovely might be to have a 'pending' state so that even 
>>unsaved Order's could veto each other...
>>
>>I have not thought this through on a generic level yet, but wotdya think?
>>
>>Mike E.
>>
>>Dan Haywood wrote:
>>
>>
>>>>>One other thing it needs to do (though this is a bit of a
>>>>
>>>>nice-to-have) is
>>>>
>>>>
>>>>>to remember any values for parameters when switching between editors.
>>>>>Otherwise the view is effectively modal because the user cannot
>>>>
>>>>leave what
>>>>
>>>>
>>>>>they were doing and come back to it.  But add that to the
>>>>
>>>>"to-do" list if
>>>>
>>>>
>>>>>its not easy to implement - I'd rather see collections next.
>>>>>
>>>>
>>>>A-ha!  I had it in my head that you wanted the ops view to remember
>>>>values per instance - which is what it currently does.  At first glance
>>>>to make its state essentially static should be trivial.  However...
>>>>How do we handle validation of values across instances?
>>>>Coupla examples:
>>>>An op becomes invalid because the new focus instance has a different
>>>>state - easy - just disable.
>>>>But what about an inapplicable parameter value?  Disable / clear?
>>>>I'll have a think about how best to do this.
>>>
>>>
>>>
>>>My apologies - the behaviour you have (ops view parameters per instance)
>>>*is* what I wanted.  Don't know what I thought I was seeing when I wrote
>>
>>my
>>
>>>earlier email.
>>>
>>>That said, the point you raise still applies because of the a-modal nature
>>>of the design.  Suppose that there are 10 widgets in stock, and Order A.1
>>>for Customer A (not yet saved) is for 5.  The save operation is enabled
>>>because we do have enough widgets for the order (we don't support
>>>backorders).  We then create Order B.1 for Customer B is for 6 widgets,
>>
>>and
>>
>>>we save that immediately.  When we go back to the still-to-be-saved Order
>>>A.1, its save operation should not be disabled because there are only 4
>>>widgets in stock.
>>>
>>>I have a solution, though.  You recall I said I wanted to create an
>>>IOperation that you could then register listeners on.  This would be
>>>analogous to the IDomainObject that the editors listen upon.  So one of
>>
>>the
>>
>>>things callbacks would be the usability (invokability) of an operation. 
>>
>>So,
>>
>>>each entry in your ops view would be backed by a corresponding IOperation.
>>>
>>>How to accomplish this magic?  Well, first I will have a central registry
>>
>>of
>>
>>>all currently instantiated IOperations, held in a WeakHashMap in some
>>>singleton.  Whenever any operation is performed on any object, we then run
>>>through all IOperations and get them to work out if they can be invoked or
>>>not.  If they determine that they are now in a different state (cannot now
>>>be invoked when previously could, or vice versa), then they will notify
>>>their listeners.
>>>
>>>And how to make sure that after any operation is performed (eg save() of
>>>Order B.1) that we do this impact analysis of all instantiated
>>
>>IOperations?
>>
>>>Using aspects, of course (probably an after() pointcut or equivalent).
>>>
>>>What I don't like about this design is that we are effectively polling all
>>>pending operations on the off-chance that some of them will have changed
>>>their state.  But other than somehow declaratively specifying the impact
>>
>>of
>>
>>>any given operation, I can't see any better solution/
>>>
>>>I suspect that these IOperations might be part of the forthcoming job
>>
>>stuff,
>>
>>>though they are very much in the ...domain plugin (model) rather than the
>>>...gui (view).
>>>
>>>Dan
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>>-----Original Message-----
>>>>From: rcpviewer-contributors-admin at berlios.de
>>>>[mailto:rcpviewer-contributors-admin at berlios.de]On
>>
>>Behalf Of Mike Evans
>>
>>>>Sent: 02 August 2005 08:07
>>>>To: Dan Haywood
>>>>Cc: rcpviewer-contributors at lists.berlios.de
>>>>Subject: [Rcpviewer-contributors] Re: running petstore against current
>>>>gui...
>>>>
>>>>
>>>>Responses below...
>>>>
>>>>Mike E.
>>>>
>>>>
>>>>
>>>>Dan Haywood wrote:
>>>>
>>>>
>>>>
>>>>>... thrown up a couple of things, dead easy to fix I'm sure.
>>>>>
>>>>>1. if you instantiate an Order then fails to build the editor:
>>>>>
>>>>>DateFieldBuilder:
>>>>>
>>>>>		public void setGuiValue(Object obj) {
>>>>>			if ( !(obj instanceof Date) ) throw new
>>>>
>>>>IllegalArgumentException();
>>>>
>>>>
>>>>>			_text.setText( FORMATTER.format( (Date)obj ) );
>>>>>
>>>>>		}
>>>>>
>>>>>
>>>>>because obj is null.
>>>>>
>>>>>Might just need a guard against null?  But I remember you
>>>>
>>>>saying that null
>>>>
>>>>
>>>>>handling was on your todo list.
>>>>
>>>>Ooops - null check indeed required - added and committed.
>>>>
>>>>
>>>>
>>>>>2. I'm only registering 4 classes, but all domain classes appear in the
>>>>>classbar view.  Could you show only the 4 classes in this view?
>>>>
>>>>Err... it being early I may be being dumb but aren't domain classes by
>>>>definition those that are registered?  Have a look at
>>>>DomainRegistryUtil.iterateAllClasses() - I basically get all domains
>>>
>>>>from the domain registry and then iteratte through domain.classes() on
>>>
>>>>each.  What ought I be doing?
>>>>
>>>>
>>>>
>>>>>By the way, now had a chance to look at the latest version of the action
>>>>>view (could we rename this to operation view to be consistent with the
>>>>>metamodel?)
>>>>
>>>>"Operation view" it is.  Another chance for SVN to screw up...
>>>>
>>>>
>>>>I have to say that it works rather better than I thought, which
>>>>
>>>>
>>>>>is nice.  I still think a slightly prettier version will be
>>>>
>>>>needed at some
>>>>
>>>>
>>>>>stage - one that *doesn't* rely on colours - but its more than
>>>>
>>>>good enough
>>>>
>>>>
>>>>>for now.  Thanks.
>>>>
>>>>I'm thinking of decorated icons which indicate:
>>>>- nullability
>>>>- validity
>>>>- anything else you can think of.
>>>>These icons would be used by FieldBuilders too.
>>>>However that's for later.
>>>>
>>>>
>>>>
>>>>>One other thing it needs to do (though this is a bit of a
>>>>
>>>>nice-to-have) is
>>>>
>>>>
>>>>>to remember any values for parameters when switching between editors.
>>>>>Otherwise the view is effectively modal because the user cannot
>>>>
>>>>leave what
>>>>
>>>>
>>>>>they were doing and come back to it.  But add that to the
>>>>
>>>>"to-do" list if
>>>>
>>>>
>>>>>its not easy to implement - I'd rather see collections next.
>>>>>
>>>>
>>>>A-ha!  I had it in my head that you wanted the ops view to remember
>>>>values per instance - which is what it currently does.  At first glance
>>>>to make its state essentially static should be trivial.  However...
>>>>How do we handle validation of values across instances?
>>>>Coupla examples:
>>>>An op becomes invalid because the new focus instance has a different
>>>>state - easy - just disable.
>>>>But what about an inapplicable parameter value?  Disable / clear?
>>>>I'll have a think about how best to do this.
>>>>
>>>>
>>>>
>>>>>Cheers
>>>>>Dan
>>>>>
>>>>>
>>>>>
>>>>>
>>>>
>>>>--
>>>>Mike Evans
>>>>Incremental Ltd.
>>>>www.incremental.eu.com
>>>>
>>>>_______________________________________________
>>>>Rcpviewer-contributors mailing list
>>>>Rcpviewer-contributors at lists.berlios.de
>>>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>>>
>>>
>>>
>>>
>>>_______________________________________________
>>>Rcpviewer-contributors mailing list
>>>Rcpviewer-contributors at lists.berlios.de
>>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>>
>>>
>>
>>-- 
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
> 
> 
> 
> 
> 
> 
> 
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Thu Aug  4 09:20:29 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 4 Aug 2005 08:20:29 +0100
Subject: [Rcpviewer-contributors] Operation invokability (was Re: running petstore against current gui...)
In-Reply-To: <42F1B4F8.3060700@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKOEAIDEAA.dan@haywood-associates.co.uk>

Mike -
I think everything you've raised I have covered.  The trick is that the pre
method takes the argument(s) to be validated.  There's an example already in
the petstore app in Category:

    /**
     * Re-classify (move) a {@link Product} from its existing category into
     * this category.
     *
     * <p>
     * The product is removed from the set of products of its existing
     * category (if any), and then added to the set of products of this
     * category.
     */
    @DescribedAs("Move a product from its current category into this
category")
    public void reclassify(
    		@DescribedAs("Product to be reclassified")
    		final Product product) {

    	Category existingCategory = product.getCategory();
    	if (existingCategory != null) {
        	existingCategory.removeFromProducts(product);
    	}
    	this.addToProducts(product);

    }
    /**
     * Ensure that the supplied product is already in a different category.
     */
    public IPrerequisites reclassifyPre(
    		final Product product) {
    	return Prerequisites.require(
    			product.getCategory() != this,
    			"Product is already in this category.");
    }

This also works if there are no arguments, eg in Customer:

    public CustomerOrder placeOrder() {
    	CustomerOrder order =
    		getAppContainer().createTransient(CustomerOrder.class);
    	order.init(this);
    	return order;
    }
    /**
     * The customer must have been persisted before being able to place
orders.
     */
    public IPrerequisites placeOrderPre() {
    	return Prerequisites.require(isPersistent(), "Must be persistent");
    }



Although I've written the petstore app, I don't think that IDomain supports
all of this fully, will check and implement.  See also
http://www.haywood-associates.co.uk/rcpviewer/space/features/operation-preco
nditions for a discussion on this (slightly out of date).

By the way, for attributes there's something similar though it's a little
more complex because we have two conditions: (a) whether the attribute's
field is editable at all, and (b) whether a candidate value is valid.  An
example of (a) is in Account:

    public String getUserId() {
        return _userId;
    }
    /**
     * Cannot change user id (once persisted).
     *
     * @return
     */
    public IPrerequisites getUserIdPre() {
       return require(!isPersistent(), "User Id cannot be changed");
    }

An example of (b) is in also in Account:

    public String getPassword() {
        return _password;
    }
    public void setPassword(final String password) {
        _password = password;
    }
    /**
     * Ensure that the password is strong enough (in terms of containing
     * a mix of alphabetic characters, numeric characters, punctuation and
     * long enough).
     */
    public IPrerequisites setPasswordPre(final String password) {
          return require(isStrongEnough(password), "Password is not strong
enough");
    }

Again there's a write-up of this approach (slightly out of date) at
http://www.haywood-associates.co.uk/rcpviewer/space/features/attribute-preco
nditions

And again I need to double check how much of this is actually implemented...

Let me know if you spot any problems with this.

Dan

> -----Original Message-----
> From: Mike Evans [mailto:mike.evans at incremental.eu.com]
> Sent: 04 August 2005 07:26
> To: Dan Haywood
> Cc: rcpviewer-contributors at lists.berlios.de
> Subject: Re: [Rcpviewer-contributors] Operation invokability (was Re:
> running petstore against current gui...)
>
>
> The problem with running through the 'pre' method is that it will not
> help me validate / invalidate individual arguments as they are set on
> the gui.
> eg.
> order( int quantity, ProductType type ) {
>     ...
> }
>
> preMethod() {
>     return ( getStock( type) >= quantity );
> }
>
> I was thinking of some way of validating each argument as it is entered
> on the gui.  In this case product type must be set before quantity can
> be.  However the single pre method would not help us here.  What I
> really need is a pre-check per argument.
>
> Or is this overkill?
>
> Mike E.
>
>
> Dan Haywood wrote:
> > Mike,
> >
> > 1. I think you are right for a multi-user system, it could be
> some other user making a change that could cause one of our
> pending ops to become invalid.  So really we need to be listening
> on a message bus for changes.
> >
> > In a single user system the only thing that could cause a
> change would be the invocation of an operation.
> >
> > Where this wants to head to I think is a message bus (JMS or
> equiv) that picks up changes to objects either from ourselves or
> from some other user.  When we invoke an operation we publish any
> changes onto this bus.  Then we act as a subscriber to this bus;
> it is this subscriber that checks against instantiated ops.
> >
> > Not sure if I want to embed OpenJMS just now :-)  so might
> create a simple in-memory queue to represent this bus.
> >
> >
> > 2. The state that needs to be polled should be encapsulated in
> the op's ...Pre method.  So all I envisaged was running through
> each instantiated IOperation and calling its ...Pre method if it
> had one (some won't, of course).  I agree that this polling won't
> really hurt us, it's just that "polling" is one of those words I
> look out for.
> >
> > Dan
> > ------------
> > Mike Evans <mike.evans at incremental.eu.com> wrote :
> >
> >
> >>Oh good grief - of course.
> >>I can't spend much time today on this (midway through
> major/catastrophic
> >>change on Epic) however my immediate thoughts are...
> >>
> >>Two negatives to your suggested approach:
> >>1) Checks occur only when the operation is invoked.  So far we
> have kept
> >>the gui pre-emptive - preventing the user getting into an error state,
> >>rather than handling one after the event.  This would be nice
> to continue.
> >>2) As you say we end up polling every op every time.  (Actually I think
> >>this is less of an issue than we might think as there will not be that
> >>many).
> >>
> >>So how about adapting your approach thus.  Whenever an operation with a
> >>contraint (I think you call them pre-requisite) is instantiated, we
> >>extract the state that needs to be polled and put that into the
> >>registry.  Then this state and the op listen on each other.  When a
> >>second op comes along also constrained on this state it will be
> added to
> >>the listeners.  Then any op invocation - and better, change of args -
> >>can be vetoed when necessary.
> >>So in your example the Order.save() op is constrained by stock so the
> >>Stock object is the state recorded.
> >>
> >>An additional lovely might be to have a 'pending' state so that even
> >>unsaved Order's could veto each other...
> >>
> >>I have not thought this through on a generic level yet, but
> wotdya think?
> >>
> >>Mike E.
> >>
> >>Dan Haywood wrote:
> >>
> >>
> >>>>>One other thing it needs to do (though this is a bit of a
> >>>>
> >>>>nice-to-have) is
> >>>>
> >>>>
> >>>>>to remember any values for parameters when switching between editors.
> >>>>>Otherwise the view is effectively modal because the user cannot
> >>>>
> >>>>leave what
> >>>>
> >>>>
> >>>>>they were doing and come back to it.  But add that to the
> >>>>
> >>>>"to-do" list if
> >>>>
> >>>>
> >>>>>its not easy to implement - I'd rather see collections next.
> >>>>>
> >>>>
> >>>>A-ha!  I had it in my head that you wanted the ops view to remember
> >>>>values per instance - which is what it currently does.  At
> first glance
> >>>>to make its state essentially static should be trivial.  However...
> >>>>How do we handle validation of values across instances?
> >>>>Coupla examples:
> >>>>An op becomes invalid because the new focus instance has a different
> >>>>state - easy - just disable.
> >>>>But what about an inapplicable parameter value?  Disable / clear?
> >>>>I'll have a think about how best to do this.
> >>>
> >>>
> >>>
> >>>My apologies - the behaviour you have (ops view parameters per
> instance)
> >>>*is* what I wanted.  Don't know what I thought I was seeing
> when I wrote
> >>
> >>my
> >>
> >>>earlier email.
> >>>
> >>>That said, the point you raise still applies because of the
> a-modal nature
> >>>of the design.  Suppose that there are 10 widgets in stock,
> and Order A.1
> >>>for Customer A (not yet saved) is for 5.  The save operation is enabled
> >>>because we do have enough widgets for the order (we don't support
> >>>backorders).  We then create Order B.1 for Customer B is for 6 widgets,
> >>
> >>and
> >>
> >>>we save that immediately.  When we go back to the
> still-to-be-saved Order
> >>>A.1, its save operation should not be disabled because there are only 4
> >>>widgets in stock.
> >>>
> >>>I have a solution, though.  You recall I said I wanted to create an
> >>>IOperation that you could then register listeners on.  This would be
> >>>analogous to the IDomainObject that the editors listen upon.  So one of
> >>
> >>the
> >>
> >>>things callbacks would be the usability (invokability) of an
> operation.
> >>
> >>So,
> >>
> >>>each entry in your ops view would be backed by a corresponding
> IOperation.
> >>>
> >>>How to accomplish this magic?  Well, first I will have a
> central registry
> >>
> >>of
> >>
> >>>all currently instantiated IOperations, held in a WeakHashMap in some
> >>>singleton.  Whenever any operation is performed on any object,
> we then run
> >>>through all IOperations and get them to work out if they can
> be invoked or
> >>>not.  If they determine that they are now in a different state
> (cannot now
> >>>be invoked when previously could, or vice versa), then they will notify
> >>>their listeners.
> >>>
> >>>And how to make sure that after any operation is performed (eg
> save() of
> >>>Order B.1) that we do this impact analysis of all instantiated
> >>
> >>IOperations?
> >>
> >>>Using aspects, of course (probably an after() pointcut or equivalent).
> >>>
> >>>What I don't like about this design is that we are effectively
> polling all
> >>>pending operations on the off-chance that some of them will
> have changed
> >>>their state.  But other than somehow declaratively specifying
> the impact
> >>
> >>of
> >>
> >>>any given operation, I can't see any better solution/
> >>>
> >>>I suspect that these IOperations might be part of the forthcoming job
> >>
> >>stuff,
> >>
> >>>though they are very much in the ...domain plugin (model)
> rather than the
> >>>...gui (view).
> >>>
> >>>Dan
> >>>
> >>>
> >>>
> >>>
> >>>
> >>>
> >>>
> >>>
> >>>>-----Original Message-----
> >>>>From: rcpviewer-contributors-admin at berlios.de
> >>>>[mailto:rcpviewer-contributors-admin at berlios.de]On
> >>
> >>Behalf Of Mike Evans
> >>
> >>>>Sent: 02 August 2005 08:07
> >>>>To: Dan Haywood
> >>>>Cc: rcpviewer-contributors at lists.berlios.de
> >>>>Subject: [Rcpviewer-contributors] Re: running petstore against current
> >>>>gui...
> >>>>
> >>>>
> >>>>Responses below...
> >>>>
> >>>>Mike E.
> >>>>
> >>>>
> >>>>
> >>>>Dan Haywood wrote:
> >>>>
> >>>>
> >>>>
> >>>>>... thrown up a couple of things, dead easy to fix I'm sure.
> >>>>>
> >>>>>1. if you instantiate an Order then fails to build the editor:
> >>>>>
> >>>>>DateFieldBuilder:
> >>>>>
> >>>>>		public void setGuiValue(Object obj) {
> >>>>>			if ( !(obj instanceof Date) ) throw new
> >>>>
> >>>>IllegalArgumentException();
> >>>>
> >>>>
> >>>>>			_text.setText( FORMATTER.format( (Date)obj ) );
> >>>>>
> >>>>>		}
> >>>>>
> >>>>>
> >>>>>because obj is null.
> >>>>>
> >>>>>Might just need a guard against null?  But I remember you
> >>>>
> >>>>saying that null
> >>>>
> >>>>
> >>>>>handling was on your todo list.
> >>>>
> >>>>Ooops - null check indeed required - added and committed.
> >>>>
> >>>>
> >>>>
> >>>>>2. I'm only registering 4 classes, but all domain classes
> appear in the
> >>>>>classbar view.  Could you show only the 4 classes in this view?
> >>>>
> >>>>Err... it being early I may be being dumb but aren't domain classes by
> >>>>definition those that are registered?  Have a look at
> >>>>DomainRegistryUtil.iterateAllClasses() - I basically get all domains
> >>>
> >>>>from the domain registry and then iteratte through domain.classes() on
> >>>
> >>>>each.  What ought I be doing?
> >>>>
> >>>>
> >>>>
> >>>>>By the way, now had a chance to look at the latest version
> of the action
> >>>>>view (could we rename this to operation view to be
> consistent with the
> >>>>>metamodel?)
> >>>>
> >>>>"Operation view" it is.  Another chance for SVN to screw up...
> >>>>
> >>>>
> >>>>I have to say that it works rather better than I thought, which
> >>>>
> >>>>
> >>>>>is nice.  I still think a slightly prettier version will be
> >>>>
> >>>>needed at some
> >>>>
> >>>>
> >>>>>stage - one that *doesn't* rely on colours - but its more than
> >>>>
> >>>>good enough
> >>>>
> >>>>
> >>>>>for now.  Thanks.
> >>>>
> >>>>I'm thinking of decorated icons which indicate:
> >>>>- nullability
> >>>>- validity
> >>>>- anything else you can think of.
> >>>>These icons would be used by FieldBuilders too.
> >>>>However that's for later.
> >>>>
> >>>>
> >>>>
> >>>>>One other thing it needs to do (though this is a bit of a
> >>>>
> >>>>nice-to-have) is
> >>>>
> >>>>
> >>>>>to remember any values for parameters when switching between editors.
> >>>>>Otherwise the view is effectively modal because the user cannot
> >>>>
> >>>>leave what
> >>>>
> >>>>
> >>>>>they were doing and come back to it.  But add that to the
> >>>>
> >>>>"to-do" list if
> >>>>
> >>>>
> >>>>>its not easy to implement - I'd rather see collections next.
> >>>>>
> >>>>
> >>>>A-ha!  I had it in my head that you wanted the ops view to remember
> >>>>values per instance - which is what it currently does.  At
> first glance
> >>>>to make its state essentially static should be trivial.  However...
> >>>>How do we handle validation of values across instances?
> >>>>Coupla examples:
> >>>>An op becomes invalid because the new focus instance has a different
> >>>>state - easy - just disable.
> >>>>But what about an inapplicable parameter value?  Disable / clear?
> >>>>I'll have a think about how best to do this.
> >>>>
> >>>>
> >>>>
> >>>>>Cheers
> >>>>>Dan
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>
> >>>>--
> >>>>Mike Evans
> >>>>Incremental Ltd.
> >>>>www.incremental.eu.com
> >>>>
> >>>>_______________________________________________
> >>>>Rcpviewer-contributors mailing list
> >>>>Rcpviewer-contributors at lists.berlios.de
> >>>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >>>>
> >>>
> >>>
> >>>
> >>>_______________________________________________
> >>>Rcpviewer-contributors mailing list
> >>>Rcpviewer-contributors at lists.berlios.de
> >>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >>>
> >>>
> >>
> >>--
> >>Mike Evans
> >>Incremental Ltd.
> >>www.incremental.eu.com
> >
> >
> >
> >
> >
> >
> >
> >
> >
>
> --
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
>
>




From mike.evans at incremental.eu.com  Thu Aug  4 10:47:05 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Thu, 04 Aug 2005 09:47:05 +0100
Subject: [Rcpviewer-contributors] Progress 20050804
Message-ID: <42F1D609.20508@incremental.eu.com>

Nothing done on collections yet except a bean added to ...acme project 
that holds a collection.
A pre-requisite for collections is that FieldBuilders create their own 
labels.  This they now do.  As an add-on, field sizes are now a bit more 
intelligent (though not taking account of any annotations as yet) -
primitive fields now give visual clue, via their length, to their type. 
      A small step but one I think I like.

Also renamed 'ActionsView' as 'OpsView'.  AND managed to do it in a 
Subclipse-safe way!!  i.e did not use eclipse refactoring but manually 
copied, committed, manually deleted, committed etc.

Note that you'll have to clean the runtime workspace as the view name 
has changed.

Ted - I have added yet another Util class (GCUtil) but have not put it 
in net.sf.. as it stores static state and you may not like this.

Mike E.

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Fri Aug  5 11:57:55 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Fri, 05 Aug 2005 10:57:55 +0100
Subject: [Rcpviewer-contributors] Progress 20050805
Message-ID: <42F33823.1070606@incremental.eu.com>

Starting collections stuff - nothing committed.

Bugette?
Dan - the ERefeence is not generated if I define my collection as a 
'Collection', OK if it is a 'Set'.

Mike E.


-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Mon Aug  8 10:46:42 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Mon, 08 Aug 2005 09:46:42 +0100
Subject: [Rcpviewer-contributors] Progress 20050808
Message-ID: <42F71BF2.5020105@incremental.eu.com>

crawling through Collections stuff...

Questions for Dan - with respect to your intentions...

1. When I interrogate ICollection for values I get back a pile of pojos. 
The GUI deals with IDomainObjects (so that it can ascertain label 
providers etc.) so I have to wrap all of these pojos in IDomainObjects.

Is this how you want it done?

// yuk yuk yuk! REVIEW_CHANGE
Collection elements = new ArrayList();
for( Object pojo :
         ((IDomainObject)obj).getReference(_ref).getCollection() ) {
   elements.add( new DomainObject( collectionType, pojo ) );
}
return elements.toArray();

2. Getters and setters do not appear on the op view as they are not 
returned by IDomainClass.operations().  Should addToXXX and 
removeFromXXX appear?  If they should, does the model pick up calls to 
them so that DomainObjectListener.collectionAddedTo is fired?  Or is 
this one that the GUI should handle?

Mike E.


-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Mon Aug  8 11:03:41 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Mon, 8 Aug 2005 09:03:41 GMT
Subject: [Rcpviewer-contributors] Progress 20050808
Message-ID: <Zen-1E23Xp-0003UD-7G@pythagoras.zen.co.uk>

Mike
within
Dan

---
Mike Evans <mike.evans at incremental.eu.com> wrote :

> crawling through Collections stuff...
> 
> Questions for Dan - with respect to your intentions...
> 
> 1. When I interrogate ICollection for values I get back a pile of pojos. 
> The GUI deals with IDomainObjects (so that it can ascertain label 
> providers etc.) so I have to wrap all of these pojos in IDomainObjects.
> 
> Is this how you want it done?
> 
> // yuk yuk yuk! REVIEW_CHANGE
> Collection elements = new ArrayList();
> for( Object pojo :
>          ((IDomainObject)obj).getReference(_ref).getCollection() ) {
>    elements.add( new DomainObject( collectionType, pojo ) );
> }
> return elements.toArray();

Half-way there.  Yes, you'll need to wrap them in DomainObjects, however there should only ever be one DomainObject per pojo.  Rather than instantiate one directly you can simply do:

pojo.getDomainObject().

That's because the PojoAspect introduces this method into the pojo.

Alternatively, if AspectJ gives you hassle, then you could copy the code from PojoAspect itself - basically it uses a hash in Session to do a reverse look-up from pojo to wrapping DomainObject.


> 
> 2. Getters and setters do not appear on the op view as they are not 
> returned by IDomainClass.operations().  Should addToXXX and 
> removeFromXXX appear? 

No, they shouldn't - so if they are then that's a mistake.  Instead should be able to add or remove using drag/drop into the collection itself (as rendered on the form).

That said, there could be accessibility issues with that, so perhaps this decision is worth reviewing at a later date.


If they should, does the model pick up calls to 
> them so that DomainObjectListener.collectionAddedTo is fired?  Or is 
> this one that the GUI should handle?

n/a.  If we decide to additionally expose them as operations then I would make DomainObjectListener.operationInvoked be fired.


Dan







From dan at haywood-associates.co.uk  Wed Aug 10 09:00:30 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 10 Aug 2005 08:00:30 +0100
Subject: [Rcpviewer-contributors] Support for operation prereqs and also defaults
Message-ID: <LGEELLOAEBMLCOGIKLMKAECFDEAA.dan@haywood-associates.co.uk>

Mike,

As you know I've been working on operation prereqs.  Now whether an
operation can be invoked depends upon whether the arguments to be used are
correct.  Rather than requiring the UI to remember what the pending values
are (which I guess you must currently be doing), I've made
IExtendedDomainObject.IExtendedOperation stateful so that it can now provide
them using getArgs().  There is also setArg() and reset() which resets to
any defaults (see the wiki home page for an example:
http://www.haywood-associates.co.uk/rcpviewer/space/start/2005-08-10/1#opera
tions_&_collections).

So at some point you can go through the operations view and use the state
that's being held by the domain layer directly.  Does this sound ok?

Dan




From dan at haywood-associates.co.uk  Thu Aug 11 01:38:15 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 11 Aug 2005 00:38:15 +0100
Subject: [Rcpviewer-contributors] "observed feature" prerequisites.
Message-ID: <LGEELLOAEBMLCOGIKLMKKECGDEAA.dan@haywood-associates.co.uk>

Latest blog posting on the wiki re: rev 461...

[quote]
One of the problems we need to solve is that the prerequisites for accessing
an attribute or reference, or for invoking an operation, could change as the
result of some quite unrelated change made either by the current user on
another domain object in their session or potentially as a result of an
update by some other user.

We don't want to have the UI continually poll the domain model to determine
if such-and-such a field for an attribute or OK button for an operation
should be enabled and disabled.  Instead the domain model should provide a
callback to which the UI can subscribe and be notified whenever the domain
model determines that there has been a change such that the prerequisites
(preconditions) for such-and-such a currently observed feature have now
changed.

So that's what I've been working on, and have committed a first cut that
works for attributes (the operations and references might work too, but I
haven't written the tests).  Whenever the UI asks the domain object for an
(extended) attribute, reference or operation, it is also added as a weak
reference to a collection held by the domain object's session.  Then,
courtesy of AspectJ, whenever a change is made to *any* domain object, we
ask every observed feature to recompute its own prerequisites and if it
determines that there has been a change, to notify its own observers.

At the moment this is a little cruder than I'd like because this process can
happen multiple times.  Ideally it should be performed only once at the end
of the "tranaaction".  So that stuff will follow as a refinement.
[/quote]

Luvverly!  But Mike's UI code does still need to be changed to exploit this
capability.  All is quiet in Scotland (and everywhere else it seems - sigh).




From mike.evans at incremental.eu.com  Thu Aug 11 10:53:17 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Thu, 11 Aug 2005 09:53:17 +0100
Subject: [Rcpviewer-contributors] Progress 20050811
Message-ID: <42FB11FD.1040701@incremental.eu.com>

Spur of the moment  visit to Newcastle last two days hence no progress 
mails.

Have basic impl for Collections of IDomainObjects but not yet extended 
to 1:1 references, nor arrays.
Should I handle Collections of primitive types?
Nothin yet committed as I foresee many changes when 1:1 and arrays impls 
introduced.  However if you are keen, I can do so.

Dan - the pre-req stuff sounds good but from an architectural point, 
ought not the GUI hold the pending values?  It already does for setters 
and getters (pre-save).  Sounds great from a less-for-me-to-do point of 
view but is this a case of scope-creep in the meta-model?

Mike E.

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Thu Aug 11 11:24:57 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 11 Aug 2005 09:24:57 GMT
Subject: [Rcpviewer-contributors] Progress 20050811
Message-ID: <Zen-1E39J3-0007zz-B3@pythagoras.zen.co.uk>

>> within

Mike Evans <mike.evans at incremental.eu.com> wrote :

> Spur of the moment  visit to Newcastle last two days hence no progress mails.

Good-o.  I was just starting to wonder if a bus had hit you.  You've been spoiling me, I think.


> 
> Have basic impl for Collections of IDomainObjects but not yet extended 
> to 1:1 references, nor arrays.
> Should I handle Collections of primitive types?

That's a good question.  We haven't needed any such capability at DSFA, so let's put it on hold for now.


> Nothin yet committed as I foresee many changes when 1:1 and arrays impls 
> introduced.  However if you are keen, I can do so.

Could you concentrate on simple 1:1 references, and then commit?  I think arrays are much less important - again there has been no requirement at DSFA.


> 
> Dan - the pre-req stuff sounds good but from an architectural point, 
> ought not the GUI hold the pending values?  It already does for setters 
> and getters (pre-save).  Sounds great from a less-for-me-to-do point of 
> view but is this a case of scope-creep in the meta-model?

I know what you mean.  Actually, I think it sits in between the two.  In the conventional 4-tier architecture we have (substitute your own terms): presentation/application/domain/persistence.  So I think that these pending values and prerequisite logic is part of the application layer.  I intend to split this out from the domain layer, though I'm still looking for the correct place to do so.  Does that feel okay architecturally with you?



> 
> Mike E.
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From mike.evans at incremental.eu.com  Thu Aug 11 13:07:02 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Thu, 11 Aug 2005 12:07:02 +0100
Subject: [Rcpviewer-contributors] Progress 20050811
In-Reply-To: <Zen-1E39J3-0007zz-B3@pythagoras.zen.co.uk>
References: <Zen-1E39J3-0007zz-B3@pythagoras.zen.co.uk>
Message-ID: <42FB3156.7010607@incremental.eu.com>

within within

Mike E.

Dan Haywood wrote:

>>>within
> 
> 
> Mike Evans <mike.evans at incremental.eu.com> wrote :
> 
> 
>>Spur of the moment  visit to Newcastle last two days hence no progress mails.
> 
> 
> Good-o.  I was just starting to wonder if a bus had hit you.  You've been spoiling me, I think.
> 
> 
> 
>>Have basic impl for Collections of IDomainObjects but not yet extended 
>>to 1:1 references, nor arrays.
>>Should I handle Collections of primitive types?
> 
> 
> That's a good question.  We haven't needed any such capability at DSFA, so let's put it on hold for now.
> 
on hold it is
> 
> 
>>Nothin yet committed as I foresee many changes when 1:1 and arrays impls 
>>introduced.  However if you are keen, I can do so.
> 
> 
> Could you concentrate on simple 1:1 references, and then commit?  I think arrays are much less important - again there has been no requirement at DSFA.
> 
okey dokey
> 
> 
>>Dan - the pre-req stuff sounds good but from an architectural point, 
>>ought not the GUI hold the pending values?  It already does for setters 
>>and getters (pre-save).  Sounds great from a less-for-me-to-do point of 
>>view but is this a case of scope-creep in the meta-model?
> 
> 
> I know what you mean.  Actually, I think it sits in between the two.  In the conventional 4-tier architecture we have (substitute your own terms): presentation/application/domain/persistence.  So I think that these pending values and prerequisite logic is part of the application layer.  I intend to split this out from the domain layer, though I'm still looking for the correct place to do so.  Does that feel okay architecturally with you?
> 
> 
ooo ... layers... onion boy...
Methinks:
A 'pure' presentation layer concerns itself only with reflecting values 
and ops in the layer below - here your 'application' layer.  This would 
favour your approach.
However, practically, this does not preclude the presentation layer 
holding onto state necessary to maintain the GUI.  This is particularly 
true with RCP/JFace where the general approach is to have dedicated GUI 
parts for each displayed application object, rather than, say, a single 
UI part that is refreshed as the application 'focus' changes.

So on the one hand, the RCPViewer code would become more complex and 
less intuitive (to other RCP developers at least) if it had to 
interogate the application layer for state all the time.

On the other hand, the presentation layer will have to delegate to the 
application layer for dynamic behaviour (pre-reqs, whatever), during 
which the app layer will potentially have state requirements that the 
gui does not know about.

Hence we could end up with state stored in both levels - with the 
obvious potential inconsistency problems.

Hence (can you tell I did not know where I was going with this when I 
started ...?) I will focus on minimising state at the presentation level 
and start relying on the 'application' layer.  We'll see over the next 
few weeks what difference this actually makes.




> 
> 
>>Mike E.
>>
>>-- 
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> 
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Thu Aug 11 13:58:46 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 11 Aug 2005 11:58:46 GMT
Subject: [Rcpviewer-contributors] Progress 20050811
Message-ID: <Zen-1E3Bhu-0006pH-D9@rutherford.zen.co.uk>

> Hence (can you tell I did not know where I was going with this when I 
> started ...?) I will focus on minimising state at the presentation level 
> and start relying on the 'application' layer.  We'll see over the next 
> few weeks what difference this actually makes.

Okay-doke.

But aren't onions better than parfait?


----------------------------
Mike Evans <mike.evans at incremental.eu.com> wrote :

> within within
> 
> Mike E.
> 
> Dan Haywood wrote:
> 
> >>>within
> > 
> > 
> > Mike Evans &amp;lang=en">mike.evans at incremental.eu.com>
> wrote :
> > 
> > 
> >>Spur of the moment  visit to Newcastle last two days hence no progress
> mails.
> > 
> > 
> > Good-o.  I was just starting to wonder if a bus had hit you.  You've been
> spoiling me, I think.
> > 
> > 
> > 
> >>Have basic impl for Collections of IDomainObjects but not yet extended 
> >>to 1:1 references, nor arrays.
> >>Should I handle Collections of primitive types?
> > 
> > 
> > That's a good question.  We haven't needed any such capability at DSFA, so
> let's put it on hold for now.
> > 
> on hold it is
> > 
> > 
> >>Nothin yet committed as I foresee many changes when 1:1 and arrays impls 
> >>introduced.  However if you are keen, I can do so.
> > 
> > 
> > Could you concentrate on simple 1:1 references, and then commit?  I think
> arrays are much less important - again there has been no requirement at
> DSFA.
> > 
> okey dokey
> > 
> > 
> >>Dan - the pre-req stuff sounds good but from an architectural point, 
> >>ought not the GUI hold the pending values?  It already does for setters 
> >>and getters (pre-save).  Sounds great from a less-for-me-to-do point of 
> >>view but is this a case of scope-creep in the meta-model?
> > 
> > 
> > I know what you mean.  Actually, I think it sits in between the two.  In the
> conventional 4-tier architecture we have (substitute your own terms):
> presentation/application/domain/persistence.  So I think that these pending
> values and prerequisite logic is part of the application layer.  I intend to
> split this out from the domain layer, though I'm still looking for the correct
> place to do so.  Does that feel okay architecturally with you?
> > 
> > 
> ooo ... layers... onion boy...
> Methinks:
> A 'pure' presentation layer concerns itself only with reflecting values 
> and ops in the layer below - here your 'application' layer.  This would 
> favour your approach.
> However, practically, this does not preclude the presentation layer 
> holding onto state necessary to maintain the GUI.  This is particularly 
> true with RCP/JFace where the general approach is to have dedicated GUI 
> parts for each displayed application object, rather than, say, a single 
> UI part that is refreshed as the application 'focus' changes.
> 
> So on the one hand, the RCPViewer code would become more complex and 
> less intuitive (to other RCP developers at least) if it had to 
> interogate the application layer for state all the time.
> 
> On the other hand, the presentation layer will have to delegate to the 
> application layer for dynamic behaviour (pre-reqs, whatever), during 
> which the app layer will potentially have state requirements that the 
> gui does not know about.
> 
> Hence we could end up with state stored in both levels - with the 
> obvious potential inconsistency problems.
> 
> Hence (can you tell I did not know where I was going with this when I 
> started ...?) I will focus on minimising state at the presentation level 
> and start relying on the 'application' layer.  We'll see over the next 
> few weeks what difference this actually makes.
> 
> 
> 
> 
> > 
> > 
> >>Mike E.
> >>
> >>-- 
> >>Mike Evans
> >>Incremental Ltd.
> >>www.incremental.eu.com
> >>
> >>_______________________________________________
> >>Rcpviewer-contributors mailing list
> >>Rcpviewer-contributors at lists.berlios.de
> >>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> > 
> > 
> > 
> > 
> > _______________________________________________
> > Rcpviewer-contributors mailing list
> > Rcpviewer-contributors at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com







From mike.evans at incremental.eu.com  Mon Aug 15 20:05:34 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Mon, 15 Aug 2005 19:05:34 +0100
Subject: [Rcpviewer-contributors] Progress 20050815
Message-ID: <4300D96E.5070408@incremental.eu.com>

Sorry - nothing to report.  Have been waylaid by events.
Catch up tomorrow with a commit then.

Mike E.

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Tue Aug 16 11:05:31 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Tue, 16 Aug 2005 10:05:31 +0100
Subject: [Rcpviewer-contributors] Progress 20050816
Message-ID: <4301AC5B.1070808@incremental.eu.com>

STILL coding gui to displaying object's references.
Have checked in what I have got:
* the 1:M references appears to work
* the 1:1 does not yet (the listeners are not picking up changes)
* 'dirty' state is incorrectly handled.
In fact the last of those is a fairly major fault.
The implementation is currently flawed in that I am immediately updating 
the domain object rather than waiting for a save.  Have to sort this out.
Dunno why I am making such a meal of this...

Also, have been looking at Eclipse 3.1 Undo framework and am interested 
in getting on to this ... ONCE I have the references stuff beat.

Other future work (orders please!):
- separating 'first class' and dependent domain objects for:
    * classbar (as per Dan's request ages ago).
    * extending the object reference gui so that a double click opens 
the  appropriate editor for the references object (if first class) and 
(...?) a dialog if it does not have its own lifecycle
- applying pre-requisite logic on operations
- tying Ted's search logic to domain object fields (so that pushing 
their '+' buttons actually does something)

Mike E.



-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Wed Aug 17 08:54:50 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 17 Aug 2005 07:54:50 +0100
Subject: [Rcpviewer-contributors] Progress 20050816
In-Reply-To: <4301AC5B.1070808@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKIEDPDEAA.dan@haywood-associates.co.uk>

Gonna do an update to check this all out now.
In terms of priorities:
- complete the reference stuff as you say
- the classbar thing (hopefully very easy and quick, but needed for demo
video I want to make)
- operations delegate to IDomainObject.IExtendedOperation for prereqs and
defaults (again hopefully pretty easy)
- AND then, the undo stuff.

The undo stuff is timely; I've been working on a Transaction Aspect which is
able to watch for any modifications to fields and wrap them into Command
objects such that they can be subsequently undone or redone.  Just gonna do
a commit of a first version now.

Any thoughts on transactional semantics?  The original NOF supports
"save-as-you-go" so that each field modification or action is a self
contained transaction - no use of File>Save.  Some "enterprise" apps do this
too, eg Quickbooks.  If we get full undo support I quite like this.

On the other hand, perhaps we should start with a more traditional approach
where the user must do an explicit File>Save - it's meaning is basically
commit this transaction.  The transaction is started the minute they make a
field mod or invoke an action.  They could still do an undo after this, of
course.

Opinions please.
Dan

> -----Original Message-----
> From: rcpviewer-contributors-admin at berlios.de
> [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
> Sent: 16 August 2005 10:06
> To: rcpviewer-contributors at lists.berlios.de
> Subject: [Rcpviewer-contributors] Progress 20050816
>
>
> STILL coding gui to displaying object's references.
> Have checked in what I have got:
> * the 1:M references appears to work
> * the 1:1 does not yet (the listeners are not picking up changes)
> * 'dirty' state is incorrectly handled.
> In fact the last of those is a fairly major fault.
> The implementation is currently flawed in that I am immediately updating
> the domain object rather than waiting for a save.  Have to sort this out.
> Dunno why I am making such a meal of this...
>
> Also, have been looking at Eclipse 3.1 Undo framework and am interested
> in getting on to this ... ONCE I have the references stuff beat.
>
> Other future work (orders please!):
> - separating 'first class' and dependent domain objects for:
>     * classbar (as per Dan's request ages ago).
>     * extending the object reference gui so that a double click opens
> the  appropriate editor for the references object (if first class) and
> (...?) a dialog if it does not have its own lifecycle
> - applying pre-requisite logic on operations
> - tying Ted's search logic to domain object fields (so that pushing
> their '+' buttons actually does something)
>
> Mike E.
>
>
>
> --
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
>
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>




From mike.evans at incremental.eu.com  Wed Aug 17 13:46:32 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Wed, 17 Aug 2005 12:46:32 +0100
Subject: [Rcpviewer-contributors] Progress 20050816
In-Reply-To: <LGEELLOAEBMLCOGIKLMKIEDPDEAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKIEDPDEAA.dan@haywood-associates.co.uk>
Message-ID: <43032398.9000208@incremental.eu.com>

Priorities noted.

I think the open/edit/save model should be continued with as this is 
what any RCP user would expect an Editor to do.
Also adding an 'auto-commit' option to code already handling 
long-running transactions will be easy to do.  Vice versa not so easy.

I intend to make the ReferencePart's store their own transient state and 
only fire off changes to the domain object once a save is actually 
initiated - just as the AttributeParts already do.
I can see some issues with this but will deal with them as they arise.

As for Undo/Redo - I think we have to ensure we're talking about the 
same thing. There are two contexts:
- an undo/redo stack on an editor dealing with user input/DnD. This is 
cleared on every save and has nothing to do with the underlying model as 
it is unaware of any changes until the save.
- undo/redo of object model changes themselves - including operations etc.

Oh but ah.  This is going to be another one of those mails where I end 
up saying exactly the opposite of what I started with...

If we have transient state unknown to the model, we cannot carry out 
operations on a gui object if it's correspoinding editor is open and 
dirty.  The model must know the state the user believes the object to be 
in.  Hence we either have to restrict the user's ability to call 
operations dependent on the object's (and its dependent objects') state 
-  a complex business - or we go the QuickBooks 'save-as-you-go' route.

So now I think I see where Dan is coming from - a 'save-as-you-go' 
approach is probably going to be easier as there will be not be a clash 
between the editor-save cycle and other operations.

If so, I would need to:
- remove 'Save' from the Edtor's;
- alter AttributeParts to immediately update the model (that'll be fun - 
if we're not to have 'transactions' for every key stroke!)
- ReferenceParts are actually doing the right thing now.

I really should think these things through more...

Dan - 'save-as-you-go' then..?

Mike E.

Dan Haywood wrote:

> Gonna do an update to check this all out now.
> In terms of priorities:
> - complete the reference stuff as you say
> - the classbar thing (hopefully very easy and quick, but needed for demo
> video I want to make)
> - operations delegate to IDomainObject.IExtendedOperation for prereqs and
> defaults (again hopefully pretty easy)
> - AND then, the undo stuff.
> 
> The undo stuff is timely; I've been working on a Transaction Aspect which is
> able to watch for any modifications to fields and wrap them into Command
> objects such that they can be subsequently undone or redone.  Just gonna do
> a commit of a first version now.
> 
> Any thoughts on transactional semantics?  The original NOF supports
> "save-as-you-go" so that each field modification or action is a self
> contained transaction - no use of File>Save.  Some "enterprise" apps do this
> too, eg Quickbooks.  If we get full undo support I quite like this.
> 
> On the other hand, perhaps we should start with a more traditional approach
> where the user must do an explicit File>Save - it's meaning is basically
> commit this transaction.  The transaction is started the minute they make a
> field mod or invoke an action.  They could still do an undo after this, of
> course.
> 
> Opinions please.
> Dan
> 
> 
>>-----Original Message-----
>>From: rcpviewer-contributors-admin at berlios.de
>>[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
>>Sent: 16 August 2005 10:06
>>To: rcpviewer-contributors at lists.berlios.de
>>Subject: [Rcpviewer-contributors] Progress 20050816
>>
>>
>>STILL coding gui to displaying object's references.
>>Have checked in what I have got:
>>* the 1:M references appears to work
>>* the 1:1 does not yet (the listeners are not picking up changes)
>>* 'dirty' state is incorrectly handled.
>>In fact the last of those is a fairly major fault.
>>The implementation is currently flawed in that I am immediately updating
>>the domain object rather than waiting for a save.  Have to sort this out.
>>Dunno why I am making such a meal of this...
>>
>>Also, have been looking at Eclipse 3.1 Undo framework and am interested
>>in getting on to this ... ONCE I have the references stuff beat.
>>
>>Other future work (orders please!):
>>- separating 'first class' and dependent domain objects for:
>>    * classbar (as per Dan's request ages ago).
>>    * extending the object reference gui so that a double click opens
>>the  appropriate editor for the references object (if first class) and
>>(...?) a dialog if it does not have its own lifecycle
>>- applying pre-requisite logic on operations
>>- tying Ted's search logic to domain object fields (so that pushing
>>their '+' buttons actually does something)
>>
>>Mike E.
>>
>>
>>
>>--
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Wed Aug 17 14:42:40 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 17 Aug 2005 12:42:40 GMT
Subject: Save-as-you-go (was: Re: [Rcpviewer-contributors] Progress 20050816)
Message-ID: <Zen-1E5NFg-000529-Rn@pythagoras.zen.co.uk>

I think I agree with your analysis: we definitely should keep the UI and the model in sync.

I agree too that the 'Save' action should be removed for each editor, but my analysis (now I've thought about it some more is a little different).  File>Save only makes sense when each editor is independent of the next.  That isn't the case for our RCP applications: a change made via one editor can result in multiple pojos becoming modified.  By all means we can have the "*" decorator on the editor to indicate which are dirty (I rather like that convention), however it doesn't make sense to try to 'Save' one of these dirty objects without saving them all.

So I think we should remove File>Save.  On the other hand a File>Save All would make sense.  What the user would see when they invoke this is all the "*"s disappearing in one go, but what's really happening is that the pending transaction is committed to the persistence object store (via Hibernate or whatever).

Now let's talk about undo.  First off, we can undo a committed (File>Save All) transaction.  Since the TransactionManager holds an undo/redo stack, that's just a matter of invoking undo.  This will result in a new database transaction via Hibernate, effectively backing out the changes.  I'm not sure if that should be exposed as Edit>Undo or not.  Perhaps an Edit>Undo Last?

Over and above this though, the TransactionManager also keeps track of the current (IN_PROGRESS, still to be committed) Transaction.  So even before a File>Save All, the user could undo their in-memory changes, either one at a time  (Edit>Undo definitely makes sense here) or the  whole set (ie to the last time that File>Save All was invoked; Edit>Undo All?)

Let me know if this make sense.

One other bit of UI candifloss - it would be quite nice to expose the TransactionManager's state through the UI in a view.  Internally the TransactionManager consists of an undo stack and redo stack of Transactions; each Transaction is a collection of "WorkAtoms" that form a composite pattern, hence a luvverly tree view.  Might be nice for demos, and for debugging, and perhaps even useful for end-users themselves.  What think you?

Dan


---
Mike Evans <mike.evans at incremental.eu.com> wrote :

> Priorities noted.
> 
> I think the open/edit/save model should be continued with as this is 
> what any RCP user would expect an Editor to do.
> Also adding an 'auto-commit' option to code already handling 
> long-running transactions will be easy to do.  Vice versa not so easy.
> 
> I intend to make the ReferencePart's store their own transient state and 
> only fire off changes to the domain object once a save is actually 
> initiated - just as the AttributeParts already do.
> I can see some issues with this but will deal with them as they arise.
> 
> As for Undo/Redo - I think we have to ensure we're talking about the 
> same thing. There are two contexts:
> - an undo/redo stack on an editor dealing with user input/DnD. This is 
> cleared on every save and has nothing to do with the underlying model as 
> it is unaware of any changes until the save.
> - undo/redo of object model changes themselves - including operations etc.
> 
> Oh but ah.  This is going to be another one of those mails where I end 
> up saying exactly the opposite of what I started with...
> 
> If we have transient state unknown to the model, we cannot carry out 
> operations on a gui object if it's correspoinding editor is open and 
> dirty.  The model must know the state the user believes the object to be 
> in.  Hence we either have to restrict the user's ability to call 
> operations dependent on the object's (and its dependent objects') state 
> -  a complex business - or we go the QuickBooks 'save-as-you-go' route.
> 
> So now I think I see where Dan is coming from - a 'save-as-you-go' 
> approach is probably going to be easier as there will be not be a clash 
> between the editor-save cycle and other operations.
> 
> If so, I would need to:
> - remove 'Save' from the Edtor's;
> - alter AttributeParts to immediately update the model (that'll be fun - 
> if we're not to have 'transactions' for every key stroke!)
> - ReferenceParts are actually doing the right thing now.
> 
> I really should think these things through more...
> 
> Dan - 'save-as-you-go' then..?
> 
> Mike E.
> 
> Dan Haywood wrote:
> 
> > Gonna do an update to check this all out now.
> > In terms of priorities:
> > - complete the reference stuff as you say
> > - the classbar thing (hopefully very easy and quick, but needed for demo
> > video I want to make)
> > - operations delegate to IDomainObject.IExtendedOperation for prereqs and
> > defaults (again hopefully pretty easy)
> > - AND then, the undo stuff.
> > 
> > The undo stuff is timely; I've been working on a Transaction Aspect which
> is
> > able to watch for any modifications to fields and wrap them into Command
> > objects such that they can be subsequently undone or redone.  Just gonna
> do
> > a commit of a first version now.
> > 
> > Any thoughts on transactional semantics?  The original NOF supports
> > "save-as-you-go" so that each field modification or action is a self
> > contained transaction - no use of File>Save.  Some "enterprise" apps do
> this
> > too, eg Quickbooks.  If we get full undo support I quite like this.
> > 
> > On the other hand, perhaps we should start with a more traditional
> approach
> > where the user must do an explicit File>Save - it's meaning is basically
> > commit this transaction.  The transaction is started the minute they make
> a
> > field mod or invoke an action.  They could still do an undo after this, of
> > course.
> > 
> > Opinions please.
> > Dan
> > 
> > 
> >>-----Original Message-----
> >>From: rcpviewer-contributors-admin at berlios.de
> >>[mailto:rcpviewer-contributors-admin at berlios.de]On
> Behalf Of Mike Evans
> >>Sent: 16 August 2005 10:06
> >>To: rcpviewer-contributors at lists.berlios.de
> >>Subject: [Rcpviewer-contributors] Progress 20050816
> >>
> >>
> >>STILL coding gui to displaying object's references.
> >>Have checked in what I have got:
> >>* the 1:M references appears to work
> >>* the 1:1 does not yet (the listeners are not picking up changes)
> >>* 'dirty' state is incorrectly handled.
> >>In fact the last of those is a fairly major fault.
> >>The implementation is currently flawed in that I am immediately updating
> >>the domain object rather than waiting for a save.  Have to sort this out.
> >>Dunno why I am making such a meal of this...
> >>
> >>Also, have been looking at Eclipse 3.1 Undo framework and am interested
> >>in getting on to this ... ONCE I have the references stuff beat.
> >>
> >>Other future work (orders please!):
> >>- separating 'first class' and dependent domain objects for:
> >>    * classbar (as per Dan's request ages ago).
> >>    * extending the object reference gui so that a double click opens
> >>the  appropriate editor for the references object (if first class) and
> >>(...?) a dialog if it does not have its own lifecycle
> >>- applying pre-requisite logic on operations
> >>- tying Ted's search logic to domain object fields (so that pushing
> >>their '+' buttons actually does something)
> >>
> >>Mike E.
> >>
> >>
> >>
> >>--
> >>Mike Evans
> >>Incremental Ltd.
> >>www.incremental.eu.com
> >>
> >>_______________________________________________
> >>Rcpviewer-contributors mailing list
> >>Rcpviewer-contributors at lists.berlios.de
> >>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >>
> > 
> > 
> > 
> > _______________________________________________
> > Rcpviewer-contributors mailing list
> > Rcpviewer-contributors at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From mike.evans at incremental.eu.com  Wed Aug 17 17:13:36 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Wed, 17 Aug 2005 16:13:36 +0100
Subject: Save-as-you-go (was: Re: [Rcpviewer-contributors] Progress 20050816)
In-Reply-To: <Zen-1E5NFg-000529-Rn@pythagoras.zen.co.uk>
References: <Zen-1E5NFg-000529-Rn@pythagoras.zen.co.uk>
Message-ID: <43035420.3030209@incremental.eu.com>

OK - so the transaction manager handles the transient state, with a 
'Save All' action causing it to flush to database.

I'll need the manager or the model to somehow tell me which objects are 
dirty so that I can display the '*'.  Or you might have some listening 
mechanism I can tie into.

Now the undo:

Say I make changes.
Then I File/Save/
Then Undo
Do I return to the state before the Save (i.e. some objects dirty etc) 
or do I return to the state at it was at the beginning of the 
transaction I just saved?  Or does it do nothing?  Or is that the 
purpose of Undo All..?  I'm a bit unclear here.

As for candy floss fine - I can see lots of little icons to represent 
different actions etc.  Gimme a listening mechanism to pick up the 
atomic operations within the transaction manager I cando.

Mike E.

Dan Haywood wrote:
> I think I agree with your analysis: we definitely should keep the UI and the model in sync.
> 
> I agree too that the 'Save' action should be removed for each editor, but my analysis (now I've thought about it some more is a little different).  File>Save only makes sense when each editor is independent of the next.  That isn't the case for our RCP applications: a change made via one editor can result in multiple pojos becoming modified.  By all means we can have the "*" decorator on the editor to indicate which are dirty (I rather like that convention), however it doesn't make sense to try to 'Save' one of these dirty objects without saving them all.
> 
> So I think we should remove File>Save.  On the other hand a File>Save All would make sense.  What the user would see when they invoke this is all the "*"s disappearing in one go, but what's really happening is that the pending transaction is committed to the persistence object store (via Hibernate or whatever).
> 
> Now let's talk about undo.  First off, we can undo a committed (File>Save All) transaction.  Since the TransactionManager holds an undo/redo stack, that's just a matter of invoking undo.  This will result in a new database transaction via Hibernate, effectively backing out the changes.  I'm not sure if that should be exposed as Edit>Undo or not.  Perhaps an Edit>Undo Last?
> 
> Over and above this though, the TransactionManager also keeps track of the current (IN_PROGRESS, still to be committed) Transaction.  So even before a File>Save All, the user could undo their in-memory changes, either one at a time  (Edit>Undo definitely makes sense here) or the  whole set (ie to the last time that File>Save All was invoked; Edit>Undo All?)
> 
> Let me know if this make sense.
> 
> One other bit of UI candifloss - it would be quite nice to expose the TransactionManager's state through the UI in a view.  Internally the TransactionManager consists of an undo stack and redo stack of Transactions; each Transaction is a collection of "WorkAtoms" that form a composite pattern, hence a luvverly tree view.  Might be nice for demos, and for debugging, and perhaps even useful for end-users themselves.  What think you?
> 
> Dan
> 
> 
> ---
> Mike Evans <mike.evans at incremental.eu.com> wrote :
> 
> 
>>Priorities noted.
>>
>>I think the open/edit/save model should be continued with as this is 
>>what any RCP user would expect an Editor to do.
>>Also adding an 'auto-commit' option to code already handling 
>>long-running transactions will be easy to do.  Vice versa not so easy.
>>
>>I intend to make the ReferencePart's store their own transient state and 
>>only fire off changes to the domain object once a save is actually 
>>initiated - just as the AttributeParts already do.
>>I can see some issues with this but will deal with them as they arise.
>>
>>As for Undo/Redo - I think we have to ensure we're talking about the 
>>same thing. There are two contexts:
>>- an undo/redo stack on an editor dealing with user input/DnD. This is 
>>cleared on every save and has nothing to do with the underlying model as 
>>it is unaware of any changes until the save.
>>- undo/redo of object model changes themselves - including operations etc.
>>
>>Oh but ah.  This is going to be another one of those mails where I end 
>>up saying exactly the opposite of what I started with...
>>
>>If we have transient state unknown to the model, we cannot carry out 
>>operations on a gui object if it's correspoinding editor is open and 
>>dirty.  The model must know the state the user believes the object to be 
>>in.  Hence we either have to restrict the user's ability to call 
>>operations dependent on the object's (and its dependent objects') state 
>>-  a complex business - or we go the QuickBooks 'save-as-you-go' route.
>>
>>So now I think I see where Dan is coming from - a 'save-as-you-go' 
>>approach is probably going to be easier as there will be not be a clash 
>>between the editor-save cycle and other operations.
>>
>>If so, I would need to:
>>- remove 'Save' from the Edtor's;
>>- alter AttributeParts to immediately update the model (that'll be fun - 
>>if we're not to have 'transactions' for every key stroke!)
>>- ReferenceParts are actually doing the right thing now.
>>
>>I really should think these things through more...
>>
>>Dan - 'save-as-you-go' then..?
>>
>>Mike E.
>>
>>Dan Haywood wrote:
>>
>>
>>>Gonna do an update to check this all out now.
>>>In terms of priorities:
>>>- complete the reference stuff as you say
>>>- the classbar thing (hopefully very easy and quick, but needed for demo
>>>video I want to make)
>>>- operations delegate to IDomainObject.IExtendedOperation for prereqs and
>>>defaults (again hopefully pretty easy)
>>>- AND then, the undo stuff.
>>>
>>>The undo stuff is timely; I've been working on a Transaction Aspect which
>>
>>is
>>
>>>able to watch for any modifications to fields and wrap them into Command
>>>objects such that they can be subsequently undone or redone.  Just gonna
>>
>>do
>>
>>>a commit of a first version now.
>>>
>>>Any thoughts on transactional semantics?  The original NOF supports
>>>"save-as-you-go" so that each field modification or action is a self
>>>contained transaction - no use of File>Save.  Some "enterprise" apps do
>>
>>this
>>
>>>too, eg Quickbooks.  If we get full undo support I quite like this.
>>>
>>>On the other hand, perhaps we should start with a more traditional
>>
>>approach
>>
>>>where the user must do an explicit File>Save - it's meaning is basically
>>>commit this transaction.  The transaction is started the minute they make
>>
>>a
>>
>>>field mod or invoke an action.  They could still do an undo after this, of
>>>course.
>>>
>>>Opinions please.
>>>Dan
>>>
>>>
>>>
>>>>-----Original Message-----
>>>>From: rcpviewer-contributors-admin at berlios.de
>>>>[mailto:rcpviewer-contributors-admin at berlios.de]On
>>
>>Behalf Of Mike Evans
>>
>>>>Sent: 16 August 2005 10:06
>>>>To: rcpviewer-contributors at lists.berlios.de
>>>>Subject: [Rcpviewer-contributors] Progress 20050816
>>>>
>>>>
>>>>STILL coding gui to displaying object's references.
>>>>Have checked in what I have got:
>>>>* the 1:M references appears to work
>>>>* the 1:1 does not yet (the listeners are not picking up changes)
>>>>* 'dirty' state is incorrectly handled.
>>>>In fact the last of those is a fairly major fault.
>>>>The implementation is currently flawed in that I am immediately updating
>>>>the domain object rather than waiting for a save.  Have to sort this out.
>>>>Dunno why I am making such a meal of this...
>>>>
>>>>Also, have been looking at Eclipse 3.1 Undo framework and am interested
>>>>in getting on to this ... ONCE I have the references stuff beat.
>>>>
>>>>Other future work (orders please!):
>>>>- separating 'first class' and dependent domain objects for:
>>>>   * classbar (as per Dan's request ages ago).
>>>>   * extending the object reference gui so that a double click opens
>>>>the  appropriate editor for the references object (if first class) and
>>>>(...?) a dialog if it does not have its own lifecycle
>>>>- applying pre-requisite logic on operations
>>>>- tying Ted's search logic to domain object fields (so that pushing
>>>>their '+' buttons actually does something)
>>>>
>>>>Mike E.
>>>>
>>>>
>>>>
>>>>--
>>>>Mike Evans
>>>>Incremental Ltd.
>>>>www.incremental.eu.com
>>>>
>>>>_______________________________________________
>>>>Rcpviewer-contributors mailing list
>>>>Rcpviewer-contributors at lists.berlios.de
>>>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>>>
>>>
>>>
>>>
>>>_______________________________________________
>>>Rcpviewer-contributors mailing list
>>>Rcpviewer-contributors at lists.berlios.de
>>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>>
>>>
>>
>>-- 
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> 
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Wed Aug 17 17:41:23 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 17 Aug 2005 15:41:23 GMT
Subject: Save-as-you-go (was: Re: [Rcpviewer-contributors] Progress 20050816)
Message-ID: <Zen-1E5Q2d-0004xf-1K@rutherford.zen.co.uk>

within

---
Mike Evans <mike.evans at incremental.eu.com> wrote :

> OK - so the transaction manager handles the transient state, with a 
> 'Save All' action causing it to flush to database.

> 
> I'll need the manager or the model to somehow tell me which objects are 
> dirty so that I can display the '*'.  Or you might have some listening 
> mechanism I can tie into.

I think that the existing IDomainObject.IAttributeListener should be enough.  They only fire if the attribute has changed, I think.


> 
> Now the undo:
> 
> Say I make changes.
> Then I File/Save/
> Then Undo
> Do I return to the state before the Save (i.e. some objects dirty etc) 
> or do I return to the state at it was at the beginning of the 
> transaction I just saved?  Or does it do nothing?  Or is that the 
> purpose of Undo All..?  I'm a bit unclear here.

Okay, let's define it as following:
Edit>Undo is enabled ONLY whenever there is a pending transaction not yet committed.  It will undo each of the individual operations / field edits within that change up until they have undone all pending changes (ie to the state they were in when they last did a File>Save All).  Similarly Edit>Redo will allow them to go forward.

Edit>Undo All is also enabled ONLY whenever there is a pending transaction, and undoes all individual actions to their last File>Save All in one go.

Edit>Undo Last is enabled ONLY whenever a File>Save All has been completed, and it will (attempt to) undo an already committed transaction.  If they do any subsequent operation or field edit and thus start a new transaction, then Edit>Undo Last is not available.

That might be clunky from a usability perspective, I don't know; let's see how it goes.  I do think that the user would want to distinguish (Edit>Undo vs Edit>Undo Last) when they are undoing previously committed work vs merely undoing pending work.


> As for candy floss fine - I can see lots of little icons to represent 
> different actions etc.  Gimme a listening mechanism to pick up the 
> atomic operations within the transaction manager I cando.

Cool.  I'll get busy on it then.


> 
> Mike E.
> 
> Dan Haywood wrote:
> > I think I agree with your analysis: we definitely should keep the UI and the
> model in sync.
> > 
> > I agree too that the 'Save' action should be removed for each editor, but my
> analysis (now I've thought about it some more is a little different).  File>Save
> only makes sense when each editor is independent of the next.  That isn't the
> case for our RCP applications: a change made via one editor can result in
> multiple pojos becoming modified.  By all means we can have the "*" decorator on
> the editor to indicate which are dirty (I rather like that convention), however
> it doesn't make sense to try to 'Save' one of these dirty objects without saving
> them all.
> > 
> > So I think we should remove File>Save.  On the other hand a File>Save All
> would make sense.  What the user would see when they invoke this is all the "*"s
> disappearing in one go, but what's really happening is that the pending
> transaction is committed to the persistence object store (via Hibernate or
> whatever).
> > 
> > Now let's talk about undo.  First off, we can undo a committed (File>Save All)
> transaction.  Since the TransactionManager holds an undo/redo stack, that's just
> a matter of invoking undo.  This will result in a new database transaction via
> Hibernate, effectively backing out the changes.  I'm not sure if that should be
> exposed as Edit>Undo or not.  Perhaps an Edit>Undo Last?
> > 
> > Over and above this though, the TransactionManager also keeps track of the
> current (IN_PROGRESS, still to be committed) Transaction.  So even before a
> File>Save All, the user could undo their in-memory changes, either one at a time
>  (Edit>Undo definitely makes sense here) or the  whole set (ie to the last time
> that File>Save All was invoked; Edit>Undo All?)
> > 
> > Let me know if this make sense.
> > 
> > One other bit of UI candifloss - it would be quite nice to expose the
> TransactionManager's state through the UI in a view.  Internally the
> TransactionManager consists of an undo stack and redo stack of Transactions;
> each Transaction is a collection of "WorkAtoms" that form a composite pattern,
> hence a luvverly tree view.  Might be nice for demos, and for debugging, and
> perhaps even useful for end-users themselves.  What think you?
> > 
> > Dan
> > 
> > 
> > ---
> > Mike Evans &amp;lang=en">mike.evans at incremental.eu.com>
> wrote :
> > 
> > 
> >>Priorities noted.
> >>
> >>I think the open/edit/save model should be continued with as this is 
> >>what any RCP user would expect an Editor to do.
> >>Also adding an 'auto-commit' option to code already handling 
> >>long-running transactions will be easy to do.  Vice versa not so easy.
> >>
> >>I intend to make the ReferencePart's store their own transient state and 
> >>only fire off changes to the domain object once a save is actually 
> >>initiated - just as the AttributeParts already do.
> >>I can see some issues with this but will deal with them as they arise.
> >>
> >>As for Undo/Redo - I think we have to ensure we're talking about the 
> >>same thing. There are two contexts:
> >>- an undo/redo stack on an editor dealing with user input/DnD. This is 
> >>cleared on every save and has nothing to do with the underlying model as 
> >>it is unaware of any changes until the save.
> >>- undo/redo of object model changes themselves - including operations etc.
> >>
> >>Oh but ah.  This is going to be another one of those mails where I end 
> >>up saying exactly the opposite of what I started with...
> >>
> >>If we have transient state unknown to the model, we cannot carry out 
> >>operations on a gui object if it's correspoinding editor is open and 
> >>dirty.  The model must know the state the user believes the object to be 
> >>in.  Hence we either have to restrict the user's ability to call 
> >>operations dependent on the object's (and its dependent objects') state 
> >>-  a complex business - or we go the QuickBooks 'save-as-you-go' route.
> >>
> >>So now I think I see where Dan is coming from - a 'save-as-you-go' 
> >>approach is probably going to be easier as there will be not be a clash 
> >>between the editor-save cycle and other operations.
> >>
> >>If so, I would need to:
> >>- remove 'Save' from the Edtor's;
> >>- alter AttributeParts to immediately update the model (that'll be fun - 
> >>if we're not to have 'transactions' for every key stroke!)
> >>- ReferenceParts are actually doing the right thing now.
> >>
> >>I really should think these things through more...
> >>
> >>Dan - 'save-as-you-go' then..?
> >>
> >>Mike E.
> >>
> >>Dan Haywood wrote:
> >>
> >>
> >>>Gonna do an update to check this all out now.
> >>>In terms of priorities:
> >>>- complete the reference stuff as you say
> >>>- the classbar thing (hopefully very easy and quick, but needed for demo
> >>>video I want to make)
> >>>- operations delegate to IDomainObject.IExtendedOperation for prereqs and
> >>>defaults (again hopefully pretty easy)
> >>>- AND then, the undo stuff.
> >>>
> >>>The undo stuff is timely; I've been working on a Transaction Aspect which
> >>
> >>is
> >>
> >>>able to watch for any modifications to fields and wrap them into Command
> >>>objects such that they can be subsequently undone or redone.  Just gonna
> >>
> >>do
> >>
> >>>a commit of a first version now.
> >>>
> >>>Any thoughts on transactional semantics?  The original NOF supports
> >>>"save-as-you-go" so that each field modification or action is a self
> >>>contained transaction - no use of File>Save.  Some "enterprise" apps do
> >>
> >>this
> >>
> >>>too, eg Quickbooks.  If we get full undo support I quite like this.
> >>>
> >>>On the other hand, perhaps we should start with a more traditional
> >>
> >>approach
> >>
> >>>where the user must do an explicit File>Save - it's meaning is basically
> >>>commit this transaction.  The transaction is started the minute they make
> >>
> >>a
> >>
> >>>field mod or invoke an action.  They could still do an undo after this,
> of
> >>>course.
> >>>
> >>>Opinions please.
> >>>Dan
> >>>
> >>>
> >>>
> >>>>-----Original Message-----
> >>>>From: rcpviewer-contributors-admin at berlios.de
> >>>>[mailto:rcpviewer-contributors-admin at berlios.de]On
> >>
> >>Behalf Of Mike Evans
> >>
> >>>>Sent: 16 August 2005 10:06
> >>>>To: rcpviewer-contributors at lists.berlios.de
> >>>>Subject: [Rcpviewer-contributors] Progress 20050816
> >>>>
> >>>>
> >>>>STILL coding gui to displaying object's references.
> >>>>Have checked in what I have got:
> >>>>* the 1:M references appears to work
> >>>>* the 1:1 does not yet (the listeners are not picking up changes)
> >>>>* 'dirty' state is incorrectly handled.
> >>>>In fact the last of those is a fairly major fault.
> >>>>The implementation is currently flawed in that I am immediately updating
> >>>>the domain object rather than waiting for a save.  Have to sort this
> out.
> >>>>Dunno why I am making such a meal of this...
> >>>>
> >>>>Also, have been looking at Eclipse 3.1 Undo framework and am interested
> >>>>in getting on to this ... ONCE I have the references stuff beat.
> >>>>
> >>>>Other future work (orders please!):
> >>>>- separating 'first class' and dependent domain objects for:
> >>>>   * classbar (as per Dan's request ages ago).
> >>>>   * extending the object reference gui so that a double click opens
> >>>>the  appropriate editor for the references object (if first class) and
> >>>>(...?) a dialog if it does not have its own lifecycle
> >>>>- applying pre-requisite logic on operations
> >>>>- tying Ted's search logic to domain object fields (so that pushing
> >>>>their '+' buttons actually does something)
> >>>>
> >>>>Mike E.
> >>>>
> >>>>
> >>>>
> >>>>--
> >>>>Mike Evans
> >>>>Incremental Ltd.
> >>>>www.incremental.eu.com
> >>>>
> >>>>_______________________________________________
> >>>>Rcpviewer-contributors mailing list
> >>>>Rcpviewer-contributors at lists.berlios.de
> >>>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >>>>
> >>>
> >>>
> >>>
> >>>_______________________________________________
> >>>Rcpviewer-contributors mailing list
> >>>Rcpviewer-contributors at lists.berlios.de
> >>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >>>
> >>>
> >>
> >>-- 
> >>Mike Evans
> >>Incremental Ltd.
> >>www.incremental.eu.com
> >>
> >>_______________________________________________
> >>Rcpviewer-contributors mailing list
> >>Rcpviewer-contributors at lists.berlios.de
> >>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> > 
> > 
> > 
> > 
> > _______________________________________________
> > Rcpviewer-contributors mailing list
> > Rcpviewer-contributors at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From mike.evans at incremental.eu.com  Mon Aug 22 13:49:57 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Mon, 22 Aug 2005 12:49:57 +0100
Subject: [Rcpviewer-contributors] Re: transactions & Progress 20050822
In-Reply-To: <LGEELLOAEBMLCOGIKLMKEEFJDEAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKEEFJDEAA.dan@haywood-associates.co.uk>
Message-ID: <4309BBE5.7030707@incremental.eu.com>

1. Transactions : (see Dan's mail below)
Okey-dokey.
Note this means things are slightly inconsistent at the moment.
Gui changes to attributes are only passed to the model on Save,
reference changes happen immediately.

2. StringFieldBuilder
There is a now distinct StringFieldBuilder and DefaultFieldBuilder's.
Using a common impl for both was plain wrong.  Note the latter is read-only.

2. Non-Multi References.
Dan, your NotifyListeners aspect ain't working for single references -
mainly coz its code knows nothing about
IDomainObjectReferenceListener.referenceChanged().  Can I leave this
with you to fix or are you happy for me to start dabbling in the model
code?  Hence DnD'ing into a single reference field does not work.

3. Gui prettiness.
As I could not go much further on meaty stuff until Dan has got a better
idea on his transaction I returned to GUI fluffiness:
3.1. Classbar shows instantiable classes only.
3.2. Added icons to views and editors.  See ImageUtil.getImage( 
IDomainClass) for the logic - note I have not yet implemented the @urlAt 
annotation stuff.  Also note the images are nicked off the web so should 
be replaced!

Mike E.






Dan Haywood wrote:

> Hi Mike
> Hope you're making progress getting your property back in order.
> 
> Been working on the xactn mgmt stuff, and I've realized that my current
> design (of no File>Save, but instead a File>Save All) is too simplistic.  So
> what I want to do is to get closer to what's already there (multiple
> transactions and nominally File>Save per object), but have a way to (a)
> potentially have several pojos enlisted in a single xactn, and (b) ensure
> that any given pojo is not enlisted in >1 xactn at the same time.
> 
> Anyway, bottom line is - in case you were going to when you've got your
> place in order - don't go ripping out that File>Save functionality just yet.
> I'll continue to work on my stuff and we can go round the loop maybe later
> in the week.
> 
> Later
> Dan
> 
> 
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com







From dan at haywood-associates.co.uk  Mon Aug 22 14:01:56 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Mon, 22 Aug 2005 12:01:56 GMT
Subject: [Rcpviewer-contributors] Re: transactions & Progress 20050822
Message-ID: <Zen-1E7B00-0003AE-Ff@pythagoras.zen.co.uk>

> 2. Non-Multi References.
> Dan, your NotifyListeners aspect ain't working for single references -
> mainly coz its code knows nothing about
> IDomainObjectReferenceListener.referenceChanged().  Can I leave this
> with you to fix or are you happy for me to start dabbling in the model
> code?  Hence DnD'ing into a single reference field does not work.

I'll look at.


> 3. Gui prettiness.
> As I could not go much further on meaty stuff until Dan has got a better
> idea on his transaction I returned to GUI fluffiness:
> 3.1. Classbar shows instantiable classes only.
> 3.2. Added icons to views and editors.  See ImageUtil.getImage( 
> IDomainClass) for the logic - note I have not yet implemented the @urlAt 
> annotation stuff.  Also note the images are nicked off the web so should 
> be replaced!

I'm gonna commission on a few custom icons (24 or 32 or so) for demos etc, so this is in progress.



Since you are waiting on me for transactions etc, please press on with other GUI prettiness things, eg have a peruse of the annotations.

Dan






From dan at haywood-associates.co.uk  Wed Aug 24 08:59:38 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 24 Aug 2005 07:59:38 +0100
Subject: [Rcpviewer-contributors] Dan's progress 20050824: Tracing and Transactions.
Message-ID: <LGEELLOAEBMLCOGIKLMKMEGCDEAA.dan@haywood-associates.co.uk>

1. More work on transactions, though still not complete.

2. Have added a dependency on log4j.  I tried to use the net.sf.plugin.log4j
plugin that's loitering in our SVN repository, but got compile errors.
Being lazy I decided to pull down a ready-wrapped version, from
http://sourceforge.net/project/showfiles.php?group_id=73634 (Log4J Wrapper
plugin).

3. I couldn't get the RCP app to pick up log4j.properties (it ought to just
auto-configure by finding this file on the classpath), so for now I've
hard-coded a SocketAppender in the GUI plugin.  If anyone can fix, please
do!  You can use either Chainsaw or the Ganymede plugin to view.

4. I've also added an abstract TracingAspect; there's an example of its use
in TraceTransactionAspect.


Mike, coupla things:
a) could you reevaluate toString() whenever the object's attributes have
changed?
b) could you put the collection view into a collapsible region, eg like the
"Dependency Analysis" section on the "Dependencies" tab of the manifest
viewer.  That'll be needed for lazy loading of collections in the future.
c) could the list be converted into a table?

Cheers





From mike.evans at incremental.eu.com  Thu Aug 25 11:42:21 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Thu, 25 Aug 2005 10:42:21 +0100
Subject: [Rcpviewer-contributors] Progress 20050825
Message-ID: <430D927D.9040304@incremental.eu.com>

Sorry about the silence over the past two days.
Bogged down with real work.
Be careful if you use the combination of XDoclet2, Hibernate and Java 5 
   generics - or more specifically - Java 5 generics with any project 
using qdox(see http://qdox.codehaus.org/whouses.html).  qdox's 
understanding of Java5 is less than perfect.

Anyhow, working on showing histories and feedback on RCPViewer's Gui. 
So far only a 'ReportJob' that is called by most other jobs is 
committed.  This simply puts up something on the status line but I 
intend it to become oh so much more.
Next a console view for displaying histry which I'll also tie it in with 
Dan's  log4j set up.
Then I'll  start paying more attention to Dan's annotations.

Dan - your questions:

a) could you reevaluate toString() whenever the object's attributes have
changed?
b) could you put the collection view into a collapsible region, eg like the
"Dependency Analysis" section on the "Dependencies" tab of the manifest
viewer.  That'll be needed for lazy loading of collections in the future.
c) could the list be converted into a table?

Yes to all.  Now or later?  for c) what columns do you want?

Mike E.



-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Thu Aug 25 12:45:04 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 25 Aug 2005 10:45:04 GMT
Subject: [Rcpviewer-contributors] Progress 20050825
Message-ID: <Zen-1E8FEG-00083d-QX@rutherford.zen.co.uk>

Thanks for the latest.  To your questions...

> Yes to all.  Now or later?  for c) what columns do you want?

If you're in the flow with the report job, then please continue.  But otherwise, now(ish).  My focus is to get the UI looking good enough to build a video to support a submission for EclipseCon, and that needs doing by mid Sept or thereabouts.  I think that these features are prereqs for that.

Which columns?  All attributes, but not references.  Could you also have it such that double click opens up an editor for the object (but perhaps it does this, I don't have it running right now).

In the meantime, it also buys me some time to get my xactn aspect working:-)  And I really am being very naughty and feeling more and more guilty about the swathes of unit tests that I've left incomplete.

Dan
---
Mike Evans <mike.evans at incremental.eu.com> wrote :

> Sorry about the silence over the past two days.
> Bogged down with real work.
> Be careful if you use the combination of XDoclet2, Hibernate and Java 5 
>    generics - or more specifically - Java 5 generics with any project 
> using qdox(see http://qdox.codehaus.org/whouses.html).  qdox's 
> understanding of Java5 is less than perfect.
> 
> Anyhow, working on showing histories and feedback on RCPViewer's Gui. 
> So far only a 'ReportJob' that is called by most other jobs is 
> committed.  This simply puts up something on the status line but I 
> intend it to become oh so much more.
> Next a console view for displaying histry which I'll also tie it in with 
> Dan's  log4j set up.
> Then I'll  start paying more attention to Dan's annotations.
> 
> Dan - your questions:
> 
> a) could you reevaluate toString() whenever the object's attributes have
> changed?
> b) could you put the collection view into a collapsible region, eg like the
> "Dependency Analysis" section on the "Dependencies" tab of the manifest
> viewer.  That'll be needed for lazy loading of collections in the future.
> c) could the list be converted into a table?
> 
> Yes to all.  Now or later?  for c) what columns do you want?
> 
> Mike E.
> 
> 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From mike.evans at incremental.eu.com  Thu Aug 25 13:47:26 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Thu, 25 Aug 2005 12:47:26 +0100
Subject: [Rcpviewer-contributors] Progress 20050825
In-Reply-To: <Zen-1E8FEG-00083d-QX@rutherford.zen.co.uk>
References: <Zen-1E8FEG-00083d-QX@rutherford.zen.co.uk>
Message-ID: <430DAFCE.6020503@incremental.eu.com>

See below...

Dan Haywood wrote:
> Thanks for the latest.  To your questions...
> 
> 
>> Yes to all.  Now or later?  for c) what columns do you want?
> 
> 
> If you're in the flow with the report job, then please continue.  But
> otherwise, now(ish).  My focus is to get the UI looking good enough
> to build a video to support a submission for EclipseCon, and that
> needs doing by mid Sept or thereabouts.  I think that these features
> are prereqs for that.

UI to look good - OK, I'll get on with these.

> 
> Which columns?  All attributes, but not references.  Could you also
> have it such that double click opens up an editor for the object (but
> perhaps it does this, I don't have it running right now).
> 

Was intending to for first class objects (isInstantiable()) - was going 
to open a modal dialog for second class ones.  Ok?

> In the meantime, it also buys me some time to get my xactn aspect
> working:-)  And I really am being very naughty and feeling more and
> more guilty about the swathes of unit tests that I've left
> incomplete.
> 
Unit tests - ha-ha ho-ho he-he.  Perhaps past the video production eh?
Actually, UI unit testing will come after our transaction implementation 
as I see undo/redo / transactions / job histories / macros / unit tests 
to all be aprt of the same aspect. (re: previous conversations).

> Dan --- Mike Evans <mike.evans at incremental.eu.com> wrote :
> 
> 
>> Sorry about the silence over the past two days. Bogged down with
>> real work. Be careful if you use the combination of XDoclet2,
>> Hibernate and Java 5 generics - or more specifically - Java 5
>> generics with any project using qdox(see
>> http://qdox.codehaus.org/whouses.html).  qdox's understanding of
>> Java5 is less than perfect.
>> 
>> Anyhow, working on showing histories and feedback on RCPViewer's
>> Gui. So far only a 'ReportJob' that is called by most other jobs is
>>  committed.  This simply puts up something on the status line but I
>>  intend it to become oh so much more. Next a console view for
>> displaying histry which I'll also tie it in with Dan's  log4j set
>> up. Then I'll  start paying more attention to Dan's annotations.
>> 
>> Dan - your questions:
>> 
>> a) could you reevaluate toString() whenever the object's attributes
>> have changed? b) could you put the collection view into a
>> collapsible region, eg like the "Dependency Analysis" section on
>> the "Dependencies" tab of the manifest viewer.  That'll be needed
>> for lazy loading of collections in the future. c) could the list be
>> converted into a table?
>> 
>> Yes to all.  Now or later?  for c) what columns do you want?
>> 
>> Mike E.
>> 
>> 
>> 
>> -- Mike Evans Incremental Ltd. www.incremental.eu.com
>> 
>> _______________________________________________ 
>> Rcpviewer-contributors mailing list 
>> Rcpviewer-contributors at lists.berlios.de 
>> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 
> 
> 
> 
> 
> _______________________________________________ 
> Rcpviewer-contributors mailing list 
> Rcpviewer-contributors at lists.berlios.de 
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Thu Aug 25 14:23:58 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Thu, 25 Aug 2005 12:23:58 GMT
Subject: [Rcpviewer-contributors] Progress 20050825
Message-ID: <Zen-1E8Gly-0001AR-DG@pythagoras.zen.co.uk>

> Was intending to for first class objects (isInstantiable()) - was going to open a modal dialog for second class ones.  Ok?

a) isInstantiable() doesn't distinguish first class objects from second class, it distinguishes objects that can be instantiated from the class bar (or File>New) from ones which cannot (eg reference data).  For example, might make CatalogItem (or Product) reference data but it is still a first class object - ie a place at which the user can interact with the application.

So instead what you want to do is to look at the reference itself and see if it has containment semantics.  I used the name that EMF gives to this concept (to be crystal: also known in UML as composition or aggregation by value, or by database boys as an identifying relationship).  So there should be an isContained() or something similar to invoke on the EReference.

b) Modal dialogs - argh, Richard Pawson would shoot us.  That's a no.  What I'd really like is to be able to open up these contained objects within the containing object's editor.  But I admit I'm not sure how that might work in the context of a table.  Instead, for now, can you just open up a regular editor but perhaps have a way to indicate its owning object by looking for a 1:1 reference that has isOpposite() = true (ie bidirectional) and also isContained() = true.  (In practice most contained objects would have such a bidirectional association, otherwise the domain objects cannot prevent contained objects from being moved between containers.  Also Hibernate guys tend to suggest setting up such relationships using their "inverse" tag).

Also, while talking about GUI prettiness, could you put the icon + toString() for each object in the body of each editor; the idea being to gives the user another "handle" to the object to drag/drop (rather than go finding it in the session view).

----
Mike Evans <mike.evans at incremental.eu.com> wrote :

> See below...
> 
> Dan Haywood wrote:
> > Thanks for the latest.  To your questions...
> > 
> > 
> >> Yes to all.  Now or later?  for c) what columns do you want?
> > 
> > 
> > If you're in the flow with the report job, then please continue.  But
> > otherwise, now(ish).  My focus is to get the UI looking good enough
> > to build a video to support a submission for EclipseCon, and that
> > needs doing by mid Sept or thereabouts.  I think that these features
> > are prereqs for that.
> 
> UI to look good - OK, I'll get on with these.
> 
> > 
> > Which columns?  All attributes, but not references.  Could you also
> > have it such that double click opens up an editor for the object (but
> > perhaps it does this, I don't have it running right now).
> > 
> 
> Was intending to for first class objects (isInstantiable()) - was going 
> to open a modal dialog for second class ones.  Ok?
> 
> > In the meantime, it also buys me some time to get my xactn aspect
> > working:-)  And I really am being very naughty and feeling more and
> > more guilty about the swathes of unit tests that I've left
> > incomplete.
> > 
> Unit tests - ha-ha ho-ho he-he.  Perhaps past the video production eh?
> Actually, UI unit testing will come after our transaction implementation 
> as I see undo/redo / transactions / job histories / macros / unit tests 
> to all be aprt of the same aspect. (re: previous conversations).
> 
> > Dan --- Mike Evans &amp;lang=en">mike.evans at incremental.eu.com>
> wrote :
> > 
> > 
> >> Sorry about the silence over the past two days. Bogged down with
> >> real work. Be careful if you use the combination of XDoclet2,
> >> Hibernate and Java 5 generics - or more specifically - Java 5
> >> generics with any project using qdox(see
> >> http://qdox.codehaus.org/whouses.html).  qdox's
> understanding of
> >> Java5 is less than perfect.
> >> 
> >> Anyhow, working on showing histories and feedback on RCPViewer's
> >> Gui. So far only a 'ReportJob' that is called by most other jobs is
> >>  committed.  This simply puts up something on the status line but I
> >>  intend it to become oh so much more. Next a console view for
> >> displaying histry which I'll also tie it in with Dan's  log4j set
> >> up. Then I'll  start paying more attention to Dan's annotations.
> >> 
> >> Dan - your questions:
> >> 
> >> a) could you reevaluate toString() whenever the object's attributes
> >> have changed? b) could you put the collection view into a
> >> collapsible region, eg like the "Dependency Analysis" section on
> >> the "Dependencies" tab of the manifest viewer.  That'll be needed
> >> for lazy loading of collections in the future. c) could the list be
> >> converted into a table?
> >> 
> >> Yes to all.  Now or later?  for c) what columns do you want?
> >> 
> >> Mike E.
> >> 
> >> 
> >> 
> >> -- Mike Evans Incremental Ltd. www.incremental.eu.com
> >> 
> >> _______________________________________________ 
> >> Rcpviewer-contributors mailing list 
> >> Rcpviewer-contributors at lists.berlios.de
> 
> >> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> > 
> > 
> > 
> > 
> > _______________________________________________ 
> > Rcpviewer-contributors mailing list 
> > Rcpviewer-contributors at lists.berlios.de
> 
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> > 
> > 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From mike.evans at incremental.eu.com  Fri Aug 26 10:49:20 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Fri, 26 Aug 2005 09:49:20 +0100
Subject: [Rcpviewer-contributors] Progress 20050826
Message-ID: <430ED790.3060203@incremental.eu.com>

Started on Dan's GUI wishlist, however biggest addition is:

1. Console View
Grab the latest from SVN.
Clear your workspace data and re-run.
There is now a 'Window' menu with a single 'Show View' option.  This 
lists the three optional views.
Three! Yes - there is now a console view.
If you open this you'll see that it reports the history of actions (impl 
based on the ReportJob).
Soon I'll merge Dan's lof4j stuff and output that to a seperate console. 
  BTW : This would be a reason to leave log4j appender definition 
programmatic rather than declared.

Ok - now Dan's wishlist:

1. Dbl-click on reference list (not yet a table) and it opens an editor 
for the reference object.  No concept of first class/second class yet - 
to come.  Note somethign similar should happen on the single reference 
text field but as it is not refershing after a drag'n'drop, I cannot be 
sure yet.

2. DefaultEditors listens in on all attribute changes and refresh their 
title if necessary.  Using the default label provider for a domain 
object (the onyl current label provider unless you have ctreated more) 
the displayed value is the domain object title() value.

3. Dan's request "...icon + toString() for each object in the body of 
each editor; the idea being to gives the user another "handle" to the 
object to drag/drop (rather than go finding it in the session view)..."
Uh - No.  If you are in an object's editor all the available DnD targets 
  relate to that object (i.e when the editor gets focus, all context 
views relate to it), hence unless you want the object to keep 
referencing itself there is no point have a icon DnD source.

Next Steps:
* put reference lists into expandable composites
* make reference lists into reference tables
Question : for a single reference - do we still want a table for 
displaying all attributes (currently a single reference uses a Text field)?

Mike E.









-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Fri Aug 26 11:57:38 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Fri, 26 Aug 2005 09:57:38 GMT
Subject: [Rcpviewer-contributors] Progress 20050826
Message-ID: <Zen-1E8axu-0003QR-1k@rutherford.zen.co.uk>

Cool.  Sorry I can't keep up with you; it's not that I'm not coding, rather I'm going up a learning curve on AspectJ right now with these blinking transactional aspects.

Anyhow ... I bow to your analysis re: my handle request.  Let me phrase it another way - I've just commissioned some nice icons for Petstore, so I'd like them to appear nice and large on the editor somehow!  There's a pragmatic reason also: builds a metaphor/mental association for the end-user.


> Question : for a single reference - do we still want a table for 
> displaying all attributes (currently a single reference uses a Text field)?

Ho-ho - good one.  Think not, it would look really strange.  Have another suggestion - it's a bit more coding, but would look nice I think.  By default, could you show the icon + toString() of a reference *in* the header of a folding region (ie same device as used to show a table, as previously discussed).  Then, if the folding region is opened up, then (here's the tricky bit) show an editor for the object inlined.  However, to prevent this thing getting too recursive, show just the attributes of the referenced object, not any references or collections.   To edit those relationships, the user would need to double-click to open up a regular editor.

How does that sound?  I'm hoping it would be pretty natural user experience, and it is consistent with the collections in the sense that we display attributes for referenced objects, but nothing further.

Dan

--
Mike Evans <mike.evans at incremental.eu.com> wrote :

> Started on Dan's GUI wishlist, however biggest addition is:
> 
> 1. Console View
> Grab the latest from SVN.
> Clear your workspace data and re-run.
> There is now a 'Window' menu with a single 'Show View' option.  This 
> lists the three optional views.
> Three! Yes - there is now a console view.
> If you open this you'll see that it reports the history of actions (impl 
> based on the ReportJob).
> Soon I'll merge Dan's lof4j stuff and output that to a seperate console. 
>   BTW : This would be a reason to leave log4j appender definition 
> programmatic rather than declared.
> 
> Ok - now Dan's wishlist:
> 
> 1. Dbl-click on reference list (not yet a table) and it opens an editor 
> for the reference object.  No concept of first class/second class yet - 
> to come.  Note somethign similar should happen on the single reference 
> text field but as it is not refershing after a drag'n'drop, I cannot be 
> sure yet.
> 
> 2. DefaultEditors listens in on all attribute changes and refresh their 
> title if necessary.  Using the default label provider for a domain 
> object (the onyl current label provider unless you have ctreated more) 
> the displayed value is the domain object title() value.
> 
> 3. Dan's request "...icon + toString() for each object in the body of 
> each editor; the idea being to gives the user another "handle" to the 
> object to drag/drop (rather than go finding it in the session view)..."
> Uh - No.  If you are in an object's editor all the available DnD targets 
>   relate to that object (i.e when the editor gets focus, all context 
> views relate to it), hence unless you want the object to keep 
> referencing itself there is no point have a icon DnD source.
> 
> Next Steps:
> * put reference lists into expandable composites
> * make reference lists into reference tables
> Question : for a single reference - do we still want a table for 
> displaying all attributes (currently a single reference uses a Text field)?
> 
> Mike E.
> 
> 
> 
> 
> 
> 
> 
> 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







From mike.evans at incremental.eu.com  Sat Aug 27 13:09:47 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Sat, 27 Aug 2005 12:09:47 +0100
Subject: [Rcpviewer-contributors] Progress 20050827
Message-ID: <431049FB.3020106@incremental.eu.com>

Reference fields now on expandable composites, else unchanged,
Much faff with label alignment - has made code uglier (unencapsulated) 
so might just give up on right-aligining labels.
Currently deciding between pretty code or pretty gui.  Probably side 
with the latter, at least until after Dan's movie.

Have also added an icon within the editor body as requested by Dan. 
This is not an active component and, IMHO, looks a bit daft when there 
is only a single editor open - but I can see the point with multiple 
editors open.

Off to the borders now for food, drink and maybe a walk.

Mike E.


-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Sat Aug 27 13:37:36 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sat, 27 Aug 2005 12:37:36 +0100
Subject: [Rcpviewer-contributors] Progress 20050826
In-Reply-To: <431049FB.3020106@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKAEGPDEAA.dan@haywood-associates.co.uk>

> via aspects but I'm not coz a) principle of least surprises b)
> I'm a coward.

We can always refactor later if we want.  I'm only using them where they are
clearly the right approach and an OO approach would be very cumbersome.


> Icons ... Let me know where they could appear additionally.

I'll let you know as I think of places.  One would be when there is a
reference or a collection, as part of the LABEL (so shown even if there is
no object referenced).


> By the way does  'commission' mean 'pay for'?

Yup - but hopefully worth it.  It's been a criticism of NOF that it has
horrid icons - and people get swayed by appearances.  Of course the icons
will be freely usable by developers using the platform.


> I think an inlined gui is better than a table for the collection stuff
> too.  I'll start with it read-only and have a think about how
> complicated it would be to make it read-write.

Okay.   Was trying to envisage how this might look, one idea is as follows:
split the region representing the expandable composite into two columns, say
1/3:2/3 ratio.  The first column has the list of all objects in the
collection.  The second large column has the inlined editor and shows the
currently selected column.

The second column could also have:
a) "drop" region to allow new objects to be added
b) a remove button to allow an existing object to be removed (equiv to your
current + and -)

One thing we could also do is introduce an annotation to indicate the
"important" attribute - those that should be shown inline (non-important
ones would be omitted).  But I do feel that this is a little too
UI-specific; I'm trying to think what the fundamental domain semantic is for
this (and haven't been able to just yet).

Separately, I still think it would be nice to have a table view; it's a
natural way to look at a lot of objects together.  So here's an idea (not a
prereq for the movie, though would be nice); on the header for the
collection (the expandable composite), have some sort of right-click menu
saying something like "open as table".  That would open a new editor that
showed all the objects in table form, perhaps also indicating the owning
object somehow.

This would be nice at demonstrating that the UI has more than one way to
represent any given domain object.  But it would also be genuinely useful -
there is at least one case on the DSFA where we have had to do a bit of a
work-around to get the above behaviour.




> -----Original Message-----
> From: Mike Evans [mailto:mike.evans at incremental.eu.com]
> Sent: 27 August 2005 08:37
> To: Dan Haywood
> Subject: Re: [Rcpviewer-contributors] Progress 20050826
>
>
> below
>
>
> Mike E.
>
> Dan Haywood wrote:
> > Cool.  Sorry I can't keep up with you; it's not that I'm not coding,
> > rather I'm going up a learning curve on AspectJ right now with these
> > blinking transactional aspects.
> Ha!  'can't keep up with me...' - I don't think we should get into
> relative work rates.  Looking forward to studying the results of your
> AspectJ research - will be very interesting.  I realise that much of the
> GUI stuff I have coming up (e.g the consoles) could be beautifully done
> via aspects but I'm not coz a) principle of least surprises b)
> I'm a coward.
>
> >
> > Anyhow ... I bow to your analysis re: my handle request.  Let me
> > phrase it another way - I've just commissioned some nice icons for
> > Petstore, so I'd like them to appear nice and large on the editor
> > somehow!  There's a pragmatic reason also: builds a metaphor/mental
> > association for the end-user.
> Let me know where they could appear additionally.  By the way does
> 'commission' mean 'pay for'?
> >
> >
> >
> >> Question : for a single reference - do we still want a table for
> >> displaying all attributes (currently a single reference uses a Text
> >> field)?
> >
> >
> > Ho-ho - good one.  Think not, it would look really strange.  Have
> > another suggestion - it's a bit more coding, but would look nice I
> > think.  By default, could you show the icon + toString() of a
> > reference *in* the header of a folding region (ie same device as used
> > to show a table, as previously discussed).  Then, if the folding
> > region is opened up, then (here's the tricky bit) show an editor for
> > the object inlined.  However, to prevent this thing getting too
> > recursive, show just the attributes of the referenced object, not any
> > references or collections.   To edit those relationships, the user
> > would need to double-click to open up a regular editor.
> >
> > How does that sound?  I'm hoping it would be pretty natural user
> > experience, and it is consistent with the collections in the sense
> > that we display attributes for referenced objects, but nothing
> > further.
> I think an inlined gui is better than a table for the collection stuff
> too.  I'll start with it read-only and have a think about how
> complicated it would be to make it read-write.
>
> Mike E.
>
> >
> > Dan
> >
> > -- Mike Evans <mike.evans at incremental.eu.com> wrote :
> >
> >
> >> Started on Dan's GUI wishlist, however biggest addition is:
> >>
> >> 1. Console View Grab the latest from SVN. Clear your workspace data
> >> and re-run. There is now a 'Window' menu with a single 'Show View'
> >> option.  This lists the three optional views. Three! Yes - there is
> >> now a console view. If you open this you'll see that it reports the
> >> history of actions (impl based on the ReportJob). Soon I'll merge
> >> Dan's lof4j stuff and output that to a seperate console. BTW : This
> >> would be a reason to leave log4j appender definition programmatic
> >> rather than declared.
> >>
> >> Ok - now Dan's wishlist:
> >>
> >> 1. Dbl-click on reference list (not yet a table) and it opens an
> >> editor for the reference object.  No concept of first class/second
> >> class yet - to come.  Note somethign similar should happen on the
> >> single reference text field but as it is not refershing after a
> >> drag'n'drop, I cannot be sure yet.
> >>
> >> 2. DefaultEditors listens in on all attribute changes and refresh
> >> their title if necessary.  Using the default label provider for a
> >> domain object (the onyl current label provider unless you have
> >> ctreated more) the displayed value is the domain object title()
> >> value.
> >>
> >> 3. Dan's request "...icon + toString() for each object in the body
> >> of each editor; the idea being to gives the user another "handle"
> >> to the object to drag/drop (rather than go finding it in the
> >> session view)..." Uh - No.  If you are in an object's editor all
> >> the available DnD targets relate to that object (i.e when the
> >> editor gets focus, all context views relate to it), hence unless
> >> you want the object to keep referencing itself there is no point
> >> have a icon DnD source.
> >>
> >> Next Steps: * put reference lists into expandable composites * make
> >> reference lists into reference tables Question : for a single
> >> reference - do we still want a table for displaying all attributes
> >> (currently a single reference uses a Text field)?
> >>
> >> Mike E.
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >> -- Mike Evans Incremental Ltd. www.incremental.eu.com
> >>
> >> _______________________________________________
> >> Rcpviewer-contributors mailing list
> >> Rcpviewer-contributors at lists.berlios.de
> >> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >
> >
> >
> >
> >
> >
> > _______________________________________________
> > Rcpviewer-contributors mailing list
> > Rcpviewer-contributors at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >
> >
>
> --
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
>
>




From dan at haywood-associates.co.uk  Sat Aug 27 14:06:52 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sat, 27 Aug 2005 13:06:52 +0100
Subject: [Rcpviewer-contributors] Progress 20050827
In-Reply-To: <431049FB.3020106@incremental.eu.com>
Message-ID: <LGEELLOAEBMLCOGIKLMKMEGPDEAA.dan@haywood-associates.co.uk>

And there was much sadness and gnashing of teeth.

Got my aspect working last night, so was gonna do an update then a commit
and pick up your latest.  However, I canna find the console view, doesn't
seem to be committed in SVN, see
http://svn.berlios.de/wsvn/rcpviewer/trunk/workspace/de.berlios.rcpviewer.gu
i/src/de/berlios/rcpviewer/gui/?rev=477&sc=1

So if you're not in the car already...

Dan

> -----Original Message-----
> From: rcpviewer-contributors-admin at berlios.de
> [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
> Sent: 27 August 2005 12:10
> To: rcpviewer-contributors at lists.berlios.de
> Subject: [Rcpviewer-contributors] Progress 20050827
>
>
> Reference fields now on expandable composites, else unchanged,
> Much faff with label alignment - has made code uglier (unencapsulated)
> so might just give up on right-aligining labels.
> Currently deciding between pretty code or pretty gui.  Probably side
> with the latter, at least until after Dan's movie.
>
> Have also added an icon within the editor body as requested by Dan.
> This is not an active component and, IMHO, looks a bit daft when there
> is only a single editor open - but I can see the point with multiple
> editors open.
>
> Off to the borders now for food, drink and maybe a walk.
>
> Mike E.
>
>
> --
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
>
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>




From dan at haywood-associates.co.uk  Sat Aug 27 18:07:09 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Sat, 27 Aug 2005 17:07:09 +0100
Subject: [Rcpviewer-contributors] Dan's Progress 20050827
In-Reply-To: <LGEELLOAEBMLCOGIKLMKMEGPDEAA.dan@haywood-associates.co.uk>
Message-ID: <LGEELLOAEBMLCOGIKLMKMEHBDEAA.dan@haywood-associates.co.uk>

Have uploaded my stuff, and commented out the lines that relate to the
yet-to-be-seen console view.  Mike - search for "MIKEE Console stuff
commented out".

So, still no real tests, but if you're interested in looking at the aspects,
check out (in ...domain.runtime plugin):

- session.PojoAspect:
  - now defines a bunch of quite interesting pointcuts to do with
interacting with the pojo in various ways (modify attribute, add to
collection, set reference, invoke operation)
- session.TraceInteractionsAspect
  - trace 'em (though not sure if this is exactly working, I've disabled for
now)
- transaction.TraceTransactionsAspect
  - sess what's happening in the transaction packages
- tranasction.internal.TransactionChangeAspect
  - abstract aspect that does the bulk of the transactional management, and
defines some helper methods for its sub-aspects; sub-classed by:
  - TransactionAttributeChangeAspect
    - rolling changes to an attribute into the current transaction
  - TransactionOneToOneReferenceChangeAspect
    - rolling changes to an 1:1 reference into the current transaction
  - TransactionCollectionReferenceChangeAspect
    - rolling changes to a collection into the current transaction
  - TransactionInvokeOperationAspect
    - explicit xactn demarcation (as opposed to implicit for the other
sub-aspects)

Regarding listening to changes, can register listeners on either:
- ITransactionManager (TransactionManager.INSTANCE); creating, committing
etc of ITransaction;
- ITransaction itself; changes being added to the transaction, undo/redo
(also duplicates up on commit etc.)

Note that when a user initiates an "interaction", such as invoking an
operation, this may result in several changes, each picked up by the
TransactionXxxChangeAspect.  The first of these will locate the current
transaction (or potentially create one), and then will set up the
transaction so that all subsequent changes resultant from the interaction
(eg caused by the operation) are added as an atomic ChangeSet (composite of
IChanges).  Thus, if the user were to undo then all changes in that
ChangeSet would be undone.

Although transaction are automatically started, they are NOT is not
automatically committed.  For that one needs to invoke ITransaction#commit.
There can be multiple concurrent transactions at the same time.  As each
transaction proceeds it will enroll pojos - those that have been changed.
At any given time ITransaction#getEnrolledPojos() will tell you the
footprint.  If the user performs an interaction for an object in some
transaction that would impact a pojo already enrolled in some other
in-progress transaction, then an exception will be thrown and the ChangeSet
(ie interaction) rejected.  The transaction remains in place.

At least, all of that's the theory.  But that's why I need to write some
tests before I forget all this stuff!

Dan


> -----Original Message-----
> From: rcpviewer-contributors-admin at berlios.de
> [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Dan Haywood
> Sent: 27 August 2005 13:07
> To: rcpviewer-contributors at lists.berlios.de
> Subject: RE: [Rcpviewer-contributors] Progress 20050827
>
>
> And there was much sadness and gnashing of teeth.
>
> Got my aspect working last night, so was gonna do an update then a commit
> and pick up your latest.  However, I canna find the console view, doesn't
> seem to be committed in SVN, see
> http://svn.berlios.de/wsvn/rcpviewer/trunk/workspace/de.berlios.rc
> pviewer.gu
> i/src/de/berlios/rcpviewer/gui/?rev=477&sc=1
>
> So if you're not in the car already...
>
> Dan
>
> > -----Original Message-----
> > From: rcpviewer-contributors-admin at berlios.de
> > [mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
> > Sent: 27 August 2005 12:10
> > To: rcpviewer-contributors at lists.berlios.de
> > Subject: [Rcpviewer-contributors] Progress 20050827
> >
> >
> > Reference fields now on expandable composites, else unchanged,
> > Much faff with label alignment - has made code uglier (unencapsulated)
> > so might just give up on right-aligining labels.
> > Currently deciding between pretty code or pretty gui.  Probably side
> > with the latter, at least until after Dan's movie.
> >
> > Have also added an icon within the editor body as requested by Dan.
> > This is not an active component and, IMHO, looks a bit daft when there
> > is only a single editor open - but I can see the point with multiple
> > editors open.
> >
> > Off to the borders now for food, drink and maybe a walk.
> >
> > Mike E.
> >
> >
> > --
> > Mike Evans
> > Incremental Ltd.
> > www.incremental.eu.com
> >
> > _______________________________________________
> > Rcpviewer-contributors mailing list
> > Rcpviewer-contributors at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> >
>
>
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>




From mike.evans at incremental.eu.com  Mon Aug 29 09:41:15 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Mon, 29 Aug 2005 08:41:15 +0100
Subject: [Rcpviewer-contributors] Progress 20050827
In-Reply-To: <LGEELLOAEBMLCOGIKLMKMEGPDEAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKMEGPDEAA.dan@haywood-associates.co.uk>
Message-ID: <4312BC1B.2080002@incremental.eu.com>

aaargh!
apologies - I should have explained.
The console view is provided by the platform by the 
org.eclipse.ui.console plugin.  This has been added as a dependency for 
the gui plugin so if the code compiles, the consolve view should be 
available.
What you'll need to do is update your run configuration;
i) it is probably worth clearing the workspace data (Main tab of runtime 
config) - this'll anyway be needed to get the new 'Window' menu.
ii) on the 'plugins' tab click 'Add Required Plugins' and then 'Validate 
   Plug-in Set'.

SO I have removed Dab's commented out stuff and everything hunky-dory. 
I'll commit later when I have done by coding for the day.

Sorry I did not make this clear.  My fault for trying to claim credit 
for platform-provided code!

Mike E.


Dan Haywood wrote:

> And there was much sadness and gnashing of teeth.
> 
> Got my aspect working last night, so was gonna do an update then a commit
> and pick up your latest.  However, I canna find the console view, doesn't
> seem to be committed in SVN, see
> http://svn.berlios.de/wsvn/rcpviewer/trunk/workspace/de.berlios.rcpviewer.gu
> i/src/de/berlios/rcpviewer/gui/?rev=477&sc=1
> 
> So if you're not in the car already...
> 
> Dan
> 
> 
>>-----Original Message-----
>>From: rcpviewer-contributors-admin at berlios.de
>>[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
>>Sent: 27 August 2005 12:10
>>To: rcpviewer-contributors at lists.berlios.de
>>Subject: [Rcpviewer-contributors] Progress 20050827
>>
>>
>>Reference fields now on expandable composites, else unchanged,
>>Much faff with label alignment - has made code uglier (unencapsulated)
>>so might just give up on right-aligining labels.
>>Currently deciding between pretty code or pretty gui.  Probably side
>>with the latter, at least until after Dan's movie.
>>
>>Have also added an icon within the editor body as requested by Dan.
>>This is not an active component and, IMHO, looks a bit daft when there
>>is only a single editor open - but I can see the point with multiple
>>editors open.
>>
>>Off to the borders now for food, drink and maybe a walk.
>>
>>Mike E.
>>
>>
>>--
>>Mike Evans
>>Incremental Ltd.
>>www.incremental.eu.com
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Mon Aug 29 09:42:18 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Mon, 29 Aug 2005 08:42:18 +0100
Subject: [Rcpviewer-contributors] Dan's Progress 20050827
In-Reply-To: <LGEELLOAEBMLCOGIKLMKMEHBDEAA.dan@haywood-associates.co.uk>
References: <LGEELLOAEBMLCOGIKLMKMEHBDEAA.dan@haywood-associates.co.uk>
Message-ID: <4312BC5A.1020803@incremental.eu.com>

wow
will have a look at once GUI stuff done for Dan's film

Mike E.

Dan Haywood wrote:

> Have uploaded my stuff, and commented out the lines that relate to the
> yet-to-be-seen console view.  Mike - search for "MIKEE Console stuff
> commented out".
> 
> So, still no real tests, but if you're interested in looking at the aspects,
> check out (in ...domain.runtime plugin):
> 
> - session.PojoAspect:
>   - now defines a bunch of quite interesting pointcuts to do with
> interacting with the pojo in various ways (modify attribute, add to
> collection, set reference, invoke operation)
> - session.TraceInteractionsAspect
>   - trace 'em (though not sure if this is exactly working, I've disabled for
> now)
> - transaction.TraceTransactionsAspect
>   - sess what's happening in the transaction packages
> - tranasction.internal.TransactionChangeAspect
>   - abstract aspect that does the bulk of the transactional management, and
> defines some helper methods for its sub-aspects; sub-classed by:
>   - TransactionAttributeChangeAspect
>     - rolling changes to an attribute into the current transaction
>   - TransactionOneToOneReferenceChangeAspect
>     - rolling changes to an 1:1 reference into the current transaction
>   - TransactionCollectionReferenceChangeAspect
>     - rolling changes to a collection into the current transaction
>   - TransactionInvokeOperationAspect
>     - explicit xactn demarcation (as opposed to implicit for the other
> sub-aspects)
> 
> Regarding listening to changes, can register listeners on either:
> - ITransactionManager (TransactionManager.INSTANCE); creating, committing
> etc of ITransaction;
> - ITransaction itself; changes being added to the transaction, undo/redo
> (also duplicates up on commit etc.)
> 
> Note that when a user initiates an "interaction", such as invoking an
> operation, this may result in several changes, each picked up by the
> TransactionXxxChangeAspect.  The first of these will locate the current
> transaction (or potentially create one), and then will set up the
> transaction so that all subsequent changes resultant from the interaction
> (eg caused by the operation) are added as an atomic ChangeSet (composite of
> IChanges).  Thus, if the user were to undo then all changes in that
> ChangeSet would be undone.
> 
> Although transaction are automatically started, they are NOT is not
> automatically committed.  For that one needs to invoke ITransaction#commit.
> There can be multiple concurrent transactions at the same time.  As each
> transaction proceeds it will enroll pojos - those that have been changed.
> At any given time ITransaction#getEnrolledPojos() will tell you the
> footprint.  If the user performs an interaction for an object in some
> transaction that would impact a pojo already enrolled in some other
> in-progress transaction, then an exception will be thrown and the ChangeSet
> (ie interaction) rejected.  The transaction remains in place.
> 
> At least, all of that's the theory.  But that's why I need to write some
> tests before I forget all this stuff!
> 
> Dan
> 
> 
> 
>>-----Original Message-----
>>From: rcpviewer-contributors-admin at berlios.de
>>[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Dan Haywood
>>Sent: 27 August 2005 13:07
>>To: rcpviewer-contributors at lists.berlios.de
>>Subject: RE: [Rcpviewer-contributors] Progress 20050827
>>
>>
>>And there was much sadness and gnashing of teeth.
>>
>>Got my aspect working last night, so was gonna do an update then a commit
>>and pick up your latest.  However, I canna find the console view, doesn't
>>seem to be committed in SVN, see
>>http://svn.berlios.de/wsvn/rcpviewer/trunk/workspace/de.berlios.rc
>>pviewer.gu
>>i/src/de/berlios/rcpviewer/gui/?rev=477&sc=1
>>
>>So if you're not in the car already...
>>
>>Dan
>>
>>
>>>-----Original Message-----
>>>From: rcpviewer-contributors-admin at berlios.de
>>>[mailto:rcpviewer-contributors-admin at berlios.de]On Behalf Of Mike Evans
>>>Sent: 27 August 2005 12:10
>>>To: rcpviewer-contributors at lists.berlios.de
>>>Subject: [Rcpviewer-contributors] Progress 20050827
>>>
>>>
>>>Reference fields now on expandable composites, else unchanged,
>>>Much faff with label alignment - has made code uglier (unencapsulated)
>>>so might just give up on right-aligining labels.
>>>Currently deciding between pretty code or pretty gui.  Probably side
>>>with the latter, at least until after Dan's movie.
>>>
>>>Have also added an icon within the editor body as requested by Dan.
>>>This is not an active component and, IMHO, looks a bit daft when there
>>>is only a single editor open - but I can see the point with multiple
>>>editors open.
>>>
>>>Off to the borders now for food, drink and maybe a walk.
>>>
>>>Mike E.
>>>
>>>
>>>--
>>>Mike Evans
>>>Incremental Ltd.
>>>www.incremental.eu.com
>>>
>>>_______________________________________________
>>>Rcpviewer-contributors mailing list
>>>Rcpviewer-contributors at lists.berlios.de
>>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>>
>>
>>
>>_______________________________________________
>>Rcpviewer-contributors mailing list
>>Rcpviewer-contributors at lists.berlios.de
>>http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
>>
> 
> 
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors
> 
> 

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Mon Aug 29 11:37:03 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Mon, 29 Aug 2005 10:37:03 +0100
Subject: [Rcpviewer-contributors] Progress 20050829
Message-ID: <4312D73F.8030900@incremental.eu.com>

Nothing checked in today (hence the Console stuff is still commented out 
in SVN).
Part way through giving Dan a choice of GUI's for collection parts and 
switching to a table view as one of these.
Hopefully some stuff checked in tomorrow.

Mike E.



-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From mike.evans at incremental.eu.com  Tue Aug 30 13:25:59 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Tue, 30 Aug 2005 12:25:59 +0100
Subject: [Rcpviewer-contributors] Progress 20050830
Message-ID: <43144247.9060809@incremental.eu.com>

This is taking too long...
Still nothing to check in.
Have basic table and (very) basic master.child alternate views for 
collections but having weird errors when adding to the collection.
Dan - before I back everything out to find otu what has gone wrong - any 
ideas whats going on with the 'NoSuchField' error (stack trace below)?

Mike E.


-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com

this= InvocationTargetException  (id=66)
	cause= null
	detailMessage= null
	stackTrace= null
	target= null
arg0= NoSuchFieldError  (id=17)
	cause= NoSuchFieldError  (id=17)
	detailMessage= "ajc$cflowCounter$0"
	stackTrace= null


Thread [main] (Suspended)
	Beans.addToEasyBeans_aroundBody20(Beans, EasyBean) line: 31
	Beans.addToEasyBeans(EasyBean) line: 1
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not 
available [native method]
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
	Method.invoke(Object, Object...) line: 585
	DomainObject$CollectionReference.addToCollection(IDomainObject<Q>) 
line: 585
	AddReferenceJob.runInUIThread(IProgressMonitor) line: 45
	UIJob$1.run() line: 93
	RunnableLock.run() line: 35
	UISynchronizer(Synchronizer).runAsyncMessages(boolean) line: 123
	Display.runAsyncMessages(boolean) line: 3057
	Display.readAndDispatch() line: 2716
	Workbench.runEventLoop(Window$IExceptionHandler, Display) line: 1699
	Workbench.runUI() line: 1663
	Workbench.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 367
	PlatformUI.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 143
	Application.run(Object) line: 18
	PlatformActivator$1.run(Object) line: 226
	EclipseStarter.run(Object) line: 376
	EclipseStarter.run(String[], Runnable) line: 163
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not 
available [native method]
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
	Method.invoke(Object, Object...) line: 585
	Main.invokeFramework(String[], URL[]) line: 334
	Main.basicRun(String[]) line: 278
	Main.run(String[]) line: 973
	Main.main(String[]) line: 948



From dan at haywood-associates.co.uk  Tue Aug 30 14:52:56 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Tue, 30 Aug 2005 12:52:56 GMT
Subject: [Rcpviewer-contributors] Re: Progress 20050830
Message-ID: <Zen-1EA5bk-0007NF-Hx@heisenberg.zen.co.uk>

Mike,
I've seen this problem too.  I think it's AspectJ getting lost.

My workaround is to do a full clean then a manual build All.  In fact, I've taken to doing manual builds on my laptop cos otherwise the poor old AspectJ weaver does it's best to keep up but sometimes gets lost like you've seen.

So hopefully that's your problem...

Dan
----------

Mike Evans <mike.evans at incremental.eu.com> wrote :

> This is taking too long...
> Still nothing to check in.
> Have basic table and (very) basic master.child alternate views for 
> collections but having weird errors when adding to the collection.
> Dan - before I back everything out to find otu what has gone wrong - any 
> ideas whats going on with the 'NoSuchField' error (stack trace below)?
> 
> Mike E.
> 
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> this= InvocationTargetException  (id=66)
> 	cause= null
> 	detailMessage= null
> 	stackTrace= null
> 	target= null
> arg0= NoSuchFieldError  (id=17)
> 	cause= NoSuchFieldError  (id=17)
> 	detailMessage= "ajc$cflowCounter$0"
> 	stackTrace= null
> 
> 
> Thread [main] (Suspended)
> 	Beans.addToEasyBeans_aroundBody20(Beans, EasyBean) line: 31
> 	Beans.addToEasyBeans(EasyBean) line: 1
> 	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not 
> available [native method]
> 	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
> 	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
> 	Method.invoke(Object, Object...) line: 585
> 	DomainObject$CollectionReference.addToCollection(IDomainObject) 
> line: 585
> 	AddReferenceJob.runInUIThread(IProgressMonitor) line: 45
> 	UIJob$1.run() line: 93
> 	RunnableLock.run() line: 35
> 	UISynchronizer(Synchronizer).runAsyncMessages(boolean) line: 123
> 	Display.runAsyncMessages(boolean) line: 3057
> 	Display.readAndDispatch() line: 2716
> 	Workbench.runEventLoop(Window$IExceptionHandler, Display) line: 1699
> 	Workbench.runUI() line: 1663
> 	Workbench.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 367
> 	PlatformUI.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 143
> 	Application.run(Object) line: 18
> 	PlatformActivator$1.run(Object) line: 226
> 	EclipseStarter.run(Object) line: 376
> 	EclipseStarter.run(String[], Runnable) line: 163
> 	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not 
> available [native method]
> 	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
> 	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
> 	Method.invoke(Object, Object...) line: 585
> 	Main.invokeFramework(String[], URL[]) line: 334
> 	Main.basicRun(String[]) line: 278
> 	Main.run(String[]) line: 973
> 	Main.main(String[]) line: 948







From mike.evans at incremental.eu.com  Wed Aug 31 11:10:39 2005
From: mike.evans at incremental.eu.com (Mike Evans)
Date: Wed, 31 Aug 2005 10:10:39 +0100
Subject: [Rcpviewer-contributors] Progress 20050831
Message-ID: <4315740F.5050509@incremental.eu.com>

Early stages of collection reference gui (very early).
However I have done all the background work - notably revamped label 
providers and field builders in anticipation of nested editors and 
reference tables.
 From now in it <should> be plain sailing for read-only functionality at 
least.  I still think can have something pretty-ish for Dan's movie.
Dan - can you gimee a drop-dead date for you movie production so i knoe 
how many bells and whistles I have time for?
Better still - any particlur bells and whistles you need (e.g table 
column selection..?)
Rev 481 committed to SVN.
Note I could not help myself - there has been some rejigging of packages
- the editor package only has two classes left in it but now has two 
subpackages with a whole lot more:
* 'opsview' with all the old ops view stuff
* 'parts' for the pile of classes needed by clever reference gui's.

Mike E.

PS : Dan - ta for the clue on ApectJ getting it nickers in a  twist - a 
full clean and manual rebuild worked nicely.  Therefater auto-rebuilds 
have been fine but that's probably because I am not touching the aspect 
stuff.

-- 
Mike Evans
Incremental Ltd.
www.incremental.eu.com



From dan at haywood-associates.co.uk  Wed Aug 31 16:22:40 2005
From: dan at haywood-associates.co.uk (Dan Haywood)
Date: Wed, 31 Aug 2005 14:22:40 GMT
Subject: [Rcpviewer-contributors] Progress 20050831
Message-ID: <Zen-1EATU8-0007aT-PL@rutherford.zen.co.uk>

Good-o.  "From now in it be plain sailing" - famous last words...

Drop dead for movie is still a while off.  Realistically the proposal needs to be in early Oct; aiming for 1st Oct.  

I propose we should aim to get features done by Mon 19 Sept, and then that gives us 2 weeks for (a) me to get to grips with CamStudio and (b) for you/me to tidy up anything that isn't working well enough in the movie.

Separately, I notice that Subclipse 0.9.33 is out - might be worth looking at since the release notes say that there are a whole bunch of "correctness" fixes.  It also bundles JavaSVN.  On the other hand, maybe leave until Oct...

Dan

----
Mike Evans <mike.evans at incremental.eu.com> wrote :

> Early stages of collection reference gui (very early).
> However I have done all the background work - notably revamped label 
> providers and field builders in anticipation of nested editors and 
> reference tables.
>  From now in it  be plain sailing for read-only functionality at 
> least.  I still think can have something pretty-ish for Dan's movie.
> Dan - can you gimee a drop-dead date for you movie production so i knoe 
> how many bells and whistles I have time for?
> Better still - any particlur bells and whistles you need (e.g table 
> column selection..?)
> Rev 481 committed to SVN.
> Note I could not help myself - there has been some rejigging of packages
> - the editor package only has two classes left in it but now has two 
> subpackages with a whole lot more:
> * 'opsview' with all the old ops view stuff
> * 'parts' for the pile of classes needed by clever reference gui's.
> 
> Mike E.
> 
> PS : Dan - ta for the clue on ApectJ getting it nickers in a  twist - a 
> full clean and manual rebuild worked nicely.  Therefater auto-rebuilds 
> have been fine but that's probably because I am not touching the aspect 
> stuff.
> 
> -- 
> Mike Evans
> Incremental Ltd.
> www.incremental.eu.com
> 
> _______________________________________________
> Rcpviewer-contributors mailing list
> Rcpviewer-contributors at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/rcpviewer-contributors







